





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">



  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/frameworks-148da7a2b8b9ad739a5a0b8b68683fed4ac7e50ce8185f17d86aa05e75ed376e.css" integrity="sha256-FI2nori5rXOaWguLaGg/7UrH5QzoGF8X2GqgXnXtN24=" media="all" rel="stylesheet" />
  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-4cb6b37ae0c653978a80cfe0c9288fcb02f00f746d1e076237703e57761c8973.css" integrity="sha256-TLazeuDGU5eKgM/gySiPywLwD3RtHgdiN3A+V3YciXM=" media="all" rel="stylesheet" />
  
  
  
  

  <meta name="viewport" content="width=device-width">
  
  <title>Parsley.js/parsley.min.js.map at master Â· guillaumepotier/Parsley.js</title>
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta content="https://avatars1.githubusercontent.com/u/496234?v=3&amp;s=400" property="og:image" /><meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="guillaumepotier/Parsley.js" property="og:title" /><meta content="https://github.com/guillaumepotier/Parsley.js" property="og:url" /><meta content="Parsley.js - Validate your forms, frontend, without writing a single line of javascript" property="og:description" />

  <link rel="assets" href="https://assets-cdn.github.com/">
  <link rel="web-socket" href="wss://live.github.com/_sockets/VjI6MTc0ODg5MjE4OmQ2MDE3OWYxMTVjMDRkMmFmZDRmODgyNTRjZTJiMDUzNzNmMGZmMTAzYjdjY2JkYTEyZWVmYjcyYmQ1MjExODI=--303102d57d5e3260af512d307537b3fe18c79ac7">
  <meta name="pjax-timeout" content="1000">
  <link rel="sudo-modal" href="/sessions/sudo_modal">
  <meta name="request-id" content="FE1B:14D5C:5D124C:9412F5:592A7944" data-pjax-transient>
  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

  <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
<meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
    <meta name="google-analytics" content="UA-3769691-2">

<meta content="collector.githubapp.com" name="octolytics-host" /><meta content="github" name="octolytics-app-id" /><meta content="https://collector.githubapp.com/github-external/browser_event" name="octolytics-event-url" /><meta content="FE1B:14D5C:5D124C:9412F5:592A7944" name="octolytics-dimension-request_id" /><meta content="sea" name="octolytics-dimension-region_edge" /><meta content="iad" name="octolytics-dimension-region_render" /><meta content="12205993" name="octolytics-actor-id" /><meta content="sajal2692" name="octolytics-actor-login" /><meta content="478e6f470f97b6effed681b00b785fde0dcaabd45ce7a16462c3cd1ca975dd2b" name="octolytics-actor-hash" />
<meta content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" name="analytics-location" />




  <meta class="js-ga-set" name="dimension1" content="Logged In">


  

      <meta name="hostname" content="github.com">
  <meta name="user-login" content="sajal2692">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="ZDMwYjAxNDBhZDY5OGMwNmRjNTExZDYwMDJlMzZiZGE1Y2VmMGRjNDJjNGIyMTEzZWQ2MzA2Yzg2NzQ4ZjY2Ynx7InJlbW90ZV9hZGRyZXNzIjoiMTIyLjE3Ny41MC4yOSIsInJlcXVlc3RfaWQiOiJGRTFCOjE0RDVDOjVEMTI0Qzo5NDEyRjU6NTkyQTc5NDQiLCJ0aW1lc3RhbXAiOjE0OTU5NTU3ODAsImhvc3QiOiJnaXRodWIuY29tIn0=">


  <meta name="html-safe-nonce" content="662e41ea3efbdadb4bfe370c87b6c22b793171f6">

  <meta http-equiv="x-pjax-version" content="757efe3f0bbc93dc131b9a7d2ae5448c">
  

    
  <meta name="description" content="Parsley.js - Validate your forms, frontend, without writing a single line of javascript">
  <meta name="go-import" content="github.com/guillaumepotier/Parsley.js git https://github.com/guillaumepotier/Parsley.js.git">

  <meta content="496234" name="octolytics-dimension-user_id" /><meta content="guillaumepotier" name="octolytics-dimension-user_login" /><meta content="7191565" name="octolytics-dimension-repository_id" /><meta content="guillaumepotier/Parsley.js" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="7191565" name="octolytics-dimension-repository_network_root_id" /><meta content="guillaumepotier/Parsley.js" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/guillaumepotier/Parsley.js/commits/master.atom" rel="alternate" title="Recent Commits to Parsley.js:master" type="application/atom+xml">


    <link rel="canonical" href="https://github.com/guillaumepotier/Parsley.js/blob/master/dist/parsley.min.js.map" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">


  <meta name="u2f-support" content="true">

  </head>

  <body class="logged-in env-production emoji-size-boost page-blob">
    



  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    



        
<div class="header" role="banner">
  <div class="container clearfix">
    <a class="header-logo-invertocat" href="https://github.com/" data-hotkey="g d" aria-label="Homepage" data-ga-click="Header, go to dashboard, icon:logo">
  <svg aria-hidden="true" class="octicon octicon-mark-github" height="32" version="1.1" viewBox="0 0 16 16" width="32"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>


        <div class="header-search scoped-search site-scoped-search js-site-search" role="search">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/guillaumepotier/Parsley.js/search" class="js-site-search-form" data-scoped-search-url="/guillaumepotier/Parsley.js/search" data-unscoped-search-url="/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <label class="form-control header-search-wrapper js-chromeless-input-container">
        <a href="/guillaumepotier/Parsley.js/blob/master/dist/parsley.min.js.map" class="header-search-scope no-underline">This repository</a>
      <input type="text"
        class="form-control header-search-input js-site-search-focus js-site-search-field is-clearable"
        data-hotkey="s"
        name="q"
        value=""
        placeholder="Search"
        aria-label="Search this repository"
        data-unscoped-placeholder="Search GitHub"
        data-scoped-placeholder="Search"
        autocapitalize="off">
        <input type="hidden" class="js-site-search-type-field" name="type" >
    </label>
</form></div>


      <ul class="header-nav float-left" role="navigation">
        <li class="header-nav-item">
          <a href="/pulls" aria-label="Pull requests you created" class="js-selected-navigation-item header-nav-link" data-ga-click="Header, click, Nav menu - item:pulls context:user" data-hotkey="g p" data-selected-links="/pulls /pulls/assigned /pulls/mentioned /pulls">
            Pull requests
</a>        </li>
        <li class="header-nav-item">
          <a href="/issues" aria-label="Issues you created" class="js-selected-navigation-item header-nav-link" data-ga-click="Header, click, Nav menu - item:issues context:user" data-hotkey="g i" data-selected-links="/issues /issues/assigned /issues/mentioned /issues">
            Issues
</a>        </li>
            <li class="header-nav-item">
              <a href="/marketplace" class="js-selected-navigation-item header-nav-link" data-ga-click="Header, click, Nav menu - item:marketplace context:user" data-selected-links=" /marketplace">
                Marketplace
</a>            </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://gist.github.com/" data-ga-click="Header, go to gist, text:gist">Gist</a>
          </li>
      </ul>

    
<ul class="header-nav user-nav float-right" id="user-links">
  <li class="header-nav-item">
    
    <a href="/notifications" aria-label="You have unread notifications" class="header-nav-link notification-indicator tooltipped tooltipped-s js-socket-channel js-notification-indicator " data-channel="notification-changed:12205993" data-ga-click="Header, go to notifications, icon:unread" data-hotkey="g n">
        <span class="mail-status unread"></span>
        <svg aria-hidden="true" class="octicon octicon-bell float-left" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 12v1H0v-1l.73-.58c.77-.77.81-2.55 1.19-4.42C2.69 3.23 6 2 6 2c0-.55.45-1 1-1s1 .45 1 1c0 0 3.39 1.23 4.16 5 .38 1.88.42 3.66 1.19 4.42l.66.58H14zm-7 4c1.11 0 2-.89 2-2H5c0 1.11.89 2 2 2z"/></svg>
</a>
  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link tooltipped tooltipped-s js-menu-target" href="/new"
       aria-label="Create newâ¦"
       data-ga-click="Header, create new, icon:add">
      <svg aria-hidden="true" class="octicon octicon-plus float-left" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 9H7v5H5V9H0V7h5V2h2v5h5z"/></svg>
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      <ul class="dropdown-menu dropdown-menu-sw">
        
<a class="dropdown-item" href="/new" data-ga-click="Header, create new repository">
  New repository
</a>

  <a class="dropdown-item" href="/new/import" data-ga-click="Header, import a repository">
    Import repository
  </a>

<a class="dropdown-item" href="https://gist.github.com/" data-ga-click="Header, create new gist">
  New gist
</a>

  <a class="dropdown-item" href="/organizations/new" data-ga-click="Header, create new organization">
    New organization
  </a>



  <div class="dropdown-divider"></div>
  <div class="dropdown-header">
    <span title="guillaumepotier/Parsley.js">This repository</span>
  </div>
    <a class="dropdown-item" href="/guillaumepotier/Parsley.js/issues/new" data-ga-click="Header, create new issue">
      New issue
    </a>

      </ul>
    </div>
  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link name tooltipped tooltipped-sw js-menu-target" href="/sajal2692"
       aria-label="View profile and more"
       data-ga-click="Header, show menu, icon:avatar">
      <img alt="@sajal2692" class="avatar" src="https://avatars3.githubusercontent.com/u/12205993?v=3&amp;s=40" height="20" width="20">
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      <div class="dropdown-menu dropdown-menu-sw">
        <div class="dropdown-header header-nav-current-user css-truncate">
          Signed in as <strong class="css-truncate-target">sajal2692</strong>
        </div>

        <div class="dropdown-divider"></div>

        <a class="dropdown-item" href="/sajal2692" data-ga-click="Header, go to profile, text:your profile">
          Your profile
        </a>
        <a class="dropdown-item" href="/sajal2692?tab=stars" data-ga-click="Header, go to starred repos, text:your stars">
          Your stars
        </a>
        <a class="dropdown-item" href="/explore" data-ga-click="Header, go to explore, text:explore">
          Explore
        </a>
        <a class="dropdown-item" href="https://help.github.com" data-ga-click="Header, go to help, text:help">
          Help
        </a>

        <div class="dropdown-divider"></div>

        <a class="dropdown-item" href="/settings/profile" data-ga-click="Header, go to settings, icon:settings">
          Settings
        </a>

        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/logout" class="logout-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="pCLh0/y7SRLymhy1/0f/R+WU7JaKC8uepc4W6O7czJATE7CzDeZGp9yK9TsLj0htOGUQ60FCSlqx4Eq3+YbfXw==" /></div>
          <button type="submit" class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
            Sign out
          </button>
</form>      </div>
    </div>
  </li>
</ul>


    <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/logout" class="sr-only right-0" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="rq2cH9QFaXN7wzBWP8j09sUymP1Lp8weXUqLnsj4FqAZnM1/JVhmxlXT2djLAEPcGMNkgIDuTdpJZNfB36IFbw==" /></div>
      <button type="submit" class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
        Sign out
      </button>
</form>  </div>
</div>


      

  </div>

  <div id="start-of-content" class="accessibility-aid"></div>

    <div id="js-flash-container">
</div>



  <div role="main">
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode">
    <div id="js-repo-pjax-container" data-pjax-container>
        



    <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav">
      <div class="container repohead-details-container">

        <ul class="pagehead-actions">
  <li>
        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="Uy5PDJxFLti+SCbm2w9YKQKrQDJYrY1Z6jk87V2GZRNVmhJcAeH5W1vHwgVUs/5bOXhv6U1+z85jt2gahL/aGg==" /></div>      <input class="form-control" id="repository_id" name="repository_id" type="hidden" value="7191565" />

        <div class="select-menu js-menu-container js-select-menu">
          <a href="/guillaumepotier/Parsley.js/subscription"
            class="btn btn-sm btn-with-count select-menu-button js-menu-target" role="button" tabindex="0" aria-haspopup="true"
            data-ga-click="Repository, click Watch settings, action:blob#show">
            <span class="js-select-button">
                <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                Watch
            </span>
          </a>
            <a class="social-count js-social-count"
              href="/guillaumepotier/Parsley.js/watchers"
              aria-label="262 users are watching this repository">
              262
            </a>

        <div class="select-menu-modal-holder">
          <div class="select-menu-modal subscription-menu-modal js-menu-content">
            <div class="select-menu-header js-navigation-enable" tabindex="-1">
              <svg aria-label="Close" class="octicon octicon-x js-menu-close" height="16" role="img" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
              <span class="select-menu-title">Notifications</span>
            </div>

              <div class="select-menu-list js-navigation-container" role="menu">

                <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
                  <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
                  <div class="select-menu-item-text">
                    <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                    <span class="select-menu-item-heading">Not watching</span>
                    <span class="description">Be notified when participating or @mentioned.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                      Watch
                    </span>
                  </div>
                </div>

                <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                  <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
                  <div class="select-menu-item-text">
                    <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                    <span class="select-menu-item-heading">Watching</span>
                    <span class="description">Be notified of all conversations.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                        Unwatch
                    </span>
                  </div>
                </div>

                <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                  <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
                  <div class="select-menu-item-text">
                    <input id="do_ignore" name="do" type="radio" value="ignore" />
                    <span class="select-menu-item-heading">Ignoring</span>
                    <span class="description">Never be notified.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg aria-hidden="true" class="octicon octicon-mute" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8 2.81v10.38c0 .67-.81 1-1.28.53L3 10H1c-.55 0-1-.45-1-1V7c0-.55.45-1 1-1h2l3.72-3.72C7.19 1.81 8 2.14 8 2.81zm7.53 3.22l-1.06-1.06-1.97 1.97-1.97-1.97-1.06 1.06L11.44 8 9.47 9.97l1.06 1.06 1.97-1.97 1.97 1.97 1.06-1.06L13.56 8l1.97-1.97z"/></svg>
                        Stop ignoring
                    </span>
                  </div>
                </div>

              </div>

            </div>
          </div>
        </div>
</form>
  </li>

  <li>
      <div class="js-toggler-container js-social-container starring-container ">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/guillaumepotier/Parsley.js/unstar" class="starred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="ythm2oL4CpeNgMNenQTzBu39aR5PnbDXCZYgNP2ves9AC8VwVzhXWXvJa5OrHBsCFQF6VxjoZbkdeZ5Pah2g3g==" /></div>
      <button
        type="submit"
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Unstar this repository" title="Unstar guillaumepotier/Parsley.js"
        data-ga-click="Repository, click unstar button, action:blob#show; text:Unstar">
        <svg aria-hidden="true" class="octicon octicon-star" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/guillaumepotier/Parsley.js/stargazers"
           aria-label="7867 users starred this repository">
          7,867
        </a>
</form>
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/guillaumepotier/Parsley.js/star" class="unstarred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="0QPl47cBEGyAQqKNu3Hp7H7oTOpcBXdKmcUBgPoimXRCIZX2oIf+Oe5GIQUufP+8LZEVi7SGJGo6rOnWw7O/sQ==" /></div>
      <button
        type="submit"
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Star this repository" title="Star guillaumepotier/Parsley.js"
        data-ga-click="Repository, click star button, action:blob#show; text:Star">
        <svg aria-hidden="true" class="octicon octicon-star" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
        Star
      </button>
        <a class="social-count js-social-count" href="/guillaumepotier/Parsley.js/stargazers"
           aria-label="7867 users starred this repository">
          7,867
        </a>
</form>  </div>

  </li>

  <li>
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/guillaumepotier/Parsley.js/fork" class="btn-with-count" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="YIOd1fhrRfztZBYm4sRbNxcMF6AaUJ2ZVIj/twTA+J0MRxigFW1+PaXBuHkYSsBXMaZUlQByq6xFTf/iVGvjsA==" /></div>
            <button
                type="submit"
                class="btn btn-sm btn-with-count"
                data-ga-click="Repository, show fork modal, action:blob#show; text:Fork"
                title="Fork your own copy of guillaumepotier/Parsley.js to your account"
                aria-label="Fork your own copy of guillaumepotier/Parsley.js to your account">
              <svg aria-hidden="true" class="octicon octicon-repo-forked" height="16" version="1.1" viewBox="0 0 10 16" width="10"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
              Fork
            </button>
</form>
    <a href="/guillaumepotier/Parsley.js/network" class="social-count"
       aria-label="1223 users forked this repository">
      1,223
    </a>
  </li>
</ul>

        <h1 class="public ">
  <svg aria-hidden="true" class="octicon octicon-repo" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
  <span class="author" itemprop="author"><a href="/guillaumepotier" class="url fn" rel="author">guillaumepotier</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a href="/guillaumepotier/Parsley.js" data-pjax="#js-repo-pjax-container">Parsley.js</a></strong>

</h1>

      </div>
      <div class="container">
        
<nav class="reponav js-repo-nav js-sidenav-container-pjax"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
     role="navigation"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/guillaumepotier/Parsley.js" class="js-selected-navigation-item selected reponav-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /guillaumepotier/Parsley.js" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-code" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a href="/guillaumepotier/Parsley.js/issues" class="js-selected-navigation-item reponav-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /guillaumepotier/Parsley.js/issues" itemprop="url">
        <svg aria-hidden="true" class="octicon octicon-issue-opened" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">36</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/guillaumepotier/Parsley.js/pulls" class="js-selected-navigation-item reponav-item" data-hotkey="g p" data-selected-links="repo_pulls /guillaumepotier/Parsley.js/pulls" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-git-pull-request" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">6</span>
      <meta itemprop="position" content="3">
</a>  </span>

    <a href="/guillaumepotier/Parsley.js/projects" class="js-selected-navigation-item reponav-item" data-selected-links="repo_projects new_repo_project repo_project /guillaumepotier/Parsley.js/projects">
      <svg aria-hidden="true" class="octicon octicon-project" height="16" version="1.1" viewBox="0 0 15 16" width="15"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"/></svg>
      Projects
      <span class="Counter" >0</span>
</a>
    <a href="/guillaumepotier/Parsley.js/wiki" class="js-selected-navigation-item reponav-item" data-hotkey="g w" data-selected-links="repo_wiki /guillaumepotier/Parsley.js/wiki">
      <svg aria-hidden="true" class="octicon octicon-book" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z"/></svg>
      Wiki
</a>

    <div class="reponav-dropdown js-menu-container">
      <button type="button" class="btn-link reponav-item reponav-dropdown js-menu-target " data-no-toggle aria-expanded="false" aria-haspopup="true">
        Insights
        <svg aria-hidden="true" class="octicon octicon-triangle-down v-align-middle text-gray" height="11" version="1.1" viewBox="0 0 12 16" width="8"><path fill-rule="evenodd" d="M0 5l6 6 6-6z"/></svg>
      </button>
      <div class="dropdown-menu-content js-menu-content">
        <div class="dropdown-menu dropdown-menu-sw">
          <a class="dropdown-item" href="/guillaumepotier/Parsley.js/pulse" data-skip-pjax>
            <svg aria-hidden="true" class="octicon octicon-pulse" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M11.5 8L8.8 5.4 6.6 8.5 5.5 1.6 2.38 8H0v2h3.6l.9-1.8.9 5.4L9 8.5l1.6 1.5H14V8z"/></svg>
            Pulse
          </a>
          <a class="dropdown-item" href="/guillaumepotier/Parsley.js/graphs" data-skip-pjax>
            <svg aria-hidden="true" class="octicon octicon-graph" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
            Graphs
          </a>
        </div>
      </div>
    </div>
</nav>

      </div>
    </div>

<div class="container new-discussion-timeline experiment-repo-nav">
  <div class="repository-content">

    
          

<a href="/guillaumepotier/Parsley.js/blob/c4b35dcb93d3e8808c84f41fb88fdafecbbf89de/dist/parsley.min.js.map" class="d-none js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:aae03f30f51a69b87ea873feea36d553 -->

<div class="file-navigation js-zeroclipboard-container">
  
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    
    type="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">master</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg aria-label="Close" class="octicon octicon-x js-menu-close" height="16" role="img" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tagâ¦" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/guillaumepotier/Parsley.js/blob/date_support/dist/parsley.min.js.map"
               data-name="date_support"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                date_support
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/guillaumepotier/Parsley.js/blob/gh-pages/dist/parsley.min.js.map"
               data-name="gh-pages"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                gh-pages
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/guillaumepotier/Parsley.js/blob/input-evt/dist/parsley.min.js.map"
               data-name="input-evt"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                input-evt
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/guillaumepotier/Parsley.js/blob/master/dist/parsley.min.js.map"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.7.2/dist/parsley.min.js.map"
              data-name="2.7.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.7.2">
                2.7.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.7.1/dist/parsley.min.js.map"
              data-name="2.7.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.7.1">
                2.7.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.7.0/dist/parsley.min.js.map"
              data-name="2.7.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.7.0">
                2.7.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.6.5/dist/parsley.min.js.map"
              data-name="2.6.5"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.6.5">
                2.6.5
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.6.4/dist/parsley.min.js.map"
              data-name="2.6.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.6.4">
                2.6.4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.6.3/dist/parsley.min.js.map"
              data-name="2.6.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.6.3">
                2.6.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.6.2/dist/parsley.min.js.map"
              data-name="2.6.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.6.2">
                2.6.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.6.1/dist/parsley.min.js.map"
              data-name="2.6.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.6.1">
                2.6.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.6.0/dist/parsley.min.js.map"
              data-name="2.6.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.6.0">
                2.6.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.5.1/dist/parsley.min.js.map"
              data-name="2.5.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.5.1">
                2.5.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.5.0/dist/parsley.min.js.map"
              data-name="2.5.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.5.0">
                2.5.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.4.4/dist/parsley.min.js.map"
              data-name="2.4.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.4.4">
                2.4.4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.4.3/dist/parsley.min.js.map"
              data-name="2.4.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.4.3">
                2.4.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.4.2/dist/parsley.min.js.map"
              data-name="2.4.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.4.2">
                2.4.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.15/dist/parsley.min.js.map"
              data-name="2.3.15"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.15">
                2.3.15
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.13/dist/parsley.min.js.map"
              data-name="2.3.13"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.13">
                2.3.13
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.11/dist/parsley.min.js.map"
              data-name="2.3.11"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.11">
                2.3.11
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.10/dist/parsley.min.js.map"
              data-name="2.3.10"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.10">
                2.3.10
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.9/dist/parsley.min.js.map"
              data-name="2.3.9"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.9">
                2.3.9
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.8/dist/parsley.min.js.map"
              data-name="2.3.8"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.8">
                2.3.8
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.7/dist/parsley.min.js.map"
              data-name="2.3.7"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.7">
                2.3.7
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.6/dist/parsley.min.js.map"
              data-name="2.3.6"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.6">
                2.3.6
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.5/dist/parsley.min.js.map"
              data-name="2.3.5"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.5">
                2.3.5
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.4/dist/parsley.min.js.map"
              data-name="2.3.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.4">
                2.3.4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.3/dist/parsley.min.js.map"
              data-name="2.3.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.3">
                2.3.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.2/dist/parsley.min.js.map"
              data-name="2.3.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.2">
                2.3.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.1/dist/parsley.min.js.map"
              data-name="2.3.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.1">
                2.3.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.3.0/dist/parsley.min.js.map"
              data-name="2.3.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.3.0">
                2.3.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.2.0/dist/parsley.min.js.map"
              data-name="2.2.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.2.0">
                2.2.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.2.0-rc4/dist/parsley.min.js.map"
              data-name="2.2.0-rc4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.2.0-rc4">
                2.2.0-rc4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.2.0-rc3/dist/parsley.min.js.map"
              data-name="2.2.0-rc3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.2.0-rc3">
                2.2.0-rc3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.2.0-rc2/dist/parsley.min.js.map"
              data-name="2.2.0-rc2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.2.0-rc2">
                2.2.0-rc2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.2.0-rc1/dist/parsley.min.js.map"
              data-name="2.2.0-rc1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.2.0-rc1">
                2.2.0-rc1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.3/dist/parsley.min.js.map"
              data-name="2.1.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.3">
                2.1.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.2/dist/parsley.min.js.map"
              data-name="2.1.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.2">
                2.1.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.1/dist/parsley.min.js.map"
              data-name="2.1.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.1">
                2.1.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0/dist/parsley.min.js.map"
              data-name="2.1.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0">
                2.1.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0-rc8/dist/parsley.min.js.map"
              data-name="2.1.0-rc8"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0-rc8">
                2.1.0-rc8
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0-rc7/dist/parsley.min.js.map"
              data-name="2.1.0-rc7"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0-rc7">
                2.1.0-rc7
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0-rc6/dist/parsley.min.js.map"
              data-name="2.1.0-rc6"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0-rc6">
                2.1.0-rc6
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0-rc5/dist/parsley.min.js.map"
              data-name="2.1.0-rc5"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0-rc5">
                2.1.0-rc5
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0-rc4/dist/parsley.min.js.map"
              data-name="2.1.0-rc4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0-rc4">
                2.1.0-rc4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0-rc2/dist/parsley.min.js.map"
              data-name="2.1.0-rc2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0-rc2">
                2.1.0-rc2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.1.0-rc1/dist/parsley.min.js.map"
              data-name="2.1.0-rc1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.1.0-rc1">
                2.1.0-rc1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.7/dist/parsley.min.js.map"
              data-name="2.0.7"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.7">
                2.0.7
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.6/dist/parsley.min.js.map"
              data-name="2.0.6"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.6">
                2.0.6
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.5/dist/parsley.min.js.map"
              data-name="2.0.5"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.5">
                2.0.5
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.4/dist/parsley.min.js.map"
              data-name="2.0.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.4">
                2.0.4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.3/dist/parsley.min.js.map"
              data-name="2.0.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.3">
                2.0.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.2/dist/parsley.min.js.map"
              data-name="2.0.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.2">
                2.0.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.1/dist/parsley.min.js.map"
              data-name="2.0.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.1">
                2.0.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.0/dist/parsley.min.js.map"
              data-name="2.0.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.0">
                2.0.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.0-rc5/dist/parsley.min.js.map"
              data-name="2.0.0-rc5"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.0-rc5">
                2.0.0-rc5
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.0-rc4/dist/parsley.min.js.map"
              data-name="2.0.0-rc4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.0-rc4">
                2.0.0-rc4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.0-rc3/dist/parsley.min.js.map"
              data-name="2.0.0-rc3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.0-rc3">
                2.0.0-rc3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.0-rc2/dist/parsley.min.js.map"
              data-name="2.0.0-rc2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.0-rc2">
                2.0.0-rc2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/2.0.0-rc1/dist/parsley.min.js.map"
              data-name="2.0.0-rc1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="2.0.0-rc1">
                2.0.0-rc1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.2.4/dist/parsley.min.js.map"
              data-name="1.2.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.2.4">
                1.2.4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.2.3/dist/parsley.min.js.map"
              data-name="1.2.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.2.3">
                1.2.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.2.2/dist/parsley.min.js.map"
              data-name="1.2.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.2.2">
                1.2.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.2.1/dist/parsley.min.js.map"
              data-name="1.2.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.2.1">
                1.2.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.2.0/dist/parsley.min.js.map"
              data-name="1.2.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.2.0">
                1.2.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.18/dist/parsley.min.js.map"
              data-name="1.1.18"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.18">
                1.1.18
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.17/dist/parsley.min.js.map"
              data-name="1.1.17"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.17">
                1.1.17
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.16/dist/parsley.min.js.map"
              data-name="1.1.16"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.16">
                1.1.16
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.15/dist/parsley.min.js.map"
              data-name="1.1.15"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.15">
                1.1.15
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.14/dist/parsley.min.js.map"
              data-name="1.1.14"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.14">
                1.1.14
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.13/dist/parsley.min.js.map"
              data-name="1.1.13"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.13">
                1.1.13
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.12/dist/parsley.min.js.map"
              data-name="1.1.12"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.12">
                1.1.12
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.11/dist/parsley.min.js.map"
              data-name="1.1.11"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.11">
                1.1.11
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.10/dist/parsley.min.js.map"
              data-name="1.1.10"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.10">
                1.1.10
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.9/dist/parsley.min.js.map"
              data-name="1.1.9"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.9">
                1.1.9
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.8/dist/parsley.min.js.map"
              data-name="1.1.8"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.8">
                1.1.8
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.6/dist/parsley.min.js.map"
              data-name="1.1.6"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.6">
                1.1.6
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.5/dist/parsley.min.js.map"
              data-name="1.1.5"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.5">
                1.1.5
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.4/dist/parsley.min.js.map"
              data-name="1.1.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.4">
                1.1.4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.3/dist/parsley.min.js.map"
              data-name="1.1.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.3">
                1.1.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.2/dist/parsley.min.js.map"
              data-name="1.1.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.2">
                1.1.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.1.0/dist/parsley.min.js.map"
              data-name="1.1.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.1.0">
                1.1.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/1.0.0/dist/parsley.min.js.map"
              data-name="1.0.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="1.0.0">
                1.0.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/0.2.0/dist/parsley.min.js.map"
              data-name="0.2.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="0.2.0">
                0.2.0
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/0.1.4/dist/parsley.min.js.map"
              data-name="0.1.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="0.1.4">
                0.1.4
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/0.1.3/dist/parsley.min.js.map"
              data-name="0.1.3"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="0.1.3">
                0.1.3
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/0.1.2/dist/parsley.min.js.map"
              data-name="0.1.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="0.1.2">
                0.1.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/0.1.1/dist/parsley.min.js.map"
              data-name="0.1.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="0.1.1">
                0.1.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/guillaumepotier/Parsley.js/tree/0.1.0/dist/parsley.min.js.map"
              data-name="0.1.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="0.1.0">
                0.1.0
              </span>
            </a>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

  <div class="BtnGroup float-right">
    <a href="/guillaumepotier/Parsley.js/find/master"
          class="js-pjax-capture-input btn btn-sm BtnGroup-item"
          data-pjax
          data-hotkey="t">
      Find file
    </a>
    <button aria-label="Copy file path to clipboard" class="js-zeroclipboard btn btn-sm BtnGroup-item tooltipped tooltipped-s" data-copied-hint="Copied!" type="button">Copy path</button>
  </div>
  <div class="breadcrumb js-zeroclipboard-target">
    <span class="repo-root js-repo-root"><span class="js-path-segment"><a href="/guillaumepotier/Parsley.js"><span>Parsley.js</span></a></span></span><span class="separator">/</span><span class="js-path-segment"><a href="/guillaumepotier/Parsley.js/tree/master/dist"><span>dist</span></a></span><span class="separator">/</span><strong class="final-path">parsley.min.js.map</strong>
  </div>
</div>



  <div class="commit-tease">
      <span class="float-right">
        <a class="commit-tease-sha" href="/guillaumepotier/Parsley.js/commit/e4073b01c5bfa24f443e072767053e289c8a33ef" data-pjax>
          e4073b0
        </a>
        <relative-time datetime="2017-05-09T15:22:06Z">May 9, 2017</relative-time>
      </span>
      <div>
        <img alt="@marcandre" class="avatar" height="20" src="https://avatars3.githubusercontent.com/u/33770?v=3&amp;s=40" width="20" />
        <a href="/marcandre" class="user-mention" rel="contributor">marcandre</a>
          <a href="/guillaumepotier/Parsley.js/commit/e4073b01c5bfa24f443e072767053e289c8a33ef" class="message" data-pjax="true" title="Release 2.7.2">Release 2.7.2</a>
      </div>

    <div class="commit-tease-contributors">
      <button type="button" class="btn-link muted-link contributors-toggle" data-facebox="#blob_contributors_box">
        <strong>1</strong>
         contributor
      </button>
      
    </div>

    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header" data-facebox-id="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list" data-facebox-id="facebox-description">
          <li class="facebox-user-list-item">
            <img alt="@marcandre" height="24" src="https://avatars1.githubusercontent.com/u/33770?v=3&amp;s=48" width="24" />
            <a href="/marcandre">marcandre</a>
          </li>
      </ul>
    </div>
  </div>

<div class="file">
  <div class="file-header">
  <div class="file-actions">

    <div class="BtnGroup">
      <a href="/guillaumepotier/Parsley.js/raw/master/dist/parsley.min.js.map" class="btn btn-sm BtnGroup-item" id="raw-url">Raw</a>
        <a href="/guillaumepotier/Parsley.js/blame/master/dist/parsley.min.js.map" class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b">Blame</a>
      <a href="/guillaumepotier/Parsley.js/commits/master/dist/parsley.min.js.map" class="btn btn-sm BtnGroup-item" rel="nofollow">History</a>
    </div>

        <a class="btn-octicon tooltipped tooltipped-nw"
           href="github-mac://openRepo/https://github.com/guillaumepotier/Parsley.js?branch=master&amp;filepath=dist%2Fparsley.min.js.map"
           aria-label="Open this file in GitHub Desktop"
           data-ga-click="Repository, open with desktop, type:mac">
            <svg aria-hidden="true" class="octicon octicon-device-desktop" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M15 2H1c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5.34c-.25.61-.86 1.39-2.34 2h8c-1.48-.61-2.09-1.39-2.34-2H15c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm0 9H1V3h14v8z"/></svg>
        </a>

        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/guillaumepotier/Parsley.js/edit/master/dist/parsley.min.js.map" class="inline-form js-update-url-with-hash" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="VyHJvdqTY94ZLO8YiICqhlbiLeU2AvYnxRxFDpq1gbqhV4KTxzhPy9pTyjsysgdmjBDXxQTuUuLkSOi2UVoqeQ==" /></div>
          <button class="btn-octicon tooltipped tooltipped-nw" type="submit"
            aria-label="Fork this project and edit the file" data-hotkey="e" data-disable-with>
            <svg aria-hidden="true" class="octicon octicon-pencil" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 0 1 1.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"/></svg>
          </button>
</form>        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/guillaumepotier/Parsley.js/delete/master/dist/parsley.min.js.map" class="inline-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="npNBrREsSjR8GlgtLcPvvPgQ46CprVS/wrovlgJAs6YZyanbaYBixRKe4qord1Gb9p36NZ94ohjkMEZwyfelKQ==" /></div>
          <button class="btn-octicon btn-octicon-danger tooltipped tooltipped-nw" type="submit"
            aria-label="Fork this project and delete the file" data-disable-with>
            <svg aria-hidden="true" class="octicon octicon-trashcan" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"/></svg>
          </button>
</form>  </div>

  <div class="file-info">
      1 lines (1 sloc)
      <span class="file-info-divider"></span>
    309 KB
  </div>
</div>

  

  <div itemprop="text" class="blob-wrapper data type-text">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line">{&quot;version&quot;:3,&quot;sources&quot;:[&quot;parsley.min.js&quot;,&quot;parsley.js&quot;,&quot;src/parsley/pubsub.js&quot;,&quot;src/vendor/inputevent.js&quot;,&quot;src/parsley/utils.js&quot;,&quot;src/parsley/defaults.js&quot;,&quot;src/parsley/base.js&quot;,&quot;src/parsley/validator.js&quot;,&quot;src/parsley/validator_registry.js&quot;,&quot;src/parsley/ui.js&quot;,&quot;src/parsley/form.js&quot;,&quot;src/parsley/constraint.js&quot;,&quot;src/parsley/field.js&quot;,&quot;src/parsley/multiple.js&quot;,&quot;src/parsley/factory.js&quot;,&quot;src/parsley/main.js&quot;,&quot;src/parsley/remote.js&quot;,&quot;src/i18n/en.js&quot;,&quot;src/parsley.js&quot;],&quot;names&quot;:[&quot;_toConsumableArray&quot;,&quot;arr&quot;,&quot;Array&quot;,&quot;isArray&quot;,&quot;i&quot;,&quot;arr2&quot;,&quot;length&quot;,&quot;from&quot;,&quot;_slice&quot;,&quot;prototype&quot;,&quot;slice&quot;,&quot;_slicedToArray&quot;,&quot;sliceIterator&quot;,&quot;_arr&quot;,&quot;_n&quot;,&quot;_d&quot;,&quot;_e&quot;,&quot;undefined&quot;,&quot;_s&quot;,&quot;_i&quot;,&quot;Symbol&quot;,&quot;iterator&quot;,&quot;next&quot;,&quot;done&quot;,&quot;push&quot;,&quot;value&quot;,&quot;err&quot;,&quot;Object&quot;,&quot;TypeError&quot;,&quot;_extends&quot;,&quot;assign&quot;,&quot;target&quot;,&quot;arguments&quot;,&quot;source&quot;,&quot;key&quot;,&quot;hasOwnProperty&quot;,&quot;call&quot;,&quot;global&quot;,&quot;factory&quot;,&quot;exports&quot;,&quot;module&quot;,&quot;require&quot;,&quot;define&quot;,&quot;amd&quot;,&quot;parsley&quot;,&quot;jQuery&quot;,&quot;this&quot;,&quot;$&quot;,&quot;adapt&quot;,&quot;fn&quot;,&quot;context&quot;,&quot;parsleyAdaptedCallback&quot;,&quot;args&quot;,&quot;unshift&quot;,&quot;apply&quot;,&quot;o&quot;,&quot;eventName&quot;,&quot;name&quot;,&quot;lastIndexOf&quot;,&quot;eventPrefix&quot;,&quot;substr&quot;,&quot;InputEvent&quot;,&quot;_this14&quot;,&quot;globals&quot;,&quot;window&quot;,&quot;isNativeEvent&quot;,&quot;evt&quot;,&quot;originalEvent&quot;,&quot;isTrusted&quot;,&quot;fakeInputEvent&quot;,&quot;trigger&quot;,&quot;misbehaves&quot;,&quot;behavesOk&quot;,&quot;document&quot;,&quot;on&quot;,&quot;data&quot;,&quot;selector&quot;,&quot;off&quot;,&quot;install&quot;,&quot;inputEventPatched&quot;,&quot;uninstall&quot;,&quot;globalID&quot;,&quot;pastWarnings&quot;,&quot;Utils&quot;,&quot;attr&quot;,&quot;element&quot;,&quot;namespace&quot;,&quot;obj&quot;,&quot;attribute&quot;,&quot;attributes&quot;,&quot;regex&quot;,&quot;RegExp&quot;,&quot;specified&quot;,&quot;test&quot;,&quot;camelize&quot;,&quot;deserializeValue&quot;,&quot;checkAttr&quot;,&quot;_checkAttr&quot;,&quot;hasAttribute&quot;,&quot;setAttr&quot;,&quot;setAttribute&quot;,&quot;dasherize&quot;,&quot;String&quot;,&quot;generateID&quot;,&quot;num&quot;,&quot;isNaN&quot;,&quot;Number&quot;,&quot;parseJSON&quot;,&quot;e&quot;,&quot;str&quot;,&quot;replace&quot;,&quot;match&quot;,&quot;chr&quot;,&quot;toUpperCase&quot;,&quot;toLowerCase&quot;,&quot;warn&quot;,&quot;_window$console&quot;,&quot;console&quot;,&quot;warnOnce&quot;,&quot;msg&quot;,&quot;_resetWarnings&quot;,&quot;trimString&quot;,&quot;string&quot;,&quot;parse&quot;,&quot;date&quot;,&quot;parsed&quot;,&quot;_parsed$map&quot;,&quot;map&quot;,&quot;x&quot;,&quot;parseInt&quot;,&quot;_parsed$map2&quot;,&quot;year&quot;,&quot;month&quot;,&quot;day&quot;,&quot;Date&quot;,&quot;getFullYear&quot;,&quot;getMonth&quot;,&quot;getDate&quot;,&quot;_string&quot;,&quot;integer&quot;,&quot;number&quot;,&quot;parseFloat&quot;,&quot;boolean&quot;,&quot;object&quot;,&quot;regexp&quot;,&quot;_regexp&quot;,&quot;flags&quot;,&quot;parseRequirement&quot;,&quot;requirementType&quot;,&quot;converter&quot;,&quot;converted&quot;,&quot;namespaceEvents&quot;,&quot;events&quot;,&quot;split&quot;,&quot;join&quot;,&quot;difference&quot;,&quot;array&quot;,&quot;remove&quot;,&quot;result&quot;,&quot;each&quot;,&quot;_&quot;,&quot;elem&quot;,&quot;indexOf&quot;,&quot;all&quot;,&quot;promises&quot;,&quot;when&quot;,&quot;concat&quot;,&quot;objectCreate&quot;,&quot;create&quot;,&quot;Error&quot;,&quot;_SubmitSelector&quot;,&quot;Defaults&quot;,&quot;inputs&quot;,&quot;excluded&quot;,&quot;priorityEnabled&quot;,&quot;multiple&quot;,&quot;group&quot;,&quot;uiEnabled&quot;,&quot;validationThreshold&quot;,&quot;focus&quot;,&quot;triggerAfterFailure&quot;,&quot;errorClass&quot;,&quot;successClass&quot;,&quot;classHandler&quot;,&quot;Field&quot;,&quot;errorsContainer&quot;,&quot;errorsWrapper&quot;,&quot;errorTemplate&quot;,&quot;Base&quot;,&quot;__id__&quot;,&quot;asyncSupport&quot;,&quot;_pipeAccordingToValidationResult&quot;,&quot;_this&quot;,&quot;pipe&quot;,&quot;r&quot;,&quot;Deferred&quot;,&quot;validationResult&quot;,&quot;reject&quot;,&quot;resolve&quot;,&quot;promise&quot;,&quot;actualizeOptions&quot;,&quot;options&quot;,&quot;domOptions&quot;,&quot;parent&quot;,&quot;_resetOptions&quot;,&quot;initOptions&quot;,&quot;_listeners&quot;,&quot;queue&quot;,&quot;subscribe&quot;,&quot;listenTo&quot;,&quot;splice&quot;,&quot;unsubscribe&quot;,&quot;unsubscribeTo&quot;,&quot;extraArg&quot;,&quot;asyncIsValid&quot;,&quot;force&quot;,&quot;whenValid&quot;,&quot;_findRelated&quot;,&quot;querySelectorAll&quot;,&quot;$element&quot;,&quot;convertArrayRequirement&quot;,&quot;m&quot;,&quot;values&quot;,&quot;convertExtraOptionRequirement&quot;,&quot;requirementSpec&quot;,&quot;extraOptionReader&quot;,&quot;main&quot;,&quot;extra&quot;,&quot;Validator&quot;,&quot;spec&quot;,&quot;extend&quot;,&quot;validate&quot;,&quot;requirementFirstArg&quot;,&quot;validateMultiple&quot;,&quot;instance&quot;,&quot;validateDate&quot;,&quot;_isDateInput&quot;,&quot;validateNumber&quot;,&quot;validateString&quot;,&quot;parseRequirements&quot;,&quot;requirements&quot;,&quot;type&quot;,&quot;isPlainObject&quot;,&quot;priority&quot;,&quot;ValidatorRegistry&quot;,&quot;validators&quot;,&quot;catalog&quot;,&quot;__class__&quot;,&quot;locale&quot;,&quot;init&quot;,&quot;typeTesters&quot;,&quot;email&quot;,&quot;digits&quot;,&quot;alphanum&quot;,&quot;url&quot;,&quot;range&quot;,&quot;decimalPlaces&quot;,&quot;Math&quot;,&quot;max&quot;,&quot;ValidatorRegistry__parseArguments&quot;,&quot;ValidatorRegistry__operatorToValidator&quot;,&quot;operator&quot;,&quot;_len&quot;,&quot;requirementsAndInput&quot;,&quot;_key&quot;,&quot;pop&quot;,&quot;ValidatorRegistry__comparisonOperator&quot;,&quot;addValidator&quot;,&quot;Parsley&quot;,&quot;setLocale&quot;,&quot;addCatalog&quot;,&quot;messages&quot;,&quot;set&quot;,&quot;addMessage&quot;,&quot;message&quot;,&quot;addMessages&quot;,&quot;nameMessageObject&quot;,&quot;arg1&quot;,&quot;arg2&quot;,&quot;_setValidator&quot;,&quot;updateValidator&quot;,&quot;removeValidator&quot;,&quot;validator&quot;,&quot;getErrorMessage&quot;,&quot;constraint&quot;,&quot;typeMessages&quot;,&quot;formatMessage&quot;,&quot;defaultMessage&quot;,&quot;en&quot;,&quot;parameters&quot;,&quot;notblank&quot;,&quot;required&quot;,&quot;_ref&quot;,&quot;_ref$step&quot;,&quot;step&quot;,&quot;_ref$base&quot;,&quot;base&quot;,&quot;tester&quot;,&quot;nb&quot;,&quot;decimals&quot;,&quot;toInt&quot;,&quot;f&quot;,&quot;round&quot;,&quot;pow&quot;,&quot;&quot;,&quot;pattern&quot;,&quot;minlength&quot;,&quot;requirement&quot;,&quot;maxlength&quot;,&quot;min&quot;,&quot;mincheck&quot;,&quot;maxcheck&quot;,&quot;check&quot;,&quot;equalto&quot;,&quot;refOrValue&quot;,&quot;$reference&quot;,&quot;val&quot;,&quot;UI&quot;,&quot;diffResults&quot;,&quot;newResult&quot;,&quot;oldResult&quot;,&quot;deep&quot;,&quot;added&quot;,&quot;kept&quot;,&quot;found&quot;,&quot;j&quot;,&quot;assert&quot;,&quot;removed&quot;,&quot;Form&quot;,&quot;_actualizeTriggers&quot;,&quot;_this2&quot;,&quot;onSubmitValidate&quot;,&quot;onSubmitButton&quot;,&quot;_focusedField&quot;,&quot;fields&quot;,&quot;field&quot;,&quot;noFocus&quot;,&quot;_destroyUI&quot;,&quot;_reflowUI&quot;,&quot;_buildUI&quot;,&quot;_ui&quot;,&quot;diff&quot;,&quot;lastValidationResult&quot;,&quot;_manageStatusClass&quot;,&quot;_manageErrorsMessages&quot;,&quot;_failedOnce&quot;,&quot;getErrorsMessages&quot;,&quot;errorMessage&quot;,&quot;_getErrorMessage&quot;,&quot;addError&quot;,&quot;_ref2&quot;,&quot;_ref2$updateClass&quot;,&quot;updateClass&quot;,&quot;_addError&quot;,&quot;_errorClass&quot;,&quot;updateError&quot;,&quot;_ref3&quot;,&quot;_ref3$updateClass&quot;,&quot;_updateError&quot;,&quot;removeError&quot;,&quot;_ref4&quot;,&quot;_ref4$updateClass&quot;,&quot;_removeError&quot;,&quot;hasConstraints&quot;,&quot;needsValidation&quot;,&quot;_successClass&quot;,&quot;_resetClass&quot;,&quot;errorsMessagesDisabled&quot;,&quot;_insertErrorWrapper&quot;,&quot;$errorsWrapper&quot;,&quot;find&quot;,&quot;append&quot;,&quot;addClass&quot;,&quot;html&quot;,&quot;removeClass&quot;,&quot;_ref5&quot;,&quot;_ref6&quot;,&quot;customConstraintErrorMessage&quot;,&quot;$errorClassHandler&quot;,&quot;_manageClassHandler&quot;,&quot;errorsWrapperId&quot;,&quot;validationInformationVisible&quot;,&quot;ParsleyUtils&quot;,&quot;$handler&quot;,&quot;_inputHolder&quot;,&quot;nodeName&quot;,&quot;$errorsContainer&quot;,&quot;after&quot;,&quot;_this3&quot;,&quot;$toBind&quot;,&quot;_validateIfNeeded&quot;,&quot;event&quot;,&quot;_this4&quot;,&quot;getValue&quot;,&quot;debounce&quot;,&quot;clearTimeout&quot;,&quot;_debounced&quot;,&quot;setTimeout&quot;,&quot;_resetUI&quot;,&quot;children&quot;,&quot;Form__statusMapping&quot;,&quot;pending&quot;,&quot;resolved&quot;,&quot;rejected&quot;,&quot;_this5&quot;,&quot;submitSource&quot;,&quot;_submitSource&quot;,&quot;prop&quot;,&quot;getAttribute&quot;,&quot;_remoteCache&quot;,&quot;whenValidate&quot;,&quot;state&quot;,&quot;_trigger&quot;,&quot;stopImmediatePropagation&quot;,&quot;preventDefault&quot;,&quot;_submit&quot;,&quot;currentTarget&quot;,&quot;$synthetic&quot;,&quot;appendTo&quot;,&quot;Event&quot;,&quot;_arguments&quot;,&quot;_Utils$all$done$fail$always&quot;,&quot;_this6&quot;,&quot;_ref7&quot;,&quot;submitEvent&quot;,&quot;_refreshFields&quot;,&quot;_withoutReactualizingFormOptions&quot;,&quot;fail&quot;,&quot;always&quot;,&quot;isValid&quot;,&quot;_arguments2&quot;,&quot;_this7&quot;,&quot;_ref8&quot;,&quot;reset&quot;,&quot;destroy&quot;,&quot;removeData&quot;,&quot;_bindFields&quot;,&quot;_this8&quot;,&quot;oldFields&quot;,&quot;fieldsMappedById&quot;,&quot;not&quot;,&quot;fieldInstance&quot;,&quot;Factory&quot;,&quot;uniqueId&quot;,&quot;oldActualizeOptions&quot;,&quot;Constraint&quot;,&quot;parsleyField&quot;,&quot;isDomConstraint&quot;,&quot;validatorSpec&quot;,&quot;_validatorRegistry&quot;,&quot;_parseRequirements&quot;,&quot;capitalize&quot;,&quot;cap&quot;,&quot;_validator&quot;,&quot;requirementList&quot;,&quot;_this9&quot;,&quot;parsleyFormInstance&quot;,&quot;constraints&quot;,&quot;constraintsByName&quot;,&quot;_bindConstraints&quot;,&quot;parsley_field__statusMapping&quot;,&quot;_whenValid$always$done$fail$always&quot;,&quot;_this10&quot;,&quot;_ref9&quot;,&quot;refreshConstraints&quot;,&quot;_isInGroup&quot;,&quot;_refreshed&quot;,&quot;_isRequired&quot;,&quot;validateIfEmpty&quot;,&quot;inArray&quot;,&quot;_arguments3&quot;,&quot;_this11&quot;,&quot;_ref10&quot;,&quot;_ref10$force&quot;,&quot;groupedConstraints&quot;,&quot;_getGroupedConstraints&quot;,&quot;_validateConstraint&quot;,&quot;_this12&quot;,&quot;_handleWhitespace&quot;,&quot;addConstraint&quot;,&quot;removeConstraint&quot;,&quot;updateConstraint&quot;,&quot;_bindHtml5Constraints&quot;,&quot;trimValue&quot;,&quot;whitespace&quot;,&quot;c&quot;,&quot;index&quot;,&quot;p&quot;,&quot;sort&quot;,&quot;a&quot;,&quot;b&quot;,&quot;parsley_field&quot;,&quot;Multiple&quot;,&quot;addElement&quot;,&quot;$elements&quot;,&quot;fieldConstraints&quot;,&quot;has&quot;,&quot;filter&quot;,&quot;_init&quot;,&quot;savedparsleyFormInstance&quot;,&quot;__version__&quot;,&quot;is&quot;,&quot;bind&quot;,&quot;isMultiple&quot;,&quot;handleMultiple&quot;,&quot;parsleyMultipleInstance&quot;,&quot;_this13&quot;,&quot;input&quot;,&quot;$previouslyRelated&quot;,&quot;get&quot;,&quot;doNotStore&quot;,&quot;parsleyInstance&quot;,&quot;ParsleyExtend&quot;,&quot;vernums&quot;,&quot;jquery&quot;,&quot;forEach&quot;,&quot;version&quot;,&quot;psly&quot;,&quot;instances&quot;,&quot;ParsleyConfig&quot;,&quot;registry&quot;,&quot;i18n&quot;,&quot;ParsleyValidator&quot;,&quot;method&quot;,&quot;_window$Parsley&quot;,&quot;ParsleyUI&quot;,&quot;doNotUpdateClass&quot;,&quot;autoBind&quot;,&quot;deprecated&quot;,&quot;listen&quot;,&quot;callback&quot;,&quot;unsubscribeAll&quot;,&quot;emit&quot;,&quot;_instance&quot;,&quot;instanceGiven&quot;,&quot;asyncValidators&quot;,&quot;default&quot;,&quot;xhr&quot;,&quot;status&quot;,&quot;reverse&quot;,&quot;addAsyncValidator&quot;,&quot;ajaxOptions&quot;,&quot;csr&quot;,&quot;encodeURIComponent&quot;,&quot;remoteOptions&quot;,&quot;param&quot;,&quot;ajax&quot;,&quot;handleXhr&quot;,&quot;then&quot;,&quot;inputevent&quot;],&quot;mappings&quot;:&quot;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&quot;,&quot;file&quot;:&quot;parsley.min.js&quot;,&quot;sourcesContent&quot;:[&quot;/*!\n* Parsley.js\n* Version 2.7.2 - built Tue, May 9th 2017, 11:21 am\n* http://parsleyjs.org\n* Guillaume Potier - &lt;guillaume@wisembly.com&gt;\n* Marc-Andre Lafortune - &lt;petroselinum@marc-andre.ca&gt;\n* MIT Licensed\n*/\n\n// The source code below is generated by babel as\n// Parsley is written in ECMAScript 6\n//\nvar _slice = Array.prototype.slice;\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i &amp;&amp; _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n &amp;&amp; _i[&#39;return&#39;]) _i[&#39;return&#39;](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(&#39;Invalid attempt to destructure non-iterable instance&#39;); } }; })();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i &lt; arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n(function (global, factory) {\n  typeof exports === &#39;object&#39; &amp;&amp; typeof module !== &#39;undefined&#39; ? module.exports = factory(require(&#39;jquery&#39;)) : typeof define === &#39;function&#39; &amp;&amp; define.amd ? define([&#39;jquery&#39;], factory) : global.parsley = factory(global.jQuery);\n})(this, function ($) {\n  &#39;use strict&#39;;\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var Utils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function attr(element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp(&#39;^&#39; + namespace, &#39;i&#39;);\n\n      if (&#39;undefined&#39; === typeof obj) obj = {};else {\n        // Clear all own properties. This won&#39;t affect prototype&#39;s values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i)) delete obj[i];\n        }\n      }\n\n      if (!element) return obj;\n\n      attributes = element.attributes;\n      for (i = attributes.length; i--;) {\n        attribute = attributes[i];\n\n        if (attribute &amp;&amp; attribute.specified &amp;&amp; regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function checkAttr(element, namespace, _checkAttr) {\n      return element.hasAttribute(namespace + _checkAttr);\n    },\n\n    setAttr: function setAttr(element, namespace, attr, value) {\n      element.setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function generateID() {\n      return &#39;&#39; + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function deserializeValue(value) {\n      var num;\n\n      try {\n        return value ? value == \&quot;true\&quot; || (value == \&quot;false\&quot; ? false : value == \&quot;null\&quot; ? null : !isNaN(num = Number(value)) ? num : /^[\\[\\{]/.test(value) ? $.parseJSON(value) : value) : value;\n      } catch (e) {\n        return value;\n      }\n    },\n\n    // Zepto camelize function\n    camelize: function camelize(str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : &#39;&#39;;\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function dasherize(str) {\n      return str.replace(/::/g, &#39;/&#39;).replace(/([A-Z]+)([A-Z][a-z])/g, &#39;$1_$2&#39;).replace(/([a-z\\d])([A-Z])/g, &#39;$1_$2&#39;).replace(/_/g, &#39;-&#39;).toLowerCase();\n    },\n\n    warn: function warn() {\n      var _window$console;\n\n      if (window.console &amp;&amp; &#39;function&#39; === typeof window.console.warn) (_window$console = window.console).warn.apply(_window$console, arguments);\n    },\n\n    warnOnce: function warnOnce(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn.apply(this, arguments);\n      }\n    },\n\n    _resetWarnings: function _resetWarnings() {\n      pastWarnings = {};\n    },\n\n    trimString: function trimString(string) {\n      return string.replace(/^\\s+|\\s+$/g, &#39;&#39;);\n    },\n\n    parse: {\n      date: function date(string) {\n        var parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n        if (!parsed) return null;\n\n        var _parsed$map = parsed.map(function (x) {\n          return parseInt(x, 10);\n        });\n\n        var _parsed$map2 = _slicedToArray(_parsed$map, 4);\n\n        var _ = _parsed$map2[0];\n        var year = _parsed$map2[1];\n        var month = _parsed$map2[2];\n        var day = _parsed$map2[3];\n\n        var date = new Date(year, month - 1, day);\n        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) return null;\n        return date;\n      },\n      string: function string(_string) {\n        return _string;\n      },\n      integer: function integer(string) {\n        if (isNaN(string)) return null;\n        return parseInt(string, 10);\n      },\n      number: function number(string) {\n        if (isNaN(string)) throw null;\n        return parseFloat(string);\n      },\n      &#39;boolean&#39;: function _boolean(string) {\n        return !/^\\s*false\\s*$/i.test(string);\n      },\n      object: function object(string) {\n        return Utils.deserializeValue(string);\n      },\n      regexp: function regexp(_regexp) {\n        var flags = &#39;&#39;;\n\n        // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n        if (/^\\/.*\\/(?:[gimy]*)$/.test(_regexp)) {\n          // Replace the regexp literal string with the first match group: ([gimy]*)\n          // If no flag is present, this will be a blank string\n          flags = _regexp.replace(/.*\\/([gimy]*)$/, &#39;$1&#39;);\n          // Again, replace the regexp literal string with the first match group:\n          // everything excluding the opening and closing slashes and the flags\n          _regexp = _regexp.replace(new RegExp(&#39;^/(.*?)/&#39; + flags + &#39;$&#39;), &#39;$1&#39;);\n        } else {\n          // Anchor regexp:\n          _regexp = &#39;^&#39; + _regexp + &#39;$&#39;;\n        }\n        return new RegExp(_regexp, flags);\n      }\n    },\n\n    parseRequirement: function parseRequirement(requirementType, string) {\n      var converter = this.parse[requirementType || &#39;string&#39;];\n      if (!converter) throw &#39;Unknown requirement specification: \&quot;&#39; + requirementType + &#39;\&quot;&#39;;\n      var converted = converter(string);\n      if (converted === null) throw &#39;Requirement is not a &#39; + requirementType + &#39;: \&quot;&#39; + string + &#39;\&quot;&#39;;\n      return converted;\n    },\n\n    namespaceEvents: function namespaceEvents(events, namespace) {\n      events = this.trimString(events || &#39;&#39;).split(/\\s+/);\n      if (!events[0]) return &#39;&#39;;\n      return $.map(events, function (evt) {\n        return evt + &#39;.&#39; + namespace;\n      }).join(&#39; &#39;);\n    },\n\n    difference: function difference(array, remove) {\n      // This is O(N^2), should be optimized\n      var result = [];\n      $.each(array, function (_, elem) {\n        if (remove.indexOf(elem) == -1) result.push(elem);\n      });\n      return result;\n    },\n\n    // Alter-ego to native Promise.all, but for jQuery\n    all: function all(promises) {\n      // jQuery treats $.when() and $.when(singlePromise) differently; let&#39;s avoid that and add spurious elements\n      return $.when.apply($, _toConsumableArray(promises).concat([42, 42]));\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function Object() {};\n      return function (prototype) {\n        if (arguments.length &gt; 1) {\n          throw Error(&#39;Second argument not supported&#39;);\n        }\n        if (typeof prototype != &#39;object&#39;) {\n          throw TypeError(&#39;Argument must be an object&#39;);\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })(),\n\n    _SubmitSelector: &#39;input[type=\&quot;submit\&quot;], button:submit&#39;\n  };\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\&quot;input, textarea\&quot;`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\&quot;false\&quot;`\n\n  var Defaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: &#39;data-parsley-&#39;,\n\n    // Supported inputs by default\n    inputs: &#39;input, textarea, select&#39;,\n\n    // Excluded inputs by default\n    excluded: &#39;input[type=button], input[type=submit], input[type=reset], input[type=hidden]&#39;,\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. &#39;first&#39;|&#39;last&#39;|&#39;none&#39;\n    focus: &#39;first&#39;,\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: &#39;input&#39;,\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: &#39;parsley-error&#39;,\n\n    // Same for success validation\n    successClass: &#39;parsley-success&#39;,\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `&#39;#div&#39;`\n    classHandler: function classHandler(Field) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `&#39;#div&#39;`\n    errorsContainer: function errorsContainer(Field) {},\n\n    // ul elem that would receive errors&#39; list\n    errorsWrapper: &#39;&lt;ul class=\&quot;parsley-errors-list\&quot;&gt;&lt;/ul&gt;&#39;,\n\n    // li elem that would receive error message\n    errorTemplate: &#39;&lt;li&gt;&lt;/li&gt;&#39;\n  };\n\n  var Base = function Base() {\n    this.__id__ = Utils.generateID();\n  };\n\n  Base.prototype = {\n    asyncSupport: true, // Deprecated\n\n    _pipeAccordingToValidationResult: function _pipeAccordingToValidationResult() {\n      var _this = this;\n\n      var pipe = function pipe() {\n        var r = $.Deferred();\n        if (true !== _this.validationResult) r.reject();\n        return r.resolve().promise();\n      };\n      return [pipe, pipe];\n    },\n\n    actualizeOptions: function actualizeOptions() {\n      Utils.attr(this.element, this.options.namespace, this.domOptions);\n      if (this.parent &amp;&amp; this.parent.actualizeOptions) this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function _resetOptions(initOptions) {\n      this.domOptions = Utils.objectCreate(this.parent.options);\n      this.options = Utils.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name\n    // Callback is called with context as the first argument and the `this`\n    // The context is the current parsley instance, or window.Parsley if global\n    // A return value of `false` will interrupt the calls\n    on: function on(name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead\n    subscribe: function subscribe(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function off(name, fn) {\n      var queue = this._listeners &amp;&amp; this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--;) if (queue[i] === fn) queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function unsubscribe(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name\n    // A return value of `false` interrupts the callback chain\n    // Returns false if execution was interrupted\n    trigger: function trigger(name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners &amp;&amp; this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--;) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    asyncIsValid: function asyncIsValid(group, force) {\n      Utils.warnOnce(\&quot;asyncIsValid is deprecated; please use whenValid instead\&quot;);\n      return this.whenValid({ group: group, force: force });\n    },\n\n    _findRelated: function _findRelated() {\n      return this.options.multiple ? $(this.parent.element.querySelectorAll(&#39;[&#39; + this.options.namespace + &#39;multiple=\&quot;&#39; + this.options.multiple + &#39;\&quot;]&#39;)) : this.$element;\n    }\n  };\n\n  var convertArrayRequirement = function convertArrayRequirement(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m) throw &#39;Requirement is not an array: \&quot;&#39; + string + &#39;\&quot;&#39;;\n    var values = m[1].split(&#39;,&#39;).map(Utils.trimString);\n    if (values.length !== length) throw &#39;Requirement has &#39; + values.length + &#39; values when &#39; + length + &#39; are needed&#39;;\n    return values;\n  };\n\n  var convertExtraOptionRequirement = function convertExtraOptionRequirement(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if (&#39;string&#39; === typeof value) value = Utils.parseRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = Utils.parseRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var Validator = function Validator(spec) {\n    $.extend(true, this, spec);\n  };\n\n  Validator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function validate(value, requirementFirstArg) {\n      if (this.fn) {\n        // Legacy style validator\n\n        if (arguments.length &gt; 3) // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1); // Skip first arg (value) and last (instance), combining the rest\n        return this.fn(value, requirementFirstArg);\n      }\n\n      if (Array.isArray(value)) {\n        if (!this.validateMultiple) throw &#39;Validator `&#39; + this.name + &#39;` does not handle multiple values&#39;;\n        return this.validateMultiple.apply(this, arguments);\n      } else {\n        var instance = arguments[arguments.length - 1];\n        if (this.validateDate &amp;&amp; instance._isDateInput()) {\n          arguments[0] = Utils.parse.date(arguments[0]);\n          if (arguments[0] === null) return false;\n          return this.validateDate.apply(this, arguments);\n        }\n        if (this.validateNumber) {\n          if (isNaN(value)) return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber.apply(this, arguments);\n        }\n        if (this.validateString) {\n          return this.validateString.apply(this, arguments);\n        }\n        throw &#39;Validator `&#39; + this.name + &#39;` only handles multiple values&#39;;\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function parseRequirements(requirements, extraOptionReader) {\n      if (&#39;string&#39; !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return Array.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if (Array.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i &lt; values.length; i++) values[i] = Utils.parseRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [Utils.parseRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: &#39;string&#39;,\n\n    priority: 2\n\n  };\n\n  var ValidatorRegistry = function ValidatorRegistry(validators, catalog) {\n    this.__class__ = &#39;ValidatorRegistry&#39;;\n\n    // Default Parsley locale is en\n    this.locale = &#39;en&#39;;\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeTesters = {\n    email: /^((([a-z]|\\d|[!#\\$%&amp;&#39;\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;&#39;\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    date: {\n      test: function test(value) {\n        return Utils.parse.date(value) !== null;\n      }\n    },\n\n    url: new RegExp(\&quot;^\&quot; +\n    // protocol identifier\n    \&quot;(?:(?:https?|ftp)://)?\&quot; + // ** mod: make scheme optional\n    // user:pass authentication\n    \&quot;(?:\\\\S+(?::\\\\S*)?@)?\&quot; + \&quot;(?:\&quot; +\n    // IP address exclusion\n    // private &amp; local networks\n    // \&quot;(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\&quot; +   // ** mod: allow local networks\n    // \&quot;(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\&quot; +  // ** mod: allow local networks\n    // \&quot;(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\&quot; +  // ** mod: allow local networks\n    // IP address dotted notation octets\n    // excludes loopback network 0.0.0.0\n    // excludes reserved space &gt;= 224.0.0.0\n    // excludes network &amp; broacast addresses\n    // (first &amp; last IP address of each class)\n    \&quot;(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\&quot; + \&quot;(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\&quot; + \&quot;(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\&quot; + \&quot;|\&quot; +\n    // host name\n    &#39;(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)&#39; +\n    // domain name\n    &#39;(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*&#39; +\n    // TLD identifier\n    &#39;(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))&#39; + \&quot;)\&quot; +\n    // port number\n    \&quot;(?::\\\\d{2,5})?\&quot; +\n    // resource path\n    \&quot;(?:/\\\\S*)?\&quot; + \&quot;$\&quot;, &#39;i&#39;)\n  };\n  typeTesters.range = typeTesters.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = function decimalPlaces(num) {\n    var match = (&#39;&#39; + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) {\n      return 0;\n    }\n    return Math.max(0,\n    // Number of digits right of decimal point.\n    (match[1] ? match[1].length : 0) - (\n    // Adjust for scientific notation.\n    match[2] ? +match[2] : 0));\n  };\n\n  // parseArguments(&#39;number&#39;, [&#39;1&#39;, &#39;2&#39;]) =&gt; [1, 2]\n  var ValidatorRegistry__parseArguments = function ValidatorRegistry__parseArguments(type, args) {\n    return args.map(Utils.parse[type]);\n  };\n  // operatorToValidator returns a validating function for an operator function, applied to the given type\n  var ValidatorRegistry__operatorToValidator = function ValidatorRegistry__operatorToValidator(type, operator) {\n    return function (value) {\n      for (var _len = arguments.length, requirementsAndInput = Array(_len &gt; 1 ? _len - 1 : 0), _key = 1; _key &lt; _len; _key++) {\n        requirementsAndInput[_key - 1] = arguments[_key];\n      }\n\n      requirementsAndInput.pop(); // Get rid of `input` argument\n      return operator.apply(undefined, [value].concat(_toConsumableArray(ValidatorRegistry__parseArguments(type, requirementsAndInput))));\n    };\n  };\n\n  var ValidatorRegistry__comparisonOperator = function ValidatorRegistry__comparisonOperator(operator) {\n    return {\n      validateDate: ValidatorRegistry__operatorToValidator(&#39;date&#39;, operator),\n      validateNumber: ValidatorRegistry__operatorToValidator(&#39;number&#39;, operator),\n      requirementType: operator.length &lt;= 2 ? &#39;string&#39; : [&#39;string&#39;, &#39;string&#39;], // Support operators with a 1 or 2 requirement(s)\n      priority: 30\n    };\n  };\n\n  ValidatorRegistry.prototype = {\n    init: function init(validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype&#39;s validators:\n      this.validators = _extends({}, this.validators);\n\n      for (var name in validators) this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger(&#39;parsley:validator:init&#39;);\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function setLocale(locale) {\n      if (&#39;undefined&#39; === typeof this.catalog[locale]) throw new Error(locale + &#39; is not available in the catalog&#39;);\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function addCatalog(locale, messages, set) {\n      if (&#39;object&#39; === typeof messages) this.catalog[locale] = messages;\n\n      if (true === set) return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function addMessage(locale, name, message) {\n      if (&#39;undefined&#39; === typeof this.catalog[locale]) this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function addMessages(locale, nameMessageObject) {\n      for (var name in nameMessageObject) this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator(&#39;custom&#39;, {\n    //        requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \&quot;Hey, that&#39;s no good\&quot;,\n    //          fr: \&quot;Aye aye, pas bon du tout\&quot;,\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function addValidator(name, arg1, arg2) {\n      if (this.validators[name]) Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is already defined.&#39;);else if (Defaults.hasOwnProperty(name)) {\n        Utils.warn(&#39;\&quot;&#39; + name + &#39;\&quot; is a restricted keyword and is not a valid validator name.&#39;);\n        return;\n      }\n      return this._setValidator.apply(this, arguments);\n    },\n\n    updateValidator: function updateValidator(name, arg1, arg2) {\n      if (!this.validators[name]) {\n        Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is not already defined.&#39;);\n        return this.addValidator.apply(this, arguments);\n      }\n      return this._setValidator.apply(this, arguments);\n    },\n\n    removeValidator: function removeValidator(name) {\n      if (!this.validators[name]) Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is not defined.&#39;);\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function _setValidator(name, validator, priority) {\n      if (&#39;object&#39; !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new Validator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {}) this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function getErrorMessage(constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if (&#39;type&#39; === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function formatMessage(string, parameters) {\n      if (&#39;object&#39; === typeof parameters) {\n        for (var i in parameters) string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return &#39;string&#39; === typeof string ? string.replace(/%s/i, parameters) : &#39;&#39;;\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: &#39;string&#39; (default), &#39;integer&#39;, &#39;number&#39;, &#39;regexp&#39; or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function validateMultiple(values) {\n          return values.length &gt; 0;\n        },\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function validateString(value, type) {\n          var _ref = arguments.length &lt;= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n          var _ref$step = _ref.step;\n          var step = _ref$step === undefined ? &#39;any&#39; : _ref$step;\n          var _ref$base = _ref.base;\n          var base = _ref$base === undefined ? 0 : _ref$base;\n\n          var tester = typeTesters[type];\n          if (!tester) {\n            throw new Error(&#39;validator type `&#39; + type + &#39;` is not supported&#39;);\n          }\n          if (!tester.test(value)) return false;\n          if (&#39;number&#39; === type) {\n            if (!/^any$/i.test(step || &#39;&#39;)) {\n              var nb = Number(value);\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n              if (decimalPlaces(nb) &gt; decimals) // Value can&#39;t have too many decimals\n                return false;\n              // Be careful of rounding errors by using integers.\n              var toInt = function toInt(f) {\n                return Math.round(f * Math.pow(10, decimals));\n              };\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0) return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          &#39;&#39;: &#39;string&#39;,\n          step: &#39;string&#39;,\n          base: &#39;number&#39;\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function validateString(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: &#39;regexp&#39;,\n        priority: 64\n      },\n      minlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length &gt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      maxlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length &lt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      length: {\n        validateString: function validateString(value, min, max) {\n          return value.length &gt;= min &amp;&amp; value.length &lt;= max;\n        },\n        requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length &gt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length &lt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      check: {\n        validateMultiple: function validateMultiple(values, min, max) {\n          return values.length &gt;= min &amp;&amp; values.length &lt;= max;\n        },\n        requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n        priority: 30\n      },\n      min: ValidatorRegistry__comparisonOperator(function (value, requirement) {\n        return value &gt;= requirement;\n      }),\n      max: ValidatorRegistry__comparisonOperator(function (value, requirement) {\n        return value &lt;= requirement;\n      }),\n      range: ValidatorRegistry__comparisonOperator(function (value, min, max) {\n        return value &gt;= min &amp;&amp; value &lt;= max;\n      }),\n      equalto: {\n        validateString: function validateString(value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length) return value === $reference.val();else return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var UI = {};\n\n  var diffResults = function diffResults(newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i &lt; newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j &lt; oldResult.length; j++) if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n      if (found) kept.push(newResult[i]);else added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  UI.Form = {\n\n    _actualizeTriggers: function _actualizeTriggers() {\n      var _this2 = this;\n\n      this.$element.on(&#39;submit.Parsley&#39;, function (evt) {\n        _this2.onSubmitValidate(evt);\n      });\n      this.$element.on(&#39;click.Parsley&#39;, Utils._SubmitSelector, function (evt) {\n        _this2.onSubmitButton(evt);\n      });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled) return;\n\n      this.element.setAttribute(&#39;novalidate&#39;, &#39;&#39;);\n    },\n\n    focus: function focus() {\n      this._focusedField = null;\n\n      if (true === this.validationResult || &#39;none&#39; === this.options.focus) return null;\n\n      for (var i = 0; i &lt; this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult &amp;&amp; field.validationResult.length &gt; 0 &amp;&amp; &#39;undefined&#39; === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if (&#39;first&#39; === this.options.focus) break;\n        }\n      }\n\n      if (null === this._focusedField) return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function _destroyUI() {\n      // Reset all event listeners\n      this.$element.off(&#39;.Parsley&#39;);\n    }\n\n  };\n\n  UI.Field = {\n\n    _reflowUI: function _reflowUI() {\n      this._buildUI();\n\n      // If this field doesn&#39;t have an active UI don&#39;t bother doing something\n      if (!this._ui) return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) &amp;&amp; !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field&#39;s error message(s)\n    getErrorsMessages: function getErrorsMessages() {\n      // No error message, field is valid\n      if (true === this.validationResult) return [];\n\n      var messages = [];\n\n      for (var i = 0; i &lt; this.validationResult.length; i++) messages.push(this.validationResult[i].errorMessage || this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n    addError: function addError(name) {\n      var _ref2 = arguments.length &lt;= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var message = _ref2.message;\n      var assert = _ref2.assert;\n      var _ref2$updateClass = _ref2.updateClass;\n      var updateClass = _ref2$updateClass === undefined ? true : _ref2$updateClass;\n\n      this._buildUI();\n      this._addError(name, { message: message, assert: assert });\n\n      if (updateClass) this._errorClass();\n    },\n\n    // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n    updateError: function updateError(name) {\n      var _ref3 = arguments.length &lt;= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var message = _ref3.message;\n      var assert = _ref3.assert;\n      var _ref3$updateClass = _ref3.updateClass;\n      var updateClass = _ref3$updateClass === undefined ? true : _ref3$updateClass;\n\n      this._buildUI();\n      this._updateError(name, { message: message, assert: assert });\n\n      if (updateClass) this._errorClass();\n    },\n\n    // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n    removeError: function removeError(name) {\n      var _ref4 = arguments.length &lt;= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var _ref4$updateClass = _ref4.updateClass;\n      var updateClass = _ref4$updateClass === undefined ? true : _ref4$updateClass;\n\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz&#39; manually removing a well Parsley handled error makes no sense.\n      if (updateClass) this._manageStatusClass();\n    },\n\n    _manageStatusClass: function _manageStatusClass() {\n      if (this.hasConstraints() &amp;&amp; this.needsValidation() &amp;&amp; true === this.validationResult) this._successClass();else if (this.validationResult.length &gt; 0) this._errorClass();else this._resetClass();\n    },\n\n    _manageErrorsMessages: function _manageErrorsMessages(diff) {\n      if (&#39;undefined&#39; !== typeof this.options.errorsMessagesDisabled) return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if (&#39;undefined&#39; !== typeof this.options.errorMessage) {\n        if (diff.added.length || diff.kept.length) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find(&#39;.parsley-custom-error-message&#39;).length) this._ui.$errorsWrapper.append($(this.options.errorTemplate).addClass(&#39;parsley-custom-error-message&#39;));\n\n          return this._ui.$errorsWrapper.addClass(&#39;filled&#39;).find(&#39;.parsley-custom-error-message&#39;).html(this.options.errorMessage);\n        }\n\n        return this._ui.$errorsWrapper.removeClass(&#39;filled&#39;).find(&#39;.parsley-custom-error-message&#39;).remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i &lt; diff.removed.length; i++) this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i &lt; diff.added.length; i++) this._addError(diff.added[i].assert.name, { message: diff.added[i].errorMessage, assert: diff.added[i].assert });\n\n      for (i = 0; i &lt; diff.kept.length; i++) this._updateError(diff.kept[i].assert.name, { message: diff.kept[i].errorMessage, assert: diff.kept[i].assert });\n    },\n\n    _addError: function _addError(name, _ref5) {\n      var message = _ref5.message;\n      var assert = _ref5.assert;\n\n      this._insertErrorWrapper();\n      this._ui.$errorsWrapper.addClass(&#39;filled&#39;).append($(this.options.errorTemplate).addClass(&#39;parsley-&#39; + name).html(message || this._getErrorMessage(assert)));\n    },\n\n    _updateError: function _updateError(name, _ref6) {\n      var message = _ref6.message;\n      var assert = _ref6.assert;\n\n      this._ui.$errorsWrapper.addClass(&#39;filled&#39;).find(&#39;.parsley-&#39; + name).html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function _removeError(name) {\n      this._ui.$errorsWrapper.removeClass(&#39;filled&#39;).find(&#39;.parsley-&#39; + name).remove();\n    },\n\n    _getErrorMessage: function _getErrorMessage(constraint) {\n      var customConstraintErrorMessage = constraint.name + &#39;Message&#39;;\n\n      if (&#39;undefined&#39; !== typeof this.options[customConstraintErrorMessage]) return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function _buildUI() {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled) return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.element.setAttribute(this.options.namespace + &#39;id&#39;, this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = &#39;parsley-id-&#39; + (this.options.multiple ? &#39;multiple-&#39; + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr(&#39;id&#39;, _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function _manageClassHandler() {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if (&#39;string&#39; === typeof this.options.classHandler) {\n        if ($(this.options.classHandler).length === 0) ParsleyUtils.warn(&#39;No elements found that match the selector `&#39; + this.options.classHandler + &#39;` set in options.classHandler or data-parsley-class-handler&#39;);\n\n        //return element or empty set\n        return $(this.options.classHandler);\n      }\n\n      // Class handled could also be determined by function given in Parsley options\n      if (&#39;function&#39; === typeof this.options.classHandler) var $handler = this.options.classHandler.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if (&#39;undefined&#39; !== typeof $handler &amp;&amp; $handler.length) return $handler;\n\n      return this._inputHolder();\n    },\n\n    _inputHolder: function _inputHolder() {\n      // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n      if (!this.options.multiple || this.element.nodeName === &#39;SELECT&#39;) return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function _insertErrorWrapper() {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent();\n\n      if (&#39;string&#39; === typeof this.options.errorsContainer) {\n        if ($(this.options.errorsContainer).length) return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);else Utils.warn(&#39;The errors container `&#39; + this.options.errorsContainer + &#39;` does not exist in DOM&#39;);\n      } else if (&#39;function&#39; === typeof this.options.errorsContainer) $errorsContainer = this.options.errorsContainer.call(this, this);\n\n      if (&#39;undefined&#39; !== typeof $errorsContainer &amp;&amp; $errorsContainer.length) return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      return this._inputHolder().after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function _actualizeTriggers() {\n      var _this3 = this;\n\n      var $toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley events already bound on this field\n      $toBind.off(&#39;.Parsley&#39;);\n      if (this._failedOnce) $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, &#39;Parsley&#39;), function () {\n        _this3._validateIfNeeded();\n      });else if (trigger = Utils.namespaceEvents(this.options.trigger, &#39;Parsley&#39;)) {\n        $toBind.on(trigger, function (event) {\n          _this3._validateIfNeeded(event);\n        });\n      }\n    },\n\n    _validateIfNeeded: function _validateIfNeeded(event) {\n      var _this4 = this;\n\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length &lt; min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (event &amp;&amp; /key|input/.test(event.type)) if (!(this._ui &amp;&amp; this._ui.validationInformationVisible) &amp;&amp; this.getValue().length &lt;= this.options.validationThreshold) return;\n\n      if (this.options.debounce) {\n        window.clearTimeout(this._debounced);\n        this._debounced = window.setTimeout(function () {\n          return _this4.validate();\n        }, this.options.debounce);\n      } else this.validate();\n    },\n\n    _resetUI: function _resetUI() {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if (&#39;undefined&#39; === typeof this._ui) return;\n\n      // Reset all errors&#39; li\n      this._ui.$errorsWrapper.removeClass(&#39;filled&#39;).children().remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function _destroyUI() {\n      this._resetUI();\n\n      if (&#39;undefined&#39; !== typeof this._ui) this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function _successClass() {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function _errorClass() {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function _resetClass() {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var Form = function Form(element, domOptions, options) {\n    this.__class__ = &#39;Form&#39;;\n\n    this.element = element;\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var Form__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  Form.prototype = {\n    onSubmitValidate: function onSubmitValidate(event) {\n      var _this5 = this;\n\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley) return;\n\n      // If we didn&#39;t come here through a submit button, use the first one in the form\n      var submitSource = this._submitSource || this.$element.find(Utils._SubmitSelector)[0];\n      this._submitSource = null;\n      this.$element.find(&#39;.parsley-synthetic-submit-button&#39;).prop(&#39;disabled&#39;, true);\n      if (submitSource &amp;&amp; null !== submitSource.getAttribute(&#39;formnovalidate&#39;)) return;\n\n      window.Parsley._remoteCache = {};\n\n      var promise = this.whenValidate({ event: event });\n\n      if (&#39;resolved&#39; === promise.state() &amp;&amp; false !== this._trigger(&#39;submit&#39;)) {\n        // All good, let event go through. We make this distinction because browsers\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\n      } else {\n          // Rejected or pending: cancel this submit\n          event.stopImmediatePropagation();\n          event.preventDefault();\n          if (&#39;pending&#39; === promise.state()) promise.done(function () {\n            _this5._submit(submitSource);\n          });\n        }\n    },\n\n    onSubmitButton: function onSubmitButton(event) {\n      this._submitSource = event.currentTarget;\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \&quot;fake\&quot; the actual submit button being clicked.\n    _submit: function _submit(submitSource) {\n      if (false === this._trigger(&#39;submit&#39;)) return;\n      // Add submit button&#39;s data\n      if (submitSource) {\n        var $synthetic = this.$element.find(&#39;.parsley-synthetic-submit-button&#39;).prop(&#39;disabled&#39;, false);\n        if (0 === $synthetic.length) $synthetic = $(&#39;&lt;input class=\&quot;parsley-synthetic-submit-button\&quot; type=\&quot;hidden\&quot;&gt;&#39;).appendTo(this.$element);\n        $synthetic.attr({\n          name: submitSource.getAttribute(&#39;name&#39;),\n          value: submitSource.getAttribute(&#39;value&#39;)\n        });\n      }\n\n      this.$element.trigger(_extends($.Event(&#39;submit&#39;), { parsley: true }));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function validate(options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling validate on a parsley form without passing arguments as an object is deprecated.&#39;);\n\n        var _arguments = _slice.call(arguments);\n\n        var group = _arguments[0];\n        var force = _arguments[1];\n        var event = _arguments[2];\n\n        options = { group: group, force: force, event: event };\n      }\n      return Form__statusMapping[this.whenValidate(options).state()];\n    },\n\n    whenValidate: function whenValidate() {\n      var _Utils$all$done$fail$always,\n          _this6 = this;\n\n      var _ref7 = arguments.length &lt;= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var group = _ref7.group;\n      var force = _ref7.force;\n      var event = _ref7.event;\n\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent = _extends({}, event, { preventDefault: function preventDefault() {\n            Utils.warnOnce(\&quot;Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\&quot;);\n            _this6.validationResult = false;\n          } });\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before every validation\n      this._trigger(&#39;validate&#39;);\n\n      // Refresh form DOM options and form&#39;s fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this6.fields, function (field) {\n          return field.whenValidate({ force: force, group: group });\n        });\n      });\n\n      return (_Utils$all$done$fail$always = Utils.all(promises).done(function () {\n        _this6._trigger(&#39;success&#39;);\n      }).fail(function () {\n        _this6.validationResult = false;\n        _this6.focus();\n        _this6._trigger(&#39;error&#39;);\n      }).always(function () {\n        _this6._trigger(&#39;validated&#39;);\n      })).pipe.apply(_Utils$all$done$fail$always, _toConsumableArray(this._pipeAccordingToValidationResult()));\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function isValid(options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling isValid on a parsley form without passing arguments as an object is deprecated.&#39;);\n\n        var _arguments2 = _slice.call(arguments);\n\n        var group = _arguments2[0];\n        var force = _arguments2[1];\n\n        options = { group: group, force: force };\n      }\n      return Form__statusMapping[this.whenValid(options).state()];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function whenValid() {\n      var _this7 = this;\n\n      var _ref8 = arguments.length &lt;= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var group = _ref8.group;\n      var force = _ref8.force;\n\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this7.fields, function (field) {\n          return field.whenValid({ group: group, force: force });\n        });\n      });\n      return Utils.all(promises);\n    },\n\n    // Reset UI\n    reset: function reset() {\n      // Form case: emit a reset event for each field\n      for (var i = 0; i &lt; this.fields.length; i++) this.fields[i].reset();\n\n      this._trigger(&#39;reset&#39;);\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function destroy() {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i &lt; this.fields.length; i++) this.fields[i].destroy();\n\n      this.$element.removeData(&#39;Parsley&#39;);\n      this._trigger(&#39;destroy&#39;);\n    },\n\n    _refreshFields: function _refreshFields() {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function _bindFields() {\n      var _this8 = this;\n\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(function () {\n        _this8.$element.find(_this8.options.inputs).not(_this8.options.excluded).each(function (_, element) {\n          var fieldInstance = new window.Parsley.Factory(element, {}, _this8);\n\n          // Only add valid and not excluded `Field` and `FieldMultiple` children\n          if ((&#39;Field&#39; === fieldInstance.__class__ || &#39;FieldMultiple&#39; === fieldInstance.__class__) &amp;&amp; true !== fieldInstance.options.excluded) {\n            var uniqueId = fieldInstance.__class__ + &#39;-&#39; + fieldInstance.__id__;\n            if (&#39;undefined&#39; === typeof _this8.fieldsMappedById[uniqueId]) {\n              _this8.fieldsMappedById[uniqueId] = fieldInstance;\n              _this8.fields.push(fieldInstance);\n            }\n          }\n        });\n\n        $.each(Utils.difference(oldFields, _this8.fields), function (_, field) {\n          field.reset();\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form&#39;s fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form&#39;s options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () {\n        return this;\n      };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function _trigger(eventName) {\n      return this.trigger(&#39;form:&#39; + eventName);\n    }\n\n  };\n\n  var Constraint = function Constraint(parsleyField, name, requirements, priority, isDomConstraint) {\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    var validator = new Validator(validatorSpec);\n    priority = priority || parsleyField.options[name + &#39;Priority&#39;] || validator.priority;\n    isDomConstraint = true === isDomConstraint;\n\n    _extends(this, {\n      validator: validator,\n      name: name,\n      requirements: requirements,\n      priority: priority,\n      isDomConstraint: isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  var capitalize = function capitalize(str) {\n    var cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  Constraint.prototype = {\n    validate: function validate(value, instance) {\n      var _validator;\n\n      return (_validator = this.validator).validate.apply(_validator, [value].concat(_toConsumableArray(this.requirementList), [instance]));\n    },\n\n    _parseRequirements: function _parseRequirements(options) {\n      var _this9 = this;\n\n      this.requirementList = this.validator.parseRequirements(this.requirements, function (key) {\n        return options[_this9.name + capitalize(key)];\n      });\n    }\n  };\n\n  var Field = function Field(field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = &#39;Field&#39;;\n\n    this.element = field;\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if (&#39;undefined&#39; !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = true;\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  Field.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `UI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function validate(options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling validate on a parsley field without passing arguments as an object is deprecated.&#39;);\n        options = { options: options };\n      }\n      var promise = this.whenValidate(options);\n      if (!promise) // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case &#39;pending&#39;:\n          return null;\n        case &#39;resolved&#39;:\n          return true;\n        case &#39;rejected&#39;:\n          return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `UI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function whenValidate() {\n      var _whenValid$always$done$fail$always,\n          _this10 = this;\n\n      var _ref9 = arguments.length &lt;= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var force = _ref9.force;\n      var group = _ref9.group;\n\n      // do not validate a field if not the same as given validation group\n      this.refreshConstraints();\n      if (group &amp;&amp; !this._isInGroup(group)) return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger(&#39;validate&#39;);\n\n      return (_whenValid$always$done$fail$always = this.whenValid({ force: force, value: this.value, _refreshed: true }).always(function () {\n        _this10._reflowUI();\n      }).done(function () {\n        _this10._trigger(&#39;success&#39;);\n      }).fail(function () {\n        _this10._trigger(&#39;error&#39;);\n      }).always(function () {\n        _this10._trigger(&#39;validated&#39;);\n      })).pipe.apply(_whenValid$always$done$fail$always, _toConsumableArray(this._pipeAccordingToValidationResult()));\n    },\n\n    hasConstraints: function hasConstraints() {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function needsValidation(value) {\n      if (&#39;undefined&#39; === typeof value) value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length &amp;&amp; !this._isRequired() &amp;&amp; &#39;undefined&#39; === typeof this.options.validateIfEmpty) return false;\n\n      return true;\n    },\n\n    _isInGroup: function _isInGroup(group) {\n      if (Array.isArray(this.options.group)) return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function isValid(options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling isValid on a parsley field without passing arguments as an object is deprecated.&#39;);\n\n        var _arguments3 = _slice.call(arguments);\n\n        var force = _arguments3[0];\n        var value = _arguments3[1];\n\n        options = { force: force, value: value };\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function whenValid() {\n      var _this11 = this;\n\n      var _ref10 = arguments.length &lt;= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var _ref10$force = _ref10.force;\n      var force = _ref10$force === undefined ? false : _ref10$force;\n      var value = _ref10.value;\n      var group = _ref10.group;\n      var _refreshed = _ref10._refreshed;\n\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed) this.refreshConstraints();\n      // do not validate a field if not the same as given validation group\n      if (group &amp;&amp; !this._isInGroup(group)) return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints()) return $.when();\n\n      // Value could be passed as argument, needed to add more power to &#39;field:validate&#39;\n      if (&#39;undefined&#39; === typeof value || null === value) value = this.getValue();\n\n      if (!this.needsValidation(value) &amp;&amp; true !== force) return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, function (_, constraints) {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = Utils.all($.map(constraints, function (constraint) {\n          return _this11._validateConstraint(value, constraint);\n        }));\n        promises.push(promise);\n        if (promise.state() === &#39;rejected&#39;) return false; // Interrupt processing if a group has already failed\n      });\n      return Utils.all(promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function _validateConstraint(value, constraint) {\n      var _this12 = this;\n\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result) result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return Utils.all([result]).fail(function (errorMessage) {\n        if (!(_this12.validationResult instanceof Array)) _this12.validationResult = [];\n        _this12.validationResult.push({\n          assert: constraint,\n          errorMessage: &#39;string&#39; === typeof errorMessage &amp;&amp; errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function getValue() {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if (&#39;function&#39; === typeof this.options.value) value = this.options.value(this);else if (&#39;undefined&#39; !== typeof this.options.value) value = this.options.value;else value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if (&#39;undefined&#39; === typeof value || null === value) return &#39;&#39;;\n\n      return this._handleWhitespace(value);\n    },\n\n    // Reset UI\n    reset: function reset() {\n      this._resetUI();\n      return this._trigger(&#39;reset&#39;);\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function destroy() {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n      this.$element.removeData(&#39;Parsley&#39;);\n      this.$element.removeData(&#39;FieldMultiple&#39;);\n      this._trigger(&#39;destroy&#39;);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function refreshConstraints() {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function addConstraint(name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if (&#39;undefined&#39; !== this.constraintsByName[constraint.name]) this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function removeConstraint(name) {\n      for (var i = 0; i &lt; this.constraints.length; i++) if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function updateConstraint(name, parameters, priority) {\n      return this.removeConstraint(name).addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function _bindConstraints() {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i &lt; this.constraints.length; i++) if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options) this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function _bindHtml5Constraints() {\n      // html5 required\n      if (null !== this.element.getAttribute(&#39;required&#39;)) this.addConstraint(&#39;required&#39;, true, undefined, true);\n\n      // html5 pattern\n      if (null !== this.element.getAttribute(&#39;pattern&#39;)) this.addConstraint(&#39;pattern&#39;, this.element.getAttribute(&#39;pattern&#39;), undefined, true);\n\n      // range\n      var min = this.element.getAttribute(&#39;min&#39;);\n      var max = this.element.getAttribute(&#39;max&#39;);\n      if (null !== min &amp;&amp; null !== max) this.addConstraint(&#39;range&#39;, [min, max], undefined, true);\n\n      // HTML5 min\n      else if (null !== min) this.addConstraint(&#39;min&#39;, min, undefined, true);\n\n        // HTML5 max\n        else if (null !== max) this.addConstraint(&#39;max&#39;, max, undefined, true);\n\n      // length\n      if (null !== this.element.getAttribute(&#39;minlength&#39;) &amp;&amp; null !== this.element.getAttribute(&#39;maxlength&#39;)) this.addConstraint(&#39;length&#39;, [this.element.getAttribute(&#39;minlength&#39;), this.element.getAttribute(&#39;maxlength&#39;)], undefined, true);\n\n      // HTML5 minlength\n      else if (null !== this.element.getAttribute(&#39;minlength&#39;)) this.addConstraint(&#39;minlength&#39;, this.element.getAttribute(&#39;minlength&#39;), undefined, true);\n\n        // HTML5 maxlength\n        else if (null !== this.element.getAttribute(&#39;maxlength&#39;)) this.addConstraint(&#39;maxlength&#39;, this.element.getAttribute(&#39;maxlength&#39;), undefined, true);\n\n      // html5 types\n      var type = this.element.type;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if (&#39;number&#39; === type) {\n        return this.addConstraint(&#39;type&#39;, [&#39;number&#39;, {\n          step: this.element.getAttribute(&#39;step&#39;) || &#39;1&#39;,\n          base: min || this.element.getAttribute(&#39;value&#39;)\n        }], undefined, true);\n        // Regular other HTML5 supported types\n      } else if (/^(email|url|range|date)$/i.test(type)) {\n          return this.addConstraint(&#39;type&#39;, type, undefined, true);\n        }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function _isRequired() {\n      if (&#39;undefined&#39; === typeof this.constraintsByName.required) return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function _trigger(eventName) {\n      return this.trigger(&#39;field:&#39; + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\&quot;squish\&quot;` to auto squish input value\n    // Use `data-parsley-whitespace=\&quot;trim\&quot;` to auto trim input value\n    _handleWhitespace: function _handleWhitespace(value) {\n      if (true === this.options.trimValue) Utils.warnOnce(&#39;data-parsley-trim-value=\&quot;true\&quot; is deprecated, please use data-parsley-whitespace=\&quot;trim\&quot;&#39;);\n\n      if (&#39;squish&#39; === this.options.whitespace) value = value.replace(/\\s{2,}/g, &#39; &#39;);\n\n      if (&#39;trim&#39; === this.options.whitespace || &#39;squish&#39; === this.options.whitespace || true === this.options.trimValue) value = Utils.trimString(value);\n\n      return value;\n    },\n\n    _isDateInput: function _isDateInput() {\n      var c = this.constraintsByName.type;\n      return c &amp;&amp; c.requirements === &#39;date&#39;;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function _getGroupedConstraints() {\n      if (false === this.options.priorityEnabled) return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i &lt; this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p]) groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) {\n        return b[0].priority - a[0].priority;\n      });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = Field;\n\n  var Multiple = function Multiple() {\n    this.__class__ = &#39;FieldMultiple&#39;;\n  };\n\n  Multiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function addElement($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `Field.refreshConstraints()`\n    refreshConstraints: function refreshConstraints() {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.element.nodeName === &#39;SELECT&#39;) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i &lt; this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$(&#39;html&#39;).has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data(&#39;FieldMultiple&#39;).refreshConstraints().constraints;\n\n        for (var j = 0; j &lt; fieldConstraints.length; j++) this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `Field.getValue()`\n    getValue: function getValue() {\n      // Value could be overriden in DOM\n      if (&#39;function&#39; === typeof this.options.value) return this.options.value(this);else if (&#39;undefined&#39; !== typeof this.options.value) return this.options.value;\n\n      // Radio input case\n      if (this.element.nodeName === &#39;INPUT&#39;) {\n        if (this.element.type === &#39;radio&#39;) return this._findRelated().filter(&#39;:checked&#39;).val() || &#39;&#39;;\n\n        // checkbox input case\n        if (this.element.type === &#39;checkbox&#39;) {\n          var values = [];\n\n          this._findRelated().filter(&#39;:checked&#39;).each(function () {\n            values.push($(this).val());\n          });\n\n          return values;\n        }\n      }\n\n      // Select multiple case\n      if (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null === this.$element.val()) return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function _init() {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var Factory = function Factory(element, options, parsleyFormInstance) {\n    this.element = element;\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data(&#39;Parsley&#39;);\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a Form parent and there is one given in this call, add it\n      if (&#39;undefined&#39; !== typeof parsleyFormInstance &amp;&amp; savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      if (&#39;object&#39; === typeof options) {\n        _extends(savedparsleyFormInstance.options, options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length) throw new Error(&#39;You must bind Parsley on an existing element.&#39;);\n\n    if (&#39;undefined&#39; !== typeof parsleyFormInstance &amp;&amp; &#39;Form&#39; !== parsleyFormInstance.__class__) throw new Error(&#39;Parent instance must be a Form instance&#39;);\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  Factory.prototype = {\n    init: function init(options) {\n      this.__class__ = &#39;Parsley&#39;;\n      this.__version__ = &#39;2.7.2&#39;;\n      this.__id__ = Utils.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A Form instance is obviously a `&lt;form&gt;` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.element.nodeName === &#39;FORM&#39; || Utils.checkAttr(this.element, this.options.namespace, &#39;validate&#39;) &amp;&amp; !this.$element.is(this.options.inputs)) return this.bind(&#39;parsleyForm&#39;);\n\n      // Every other element is bound as a `Field` or `FieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind(&#39;parsleyField&#39;);\n    },\n\n    isMultiple: function isMultiple() {\n      return this.element.type === &#39;radio&#39; || this.element.type === &#39;checkbox&#39; || this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null !== this.element.getAttribute(&#39;multiple&#39;);\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function handleMultiple() {\n      var _this13 = this;\n\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      this.options.multiple = this.options.multiple || (name = this.element.getAttribute(&#39;name&#39;)) || this.element.getAttribute(&#39;id&#39;);\n\n      // Special select multiple input\n      if (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null !== this.element.getAttribute(&#39;multiple&#39;)) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind(&#39;parsleyFieldMultiple&#39;);\n\n        // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n          Utils.warn(&#39;To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.&#39;, this.$element);\n          return this;\n        }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, &#39;&#39;);\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if (name) {\n        $(&#39;input[name=\&quot;&#39; + name + &#39;\&quot;]&#39;).each(function (i, input) {\n          if (input.type === &#39;radio&#39; || input.type === &#39;checkbox&#39;) input.setAttribute(_this13.options.namespace + &#39;multiple&#39;, _this13.options.multiple);\n        });\n      }\n\n      // Check here if we don&#39;t already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i &lt; $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data(&#39;Parsley&#39;);\n        if (&#39;undefined&#39; !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data(&#39;FieldMultiple&#39;)) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret Field instance for every multiple field. It will be stored in `data(&#39;FieldMultiple&#39;)`\n      // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance\n      this.bind(&#39;parsleyField&#39;, true);\n\n      return parsleyMultipleInstance || this.bind(&#39;parsleyFieldMultiple&#39;);\n    },\n\n    // Return proper `Form`, `Field` or `FieldMultiple`\n    bind: function bind(type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case &#39;parsleyForm&#39;:\n          parsleyInstance = $.extend(new Form(this.element, this.domOptions, this.options), new Base(), window.ParsleyExtend)._bindFields();\n          break;\n        case &#39;parsleyField&#39;:\n          parsleyInstance = $.extend(new parsley_field(this.element, this.domOptions, this.options, this.parent), new Base(), window.ParsleyExtend);\n          break;\n        case &#39;parsleyFieldMultiple&#39;:\n          parsleyInstance = $.extend(new parsley_field(this.element, this.domOptions, this.options, this.parent), new Multiple(), new Base(), window.ParsleyExtend)._init();\n          break;\n        default:\n          throw new Error(type + &#39;is not a supported Parsley type&#39;);\n      }\n\n      if (this.options.multiple) Utils.setAttr(this.element, this.options.namespace, &#39;multiple&#39;, this.options.multiple);\n\n      if (&#39;undefined&#39; !== typeof doNotStore) {\n        this.$element.data(&#39;FieldMultiple&#39;, parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data(&#39;Parsley&#39;, parsleyInstance);\n\n      // Tell the world we have a new Form or Field instance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._trigger(&#39;init&#39;);\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split(&#39;.&#39;);\n  if (parseInt(vernums[0]) &lt;= 1 &amp;&amp; parseInt(vernums[1]) &lt; 8) {\n    throw \&quot;The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\&quot;;\n  }\n  if (!vernums.forEach) {\n    Utils.warn(&#39;Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim&#39;);\n  }\n  // Inherit `on`, `off` &amp; `trigger` to Parsley:\n  var Parsley = _extends(new Base(), {\n    element: document,\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: Factory,\n    version: &#39;2.7.2&#39;\n  });\n\n  // Supplement Field and Form with Base\n  // This way, the constructors will have access to those methods\n  _extends(parsley_field.prototype, UI.Field, Base.prototype);\n  _extends(Form.prototype, UI.Form, Base.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  _extends(Factory.prototype, Base.prototype);\n\n  // ### jQuery API\n  // `$(&#39;.elem&#39;).parsley(options)` or `$(&#39;.elem&#39;).psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length &gt; 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      Utils.warn(&#39;You must bind Parsley on an existing element.&#39;);\n\n      return;\n    }\n\n    return new Factory(this[0], options);\n  };\n\n  // ### Field and Form extension\n  // Ensure the extension is now defined if it wasn&#39;t previously\n  if (&#39;undefined&#39; === typeof window.ParsleyExtend) window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = _extends(Utils.objectCreate(Defaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  Parsley.Utils = Utils;\n  window.ParsleyUtils = {};\n  $.each(Utils, function (key, value) {\n    if (&#39;function&#39; === typeof value) {\n      window.ParsleyUtils[key] = function () {\n        Utils.warnOnce(&#39;Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.&#39;);\n        return Utils[key].apply(Utils, arguments);\n      };\n    }\n  });\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each(&#39;setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator&#39;.split(&#39; &#39;), function (i, method) {\n    window.Parsley[method] = function () {\n      return registry[method].apply(registry, arguments);\n    };\n    window.ParsleyValidator[method] = function () {\n      var _window$Parsley;\n\n      Utils.warnOnce(&#39;Accessing the method \\&#39;&#39; + method + &#39;\\&#39; through Validator is deprecated. Simply call \\&#39;window.Parsley.&#39; + method + &#39;(...)\\&#39;&#39;);\n      return (_window$Parsley = window.Parsley)[method].apply(_window$Parsley, arguments);\n    };\n  });\n\n  // ### UI\n  // Deprecated global object\n  window.Parsley.UI = UI;\n  window.ParsleyUI = {\n    removeError: function removeError(instance, name, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(&#39;Accessing UI is deprecated. Call \\&#39;removeError\\&#39; on the instance directly. Please comment in issue 1073 as to your need to call this method.&#39;);\n      return instance.removeError(name, { updateClass: updateClass });\n    },\n    getErrorsMessages: function getErrorsMessages(instance) {\n      Utils.warnOnce(&#39;Accessing UI is deprecated. Call \\&#39;getErrorsMessages\\&#39; on the instance directly.&#39;);\n      return instance.getErrorsMessages();\n    }\n  };\n  $.each(&#39;addError updateError&#39;.split(&#39; &#39;), function (i, method) {\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(&#39;Accessing UI is deprecated. Call \\&#39;&#39; + method + &#39;\\&#39; on the instance directly. Please comment in issue 1073 as to your need to call this method.&#39;);\n      return instance[method](name, { message: message, assert: assert, updateClass: updateClass });\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($(&#39;[data-parsley-validate]&#39;).length) $(&#39;[data-parsley-validate]&#39;).parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function deprecated() {\n    Utils.warnOnce(\&quot;Parsley&#39;s pubsub module is deprecated; use the &#39;on&#39; and &#39;off&#39; methods on parsley instances or window.Parsley\&quot;);\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = &#39;parsley:&#39;;\n  // Converts &#39;parsley:form:validate&#39; into &#39;form:validate&#39;\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if (&#39;object&#39; === typeof arguments[1] &amp;&amp; &#39;function&#39; === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if (&#39;function&#39; !== typeof callback) throw new Error(&#39;Wrong parameters&#39;);\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) &amp;&amp; !(instance instanceof Form)) throw new Error(&#39;Must give Parsley instance&#39;);\n\n    if (&#39;string&#39; !== typeof name || &#39;function&#39; !== typeof fn) throw new Error(&#39;Wrong parameters&#39;);\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if (&#39;string&#39; !== typeof name || &#39;function&#39; !== typeof fn) throw new Error(&#39;Wrong arguments&#39;);\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) &amp;&amp; !(instance instanceof Form)) throw new Error(&#39;Must give Parsley instance&#39;);\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $(&#39;form,input,textarea,select&#39;).each(function () {\n      var instance = $(this).data(&#39;Parsley&#39;);\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    var _instance;\n\n    deprecated();\n    var instanceGiven = instance instanceof parsley_field || instance instanceof Form;\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      &#39;default&#39;: {\n        fn: function fn(xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === &#39;rejected&#39;.\n          return xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function fn(xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status &lt; 200 || xhr.status &gt;= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function addAsyncValidator(name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator(&#39;remote&#39;, {\n    requirementType: {\n      &#39;&#39;: &#39;string&#39;,\n      &#39;validator&#39;: &#39;string&#39;,\n      &#39;reverse&#39;: &#39;boolean&#39;,\n      &#39;options&#39;: &#39;object&#39;\n    },\n\n    validateString: function validateString(value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? &#39;reverse&#39; : &#39;default&#39;);\n\n      if (&#39;undefined&#39; === typeof Parsley.asyncValidators[validator]) throw new Error(&#39;Calling an undefined async validator: `&#39; + validator + &#39;`&#39;);\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf(&#39;{value}&#39;) &gt; -1) {\n        url = url.replace(&#39;{value}&#39;, encodeURIComponent(value));\n      } else {\n        data[instance.element.getAttribute(&#39;name&#39;) || instance.element.getAttribute(&#39;id&#39;)] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: &#39;GET&#39;\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger(&#39;field:ajaxoptions&#39;, instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if (&#39;undefined&#39; === typeof Parsley._remoteCache) Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function handleXhr() {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on(&#39;form:submit&#39;, function () {\n    Parsley._remoteCache = {};\n  });\n\n  Base.prototype.addAsyncValidator = function () {\n    Utils.warnOnce(&#39;Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`&#39;);\n    return Parsley.addAsyncValidator.apply(Parsley, arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages(&#39;en&#39;, {\n    defaultMessage: \&quot;This value seems to be invalid.\&quot;,\n    type: {\n      email: \&quot;This value should be a valid email.\&quot;,\n      url: \&quot;This value should be a valid url.\&quot;,\n      number: \&quot;This value should be a valid number.\&quot;,\n      integer: \&quot;This value should be a valid integer.\&quot;,\n      digits: \&quot;This value should be digits.\&quot;,\n      alphanum: \&quot;This value should be alphanumeric.\&quot;\n    },\n    notblank: \&quot;This value should not be blank.\&quot;,\n    required: \&quot;This value is required.\&quot;,\n    pattern: \&quot;This value seems to be invalid.\&quot;,\n    min: \&quot;This value should be greater than or equal to %s.\&quot;,\n    max: \&quot;This value should be lower than or equal to %s.\&quot;,\n    range: \&quot;This value should be between %s and %s.\&quot;,\n    minlength: \&quot;This value is too short. It should have %s characters or more.\&quot;,\n    maxlength: \&quot;This value is too long. It should have %s characters or fewer.\&quot;,\n    length: \&quot;This value length is invalid. It should be between %s and %s characters long.\&quot;,\n    mincheck: \&quot;You must select at least %s choices.\&quot;,\n    maxcheck: \&quot;You must select %s choices or fewer.\&quot;,\n    check: \&quot;You must select between %s and %s choices.\&quot;,\n    equalto: \&quot;This value should be the same.\&quot;\n  });\n\n  Parsley.setLocale(&#39;en&#39;);\n\n  /**\n   * inputevent - Alleviate browser bugs for input events\n   * https://github.com/marcandre/inputevent\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n   * @author Marc-Andre Lafortune &lt;github@marc-andre.ca&gt;\n   * @license MIT\n   */\n\n  function InputEvent() {\n    var _this14 = this;\n\n    var globals = window || global;\n\n    // Slightly odd way construct our object. This way methods are force bound.\n    // Used to test for duplicate library.\n    _extends(this, {\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: function isNativeEvent(evt) {\n        return evt.originalEvent &amp;&amp; evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: function fakeInputEvent(evt) {\n        if (_this14.isNativeEvent(evt)) {\n          $(evt.target).trigger(&#39;input&#39;);\n        }\n      },\n\n      misbehaves: function misbehaves(evt) {\n        if (_this14.isNativeEvent(evt)) {\n          _this14.behavesOk(evt);\n          $(document).on(&#39;change.inputevent&#39;, evt.data.selector, _this14.fakeInputEvent);\n          _this14.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: function behavesOk(evt) {\n        if (_this14.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n          .off(&#39;input.inputevent&#39;, evt.data.selector, _this14.behavesOk).off(&#39;change.inputevent&#39;, evt.data.selector, _this14.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: function install() {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = &#39;0.0.3&#39;;\n        var _arr = [&#39;select&#39;, &#39;input[type=\&quot;checkbox\&quot;]&#39;, &#39;input[type=\&quot;radio\&quot;]&#39;, &#39;input[type=\&quot;file\&quot;]&#39;];\n        for (var _i = 0; _i &lt; _arr.length; _i++) {\n          var selector = _arr[_i];\n          $(document).on(&#39;input.inputevent&#39;, selector, { selector: selector }, _this14.behavesOk).on(&#39;change.inputevent&#39;, selector, { selector: selector }, _this14.misbehaves);\n        }\n      },\n\n      uninstall: function uninstall() {\n        delete globals.inputEventPatched;\n        $(document).off(&#39;.inputevent&#39;);\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  inputevent.install();\n\n  var parsley = Parsley;\n\n  return parsley;\n});\n//# sourceMappingURL=parsley.js.map\n&quot;,&quot;(function (global, factory) {\n  typeof exports === &#39;object&#39; &amp;&amp; typeof module !== &#39;undefined&#39; ? module.exports = factory(require(&#39;jquery&#39;)) :\n  typeof define === &#39;function&#39; &amp;&amp; define.amd ? define([&#39;jquery&#39;], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { &#39;use strict&#39;;\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var Utils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function (element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp(&#39;^&#39; + namespace, &#39;i&#39;);\n\n      if (&#39;undefined&#39; === typeof obj)\n        obj = {};\n      else {\n        // Clear all own properties. This won&#39;t affect prototype&#39;s values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i))\n            delete obj[i];\n        }\n      }\n\n      if (!element)\n        return obj;\n\n      attributes = element.attributes;\n      for (i = attributes.length; i--; ) {\n        attribute = attributes[i];\n\n        if (attribute &amp;&amp; attribute.specified &amp;&amp; regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function (element, namespace, checkAttr) {\n      return element.hasAttribute(namespace + checkAttr);\n    },\n\n    setAttr: function (element, namespace, attr, value) {\n      element.setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function () {\n      return &#39;&#39; + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function (value) {\n      var num;\n\n      try {\n        return value ?\n          value == \&quot;true\&quot; ||\n          (value == \&quot;false\&quot; ? false :\n          value == \&quot;null\&quot; ? null :\n          !isNaN(num = Number(value)) ? num :\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n          value)\n          : value;\n      } catch (e) { return value; }\n    },\n\n    // Zepto camelize function\n    camelize: function (str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : &#39;&#39;;\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function (str) {\n      return str.replace(/::/g, &#39;/&#39;)\n        .replace(/([A-Z]+)([A-Z][a-z])/g, &#39;$1_$2&#39;)\n        .replace(/([a-z\\d])([A-Z])/g, &#39;$1_$2&#39;)\n        .replace(/_/g, &#39;-&#39;)\n        .toLowerCase();\n    },\n\n    warn: function () {\n      if (window.console &amp;&amp; &#39;function&#39; === typeof window.console.warn)\n        window.console.warn(...arguments);\n    },\n\n    warnOnce: function(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn(...arguments);\n      }\n    },\n\n    _resetWarnings: function () {\n      pastWarnings = {};\n    },\n\n    trimString: function(string) {\n      return string.replace(/^\\s+|\\s+$/g, &#39;&#39;);\n    },\n\n    parse: {\n      date: function(string) {\n        let parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n        if (!parsed)\n          return null;\n        let [_, year, month, day] = parsed.map(x =&gt; parseInt(x, 10));\n        let date = new Date(year, month - 1, day);\n        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day)\n          return null;\n        return date;\n      },\n      string: function(string) {\n        return string;\n      },\n      integer: function(string) {\n        if (isNaN(string))\n          return null;\n        return parseInt(string, 10);\n      },\n      number: function(string) {\n        if (isNaN(string))\n          throw null;\n        return parseFloat(string);\n      },\n      &#39;boolean&#39;: function _boolean(string) {\n        return !(/^\\s*false\\s*$/i.test(string));\n      },\n      object: function(string) {\n        return Utils.deserializeValue(string);\n      },\n      regexp: function(regexp) {\n        var flags = &#39;&#39;;\n\n        // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n        if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n          // Replace the regexp literal string with the first match group: ([gimy]*)\n          // If no flag is present, this will be a blank string\n          flags = regexp.replace(/.*\\/([gimy]*)$/, &#39;$1&#39;);\n          // Again, replace the regexp literal string with the first match group:\n          // everything excluding the opening and closing slashes and the flags\n          regexp = regexp.replace(new RegExp(&#39;^/(.*?)/&#39; + flags + &#39;$&#39;), &#39;$1&#39;);\n        } else {\n          // Anchor regexp:\n          regexp = &#39;^&#39; + regexp + &#39;$&#39;;\n        }\n        return new RegExp(regexp, flags);\n      }\n    },\n\n    parseRequirement: function(requirementType, string) {\n      var converter = this.parse[requirementType || &#39;string&#39;];\n      if (!converter)\n        throw &#39;Unknown requirement specification: \&quot;&#39; + requirementType + &#39;\&quot;&#39;;\n      let converted = converter(string);\n      if (converted === null)\n        throw `Requirement is not a ${requirementType}: \&quot;${string}\&quot;`;\n      return converted;\n    },\n\n    namespaceEvents: function(events, namespace) {\n      events = this.trimString(events || &#39;&#39;).split(/\\s+/);\n      if (!events[0])\n        return &#39;&#39;;\n      return $.map(events, evt =&gt; `${evt}.${namespace}`).join(&#39; &#39;);\n    },\n\n    difference: function(array, remove) {\n      // This is O(N^2), should be optimized\n      let result = [];\n      $.each(array, (_, elem) =&gt; {\n        if (remove.indexOf(elem) == -1)\n          result.push(elem);\n      });\n      return result;\n    },\n\n    // Alter-ego to native Promise.all, but for jQuery\n    all: function(promises) {\n      // jQuery treats $.when() and $.when(singlePromise) differently; let&#39;s avoid that and add spurious elements\n      return $.when(...promises, 42, 42);\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function () {};\n      return function (prototype) {\n        if (arguments.length &gt; 1) {\n          throw Error(&#39;Second argument not supported&#39;);\n        }\n        if (typeof prototype != &#39;object&#39;) {\n          throw TypeError(&#39;Argument must be an object&#39;);\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })(),\n\n    _SubmitSelector: &#39;input[type=\&quot;submit\&quot;], button:submit&#39;\n  };\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\&quot;input, textarea\&quot;`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\&quot;false\&quot;`\n\n  var Defaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: &#39;data-parsley-&#39;,\n\n    // Supported inputs by default\n    inputs: &#39;input, textarea, select&#39;,\n\n    // Excluded inputs by default\n    excluded: &#39;input[type=button], input[type=submit], input[type=reset], input[type=hidden]&#39;,\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. &#39;first&#39;|&#39;last&#39;|&#39;none&#39;\n    focus: &#39;first&#39;,\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: &#39;input&#39;,\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: &#39;parsley-error&#39;,\n\n    // Same for success validation\n    successClass: &#39;parsley-success&#39;,\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `&#39;#div&#39;`\n    classHandler: function (Field) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `&#39;#div&#39;`\n    errorsContainer: function (Field) {},\n\n    // ul elem that would receive errors&#39; list\n    errorsWrapper: &#39;&lt;ul class=\&quot;parsley-errors-list\&quot;&gt;&lt;/ul&gt;&#39;,\n\n    // li elem that would receive error message\n    errorTemplate: &#39;&lt;li&gt;&lt;/li&gt;&#39;\n  };\n\n  var Base = function () {\n    this.__id__ = Utils.generateID();\n  };\n\n  Base.prototype = {\n    asyncSupport: true, // Deprecated\n\n    _pipeAccordingToValidationResult: function () {\n      var pipe = () =&gt; {\n        var r = $.Deferred();\n        if (true !== this.validationResult)\n          r.reject();\n        return r.resolve().promise();\n      };\n      return [pipe, pipe];\n    },\n\n    actualizeOptions: function () {\n      Utils.attr(this.element, this.options.namespace, this.domOptions);\n      if (this.parent &amp;&amp; this.parent.actualizeOptions)\n        this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function (initOptions) {\n      this.domOptions = Utils.objectCreate(this.parent.options);\n      this.options = Utils.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i))\n          this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name\n    // Callback is called with context as the first argument and the `this`\n    // The context is the current parsley instance, or window.Parsley if global\n    // A return value of `false` will interrupt the calls\n    on: function (name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead\n    subscribe: function(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function (name, fn) {\n      var queue = this._listeners &amp;&amp; this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--; )\n            if (queue[i] === fn)\n              queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name\n    // A return value of `false` interrupts the callback chain\n    // Returns false if execution was interrupted\n    trigger: function (name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners &amp;&amp; this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--; ) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    asyncIsValid: function (group, force) {\n      Utils.warnOnce(\&quot;asyncIsValid is deprecated; please use whenValid instead\&quot;);\n      return this.whenValid({group, force});\n    },\n\n    _findRelated: function () {\n      return this.options.multiple ?\n        $(this.parent.element.querySelectorAll(`[${this.options.namespace}multiple=\&quot;${this.options.multiple}\&quot;]`))\n      : this.$element;\n    }\n  };\n\n  var convertArrayRequirement = function(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m)\n      throw &#39;Requirement is not an array: \&quot;&#39; + string + &#39;\&quot;&#39;;\n    var values = m[1].split(&#39;,&#39;).map(Utils.trimString);\n    if (values.length !== length)\n      throw &#39;Requirement has &#39; + values.length + &#39; values when &#39; + length + &#39; are needed&#39;;\n    return values;\n  };\n\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if (&#39;string&#39; === typeof value)\n          value = Utils.parseRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = Utils.parseRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var Validator = function(spec) {\n    $.extend(true, this, spec);\n  };\n\n  Validator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function(value, requirementFirstArg) {\n      if (this.fn) { // Legacy style validator\n\n        if (arguments.length &gt; 3)  // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n        return this.fn(value, requirementFirstArg);\n      }\n\n      if (Array.isArray(value)) {\n        if (!this.validateMultiple)\n          throw &#39;Validator `&#39; + this.name + &#39;` does not handle multiple values&#39;;\n        return this.validateMultiple(...arguments);\n      } else {\n        let instance = arguments[arguments.length - 1];\n        if (this.validateDate &amp;&amp; instance._isDateInput()) {\n          arguments[0] = Utils.parse.date(arguments[0]);\n          if (arguments[0] === null)\n            return false;\n          return this.validateDate(...arguments);\n        }\n        if (this.validateNumber) {\n          if (isNaN(value))\n            return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber(...arguments);\n        }\n        if (this.validateString) {\n          return this.validateString(...arguments);\n        }\n        throw &#39;Validator `&#39; + this.name + &#39;` only handles multiple values&#39;;\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function(requirements, extraOptionReader) {\n      if (&#39;string&#39; !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return Array.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if (Array.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i &lt; values.length; i++)\n          values[i] = Utils.parseRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [Utils.parseRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: &#39;string&#39;,\n\n    priority: 2\n\n  };\n\n  var ValidatorRegistry = function (validators, catalog) {\n    this.__class__ = &#39;ValidatorRegistry&#39;;\n\n    // Default Parsley locale is en\n    this.locale = &#39;en&#39;;\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeTesters =  {\n    email: /^((([a-z]|\\d|[!#\\$%&amp;&#39;\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;&#39;\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    date: {\n      test: value =&gt; Utils.parse.date(value) !== null\n    },\n\n    url: new RegExp(\n        \&quot;^\&quot; +\n          // protocol identifier\n          \&quot;(?:(?:https?|ftp)://)?\&quot; + // ** mod: make scheme optional\n          // user:pass authentication\n          \&quot;(?:\\\\S+(?::\\\\S*)?@)?\&quot; +\n          \&quot;(?:\&quot; +\n            // IP address exclusion\n            // private &amp; local networks\n            // \&quot;(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\&quot; +   // ** mod: allow local networks\n            // \&quot;(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\&quot; +  // ** mod: allow local networks\n            // \&quot;(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\&quot; +  // ** mod: allow local networks\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space &gt;= 224.0.0.0\n            // excludes network &amp; broacast addresses\n            // (first &amp; last IP address of each class)\n            \&quot;(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\&quot; +\n            \&quot;(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\&quot; +\n            \&quot;(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\&quot; +\n          \&quot;|\&quot; +\n            // host name\n            \&quot;(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\&quot; +\n            // domain name\n            \&quot;(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\&quot; +\n            // TLD identifier\n            \&quot;(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\&quot; +\n          \&quot;)\&quot; +\n          // port number\n          \&quot;(?::\\\\d{2,5})?\&quot; +\n          // resource path\n          \&quot;(?:/\\\\S*)?\&quot; +\n        \&quot;$\&quot;, &#39;i&#39;\n      )\n  };\n  typeTesters.range = typeTesters.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = num =&gt; {\n    var match = (&#39;&#39; + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) { return 0; }\n    return Math.max(\n         0,\n         // Number of digits right of decimal point.\n         (match[1] ? match[1].length : 0) -\n         // Adjust for scientific notation.\n         (match[2] ? +match[2] : 0));\n  };\n\n  // parseArguments(&#39;number&#39;, [&#39;1&#39;, &#39;2&#39;]) =&gt; [1, 2]\n  let ValidatorRegistry__parseArguments = (type, args) =&gt; args.map(Utils.parse[type]);\n  // operatorToValidator returns a validating function for an operator function, applied to the given type\n  let ValidatorRegistry__operatorToValidator = (type, operator) =&gt; {\n    return (value, ...requirementsAndInput) =&gt; {\n      requirementsAndInput.pop(); // Get rid of `input` argument\n      return operator(value, ...ValidatorRegistry__parseArguments(type, requirementsAndInput));\n    };\n  };\n\n  let ValidatorRegistry__comparisonOperator = operator =&gt; ({\n    validateDate: ValidatorRegistry__operatorToValidator(&#39;date&#39;, operator),\n    validateNumber: ValidatorRegistry__operatorToValidator(&#39;number&#39;, operator),\n    requirementType: operator.length &lt;= 2 ? &#39;string&#39; : [&#39;string&#39;, &#39;string&#39;], // Support operators with a 1 or 2 requirement(s)\n    priority: 30\n  });\n\n  ValidatorRegistry.prototype = {\n    init: function (validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype&#39;s validators:\n      this.validators = Object.assign({}, this.validators);\n\n      for (var name in validators)\n        this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger(&#39;parsley:validator:init&#39;);\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function (locale) {\n      if (&#39;undefined&#39; === typeof this.catalog[locale])\n        throw new Error(locale + &#39; is not available in the catalog&#39;);\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function (locale, messages, set) {\n      if (&#39;object&#39; === typeof messages)\n        this.catalog[locale] = messages;\n\n      if (true === set)\n        return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function (locale, name, message) {\n      if (&#39;undefined&#39; === typeof this.catalog[locale])\n        this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function (locale, nameMessageObject) {\n      for (var name in nameMessageObject)\n        this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator(&#39;custom&#39;, {\n    //        requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \&quot;Hey, that&#39;s no good\&quot;,\n    //          fr: \&quot;Aye aye, pas bon du tout\&quot;,\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function (name, arg1, arg2) {\n      if (this.validators[name])\n        Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is already defined.&#39;);\n      else if (Defaults.hasOwnProperty(name)) {\n        Utils.warn(&#39;\&quot;&#39; + name + &#39;\&quot; is a restricted keyword and is not a valid validator name.&#39;);\n        return;\n      }\n      return this._setValidator(...arguments);\n    },\n\n    updateValidator: function (name, arg1, arg2) {\n      if (!this.validators[name]) {\n        Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is not already defined.&#39;);\n        return this.addValidator(...arguments);\n      }\n      return this._setValidator(...arguments);\n    },\n\n    removeValidator: function (name) {\n      if (!this.validators[name])\n        Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is not defined.&#39;);\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function (name, validator, priority) {\n      if (&#39;object&#39; !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new Validator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {})\n        this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function (constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if (&#39;type&#39; === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function (string, parameters) {\n      if (&#39;object&#39; === typeof parameters) {\n        for (var i in parameters)\n          string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return &#39;string&#39; === typeof string ? string.replace(/%s/i, parameters) : &#39;&#39;;\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: &#39;string&#39; (default), &#39;integer&#39;, &#39;number&#39;, &#39;regexp&#39; or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function(values) {\n          return values.length &gt; 0;\n        },\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function(value, type, {step = &#39;any&#39;, base = 0} = {}) {\n          var tester = typeTesters[type];\n          if (!tester) {\n            throw new Error(&#39;validator type `&#39; + type + &#39;` is not supported&#39;);\n          }\n          if (!tester.test(value))\n            return false;\n          if (&#39;number&#39; === type) {\n            if (!/^any$/i.test(step || &#39;&#39;)) {\n              var nb = Number(value);\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n              if (decimalPlaces(nb) &gt; decimals) // Value can&#39;t have too many decimals\n                return false;\n              // Be careful of rounding errors by using integers.\n              var toInt = f =&gt; Math.round(f * Math.pow(10, decimals));\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n                return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          &#39;&#39;: &#39;string&#39;,\n          step: &#39;string&#39;,\n          base: &#39;number&#39;\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: &#39;regexp&#39;,\n        priority: 64\n      },\n      minlength: {\n        validateString: function (value, requirement) {\n          return value.length &gt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      maxlength: {\n        validateString: function (value, requirement) {\n          return value.length &lt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      length: {\n        validateString: function (value, min, max) {\n          return value.length &gt;= min &amp;&amp; value.length &lt;= max;\n        },\n        requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length &gt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length &lt;= requirement;\n        },\n        requirementType: &#39;integer&#39;,\n        priority: 30\n      },\n      check: {\n        validateMultiple: function (values, min, max) {\n          return values.length &gt;= min &amp;&amp; values.length &lt;= max;\n        },\n        requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n        priority: 30\n      },\n      min: ValidatorRegistry__comparisonOperator((value, requirement) =&gt; value &gt;= requirement),\n      max: ValidatorRegistry__comparisonOperator((value, requirement) =&gt; value &lt;= requirement),\n      range: ValidatorRegistry__comparisonOperator((value, min, max) =&gt; value &gt;= min &amp;&amp; value &lt;= max),\n      equalto: {\n        validateString: function (value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length)\n            return value === $reference.val();\n          else\n            return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var UI = {};\n\n  var diffResults = function (newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i &lt; newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j &lt; oldResult.length; j++)\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n      if (found)\n        kept.push(newResult[i]);\n      else\n        added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  UI.Form = {\n\n    _actualizeTriggers: function () {\n      this.$element.on(&#39;submit.Parsley&#39;, evt =&gt; { this.onSubmitValidate(evt); });\n      this.$element.on(&#39;click.Parsley&#39;, Utils._SubmitSelector, evt =&gt; { this.onSubmitButton(evt); });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled)\n        return;\n\n      this.element.setAttribute(&#39;novalidate&#39;, &#39;&#39;);\n    },\n\n    focus: function () {\n      this._focusedField = null;\n\n      if (true === this.validationResult || &#39;none&#39; === this.options.focus)\n        return null;\n\n      for (var i = 0; i &lt; this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult &amp;&amp; field.validationResult.length &gt; 0 &amp;&amp; &#39;undefined&#39; === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if (&#39;first&#39; === this.options.focus)\n            break;\n        }\n      }\n\n      if (null === this._focusedField)\n        return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function () {\n      // Reset all event listeners\n      this.$element.off(&#39;.Parsley&#39;);\n    }\n\n  };\n\n  UI.Field = {\n\n    _reflowUI: function () {\n      this._buildUI();\n\n      // If this field doesn&#39;t have an active UI don&#39;t bother doing something\n      if (!this._ui)\n        return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) &amp;&amp; !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field&#39;s error message(s)\n    getErrorsMessages: function () {\n      // No error message, field is valid\n      if (true === this.validationResult)\n        return [];\n\n      var messages = [];\n\n      for (var i = 0; i &lt; this.validationResult.length; i++)\n        messages.push(this.validationResult[i].errorMessage ||\n         this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n    addError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._addError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n    updateError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._updateError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n    removeError: function (name, {updateClass = true} = {}) {\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz&#39; manually removing a well Parsley handled error makes no sense.\n      if (updateClass)\n        this._manageStatusClass();\n    },\n\n    _manageStatusClass: function () {\n      if (this.hasConstraints() &amp;&amp; this.needsValidation() &amp;&amp; true === this.validationResult)\n        this._successClass();\n      else if (this.validationResult.length &gt; 0)\n        this._errorClass();\n      else\n        this._resetClass();\n    },\n\n    _manageErrorsMessages: function (diff) {\n      if (&#39;undefined&#39; !== typeof this.options.errorsMessagesDisabled)\n        return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if (&#39;undefined&#39; !== typeof this.options.errorMessage) {\n        if ((diff.added.length || diff.kept.length)) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find(&#39;.parsley-custom-error-message&#39;).length)\n            this._ui.$errorsWrapper\n              .append(\n                $(this.options.errorTemplate)\n                .addClass(&#39;parsley-custom-error-message&#39;)\n              );\n\n          return this._ui.$errorsWrapper\n            .addClass(&#39;filled&#39;)\n            .find(&#39;.parsley-custom-error-message&#39;)\n            .html(this.options.errorMessage);\n        }\n\n        return this._ui.$errorsWrapper\n          .removeClass(&#39;filled&#39;)\n          .find(&#39;.parsley-custom-error-message&#39;)\n          .remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i &lt; diff.removed.length; i++)\n        this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i &lt; diff.added.length; i++)\n        this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n      for (i = 0; i &lt; diff.kept.length; i++)\n        this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n    },\n\n\n    _addError: function (name, {message, assert}) {\n      this._insertErrorWrapper();\n      this._ui.$errorsWrapper\n        .addClass(&#39;filled&#39;)\n        .append(\n          $(this.options.errorTemplate)\n          .addClass(&#39;parsley-&#39; + name)\n          .html(message || this._getErrorMessage(assert))\n        );\n    },\n\n    _updateError: function (name, {message, assert}) {\n      this._ui.$errorsWrapper\n        .addClass(&#39;filled&#39;)\n        .find(&#39;.parsley-&#39; + name)\n        .html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function (name) {\n      this._ui.$errorsWrapper\n        .removeClass(&#39;filled&#39;)\n        .find(&#39;.parsley-&#39; + name)\n        .remove();\n    },\n\n    _getErrorMessage: function (constraint) {\n      var customConstraintErrorMessage = constraint.name + &#39;Message&#39;;\n\n      if (&#39;undefined&#39; !== typeof this.options[customConstraintErrorMessage])\n        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function () {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled)\n        return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.element.setAttribute(this.options.namespace + &#39;id&#39;, this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = &#39;parsley-id-&#39; + (this.options.multiple ? &#39;multiple-&#39; + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr(&#39;id&#39;, _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function () {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if (&#39;string&#39; === typeof this.options.classHandler) {\n        if ($(this.options.classHandler).length === 0)\n          ParsleyUtils.warn(&#39;No elements found that match the selector `&#39; + this.options.classHandler + &#39;` set in options.classHandler or data-parsley-class-handler&#39;);\n\n        //return element or empty set\n        return $(this.options.classHandler);\n      }\n\n      // Class handled could also be determined by function given in Parsley options\n      if (&#39;function&#39; === typeof this.options.classHandler)\n        var $handler = this.options.classHandler.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if (&#39;undefined&#39; !== typeof $handler &amp;&amp; $handler.length)\n        return $handler;\n\n      return this._inputHolder();\n    },\n\n    _inputHolder: function() {\n      // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n      if (!this.options.multiple || this.element.nodeName === &#39;SELECT&#39;)\n        return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function () {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length)\n        return this._ui.$errorsWrapper.parent();\n\n      if (&#39;string&#39; === typeof this.options.errorsContainer) {\n        if ($(this.options.errorsContainer).length)\n          return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\n        else\n          Utils.warn(&#39;The errors container `&#39; + this.options.errorsContainer + &#39;` does not exist in DOM&#39;);\n      } else if (&#39;function&#39; === typeof this.options.errorsContainer)\n        $errorsContainer = this.options.errorsContainer.call(this, this);\n\n      if (&#39;undefined&#39; !== typeof $errorsContainer &amp;&amp; $errorsContainer.length)\n        return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      return this._inputHolder().after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function () {\n      var $toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley events already bound on this field\n      $toBind.off(&#39;.Parsley&#39;);\n      if (this._failedOnce)\n        $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, &#39;Parsley&#39;), () =&gt; {\n          this._validateIfNeeded();\n        });\n      else if (trigger = Utils.namespaceEvents(this.options.trigger, &#39;Parsley&#39;)) {\n        $toBind.on(trigger, event =&gt; {\n          this._validateIfNeeded(event);\n        });\n      }\n    },\n\n    _validateIfNeeded: function (event) {\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length &lt; min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (event &amp;&amp; /key|input/.test(event.type))\n        if (!(this._ui &amp;&amp; this._ui.validationInformationVisible) &amp;&amp; this.getValue().length &lt;= this.options.validationThreshold)\n          return;\n\n      if (this.options.debounce) {\n        window.clearTimeout(this._debounced);\n        this._debounced = window.setTimeout(() =&gt; this.validate(), this.options.debounce);\n      } else\n        this.validate();\n    },\n\n    _resetUI: function () {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if (&#39;undefined&#39; === typeof this._ui)\n        return;\n\n      // Reset all errors&#39; li\n      this._ui.$errorsWrapper\n        .removeClass(&#39;filled&#39;)\n        .children()\n        .remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function () {\n      this._resetUI();\n\n      if (&#39;undefined&#39; !== typeof this._ui)\n        this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function () {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var Form = function (element, domOptions, options) {\n    this.__class__ = &#39;Form&#39;;\n\n    this.element = element;\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var Form__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  Form.prototype = {\n    onSubmitValidate: function (event) {\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley)\n        return;\n\n      // If we didn&#39;t come here through a submit button, use the first one in the form\n      var submitSource = this._submitSource || this.$element.find(Utils._SubmitSelector)[0];\n      this._submitSource = null;\n      this.$element.find(&#39;.parsley-synthetic-submit-button&#39;).prop(&#39;disabled&#39;, true);\n      if (submitSource &amp;&amp; null !== submitSource.getAttribute(&#39;formnovalidate&#39;))\n        return;\n\n      window.Parsley._remoteCache = {};\n\n      var promise = this.whenValidate({event});\n\n      if (&#39;resolved&#39; === promise.state() &amp;&amp; false !== this._trigger(&#39;submit&#39;)) {\n        // All good, let event go through. We make this distinction because browsers\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\n      } else {\n        // Rejected or pending: cancel this submit\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        if (&#39;pending&#39; === promise.state())\n          promise.done(() =&gt; { this._submit(submitSource); });\n      }\n    },\n\n    onSubmitButton: function(event) {\n      this._submitSource = event.currentTarget;\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \&quot;fake\&quot; the actual submit button being clicked.\n    _submit: function (submitSource) {\n      if (false === this._trigger(&#39;submit&#39;))\n        return;\n      // Add submit button&#39;s data\n      if (submitSource) {\n        var $synthetic = this.$element.find(&#39;.parsley-synthetic-submit-button&#39;).prop(&#39;disabled&#39;, false);\n        if (0 === $synthetic.length)\n          $synthetic = $(&#39;&lt;input class=\&quot;parsley-synthetic-submit-button\&quot; type=\&quot;hidden\&quot;&gt;&#39;).appendTo(this.$element);\n        $synthetic.attr({\n          name: submitSource.getAttribute(&#39;name&#39;),\n          value: submitSource.getAttribute(&#39;value&#39;)\n        });\n      }\n\n      this.$element.trigger(Object.assign($.Event(&#39;submit&#39;), {parsley: true}));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function (options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling validate on a parsley form without passing arguments as an object is deprecated.&#39;);\n        var [group, force, event] = arguments;\n        options = {group, force, event};\n      }\n      return Form__statusMapping[ this.whenValidate(options).state() ];\n    },\n\n    whenValidate: function ({group, force, event} = {}) {\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent = Object.assign({}, event, {preventDefault: () =&gt; {\n          Utils.warnOnce(\&quot;Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\&quot;);\n          this.validationResult = false;\n        }});\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before every validation\n      this._trigger(&#39;validate&#39;);\n\n      // Refresh form DOM options and form&#39;s fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() =&gt; {\n        return $.map(this.fields, field =&gt; field.whenValidate({force, group}));\n      });\n\n      return Utils.all(promises)\n        .done(  () =&gt; { this._trigger(&#39;success&#39;); })\n        .fail(  () =&gt; {\n          this.validationResult = false;\n          this.focus();\n          this._trigger(&#39;error&#39;);\n        })\n        .always(() =&gt; { this._trigger(&#39;validated&#39;); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function (options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling isValid on a parsley form without passing arguments as an object is deprecated.&#39;);\n        var [group, force] = arguments;\n        options = {group, force};\n      }\n      return Form__statusMapping[ this.whenValid(options).state() ];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function ({group, force} = {}) {\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() =&gt; {\n        return $.map(this.fields, field =&gt; field.whenValid({group, force}));\n      });\n      return Utils.all(promises);\n    },\n\n    // Reset UI\n    reset: function () {\n      // Form case: emit a reset event for each field\n      for (var i = 0; i &lt; this.fields.length; i++)\n        this.fields[i].reset();\n\n      this._trigger(&#39;reset&#39;);\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i &lt; this.fields.length; i++)\n        this.fields[i].destroy();\n\n      this.$element.removeData(&#39;Parsley&#39;);\n      this._trigger(&#39;destroy&#39;);\n    },\n\n    _refreshFields: function () {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function () {\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(() =&gt; {\n        this.$element\n        .find(this.options.inputs)\n        .not(this.options.excluded)\n        .each((_, element) =&gt; {\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n          // Only add valid and not excluded `Field` and `FieldMultiple` children\n          if ((&#39;Field&#39; === fieldInstance.__class__ || &#39;FieldMultiple&#39; === fieldInstance.__class__) &amp;&amp; (true !== fieldInstance.options.excluded)) {\n            let uniqueId = fieldInstance.__class__ + &#39;-&#39; + fieldInstance.__id__;\n            if (&#39;undefined&#39; === typeof this.fieldsMappedById[uniqueId]) {\n              this.fieldsMappedById[uniqueId] = fieldInstance;\n              this.fields.push(fieldInstance);\n            }\n          }\n        });\n\n        $.each(Utils.difference(oldFields, this.fields), (_, field) =&gt; {\n          field.reset();\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form&#39;s fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form&#39;s options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function (fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () { return this; };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function (eventName) {\n      return this.trigger(&#39;form:&#39; + eventName);\n    }\n\n  };\n\n  const Constraint = function(parsleyField, name, requirements, priority, isDomConstraint) {\n    const validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    const validator = new Validator(validatorSpec);\n    priority = priority || parsleyField.options[name + &#39;Priority&#39;] || validator.priority;\n    isDomConstraint = (true === isDomConstraint);\n\n    Object.assign(this, {\n      validator,\n      name,\n      requirements,\n      priority,\n      isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  const capitalize = function(str) {\n    const cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  Constraint.prototype = {\n    validate: function(value, instance) {\n      return this.validator.validate(value, ...this.requirementList, instance);\n    },\n\n    _parseRequirements: function(options) {\n      this.requirementList = this.validator.parseRequirements(this.requirements,\n        key =&gt; options[this.name + capitalize(key)]\n      );\n    }\n  };\n\n  var Field = function (field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = &#39;Field&#39;;\n\n    this.element = field;\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if (&#39;undefined&#39; !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = true;\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  Field.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `UI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function (options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling validate on a parsley field without passing arguments as an object is deprecated.&#39;);\n        options = {options};\n      }\n      var promise = this.whenValidate(options);\n      if (!promise)  // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case &#39;pending&#39;: return null;\n        case &#39;resolved&#39;: return true;\n        case &#39;rejected&#39;: return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `UI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function ({force, group} =  {}) {\n      // do not validate a field if not the same as given validation group\n      this.refreshConstraints();\n      if (group &amp;&amp; !this._isInGroup(group))\n        return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger(&#39;validate&#39;);\n\n      return this.whenValid({force, value: this.value, _refreshed: true})\n        .always(() =&gt; { this._reflowUI(); })\n        .done(() =&gt;   { this._trigger(&#39;success&#39;); })\n        .fail(() =&gt;   { this._trigger(&#39;error&#39;); })\n        .always(() =&gt; { this._trigger(&#39;validated&#39;); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    hasConstraints: function () {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function (value) {\n      if (&#39;undefined&#39; === typeof value)\n        value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length &amp;&amp; !this._isRequired() &amp;&amp; &#39;undefined&#39; === typeof this.options.validateIfEmpty)\n        return false;\n\n      return true;\n    },\n\n    _isInGroup: function (group) {\n      if (Array.isArray(this.options.group))\n        return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function (options) {\n      if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n        Utils.warnOnce(&#39;Calling isValid on a parsley field without passing arguments as an object is deprecated.&#39;);\n        var [force, value] = arguments;\n        options = {force, value};\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed)\n        this.refreshConstraints();\n      // do not validate a field if not the same as given validation group\n      if (group &amp;&amp; !this._isInGroup(group))\n        return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints())\n        return $.when();\n\n      // Value could be passed as argument, needed to add more power to &#39;field:validate&#39;\n      if (&#39;undefined&#39; === typeof value || null === value)\n        value = this.getValue();\n\n      if (!this.needsValidation(value) &amp;&amp; true !== force)\n        return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, (_, constraints) =&gt; {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = Utils.all(\n          $.map(constraints, constraint =&gt; this._validateConstraint(value, constraint))\n        );\n        promises.push(promise);\n        if (promise.state() === &#39;rejected&#39;)\n          return false; // Interrupt processing if a group has already failed\n      });\n      return Utils.all(promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function(value, constraint) {\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result)\n        result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return Utils.all([result]).fail(errorMessage =&gt; {\n        if (!(this.validationResult instanceof Array))\n          this.validationResult = [];\n        this.validationResult.push({\n          assert: constraint,\n          errorMessage: &#39;string&#39; === typeof errorMessage &amp;&amp; errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function () {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if (&#39;function&#39; === typeof this.options.value)\n        value = this.options.value(this);\n      else if (&#39;undefined&#39; !== typeof this.options.value)\n        value = this.options.value;\n      else\n        value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if (&#39;undefined&#39; === typeof value || null === value)\n        return &#39;&#39;;\n\n      return this._handleWhitespace(value);\n    },\n\n    // Reset UI\n    reset: function () {\n      this._resetUI();\n      return this._trigger(&#39;reset&#39;);\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n      this.$element.removeData(&#39;Parsley&#39;);\n      this.$element.removeData(&#39;FieldMultiple&#39;);\n      this._trigger(&#39;destroy&#39;);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function () {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if (&#39;undefined&#39; !== this.constraintsByName[constraint.name])\n          this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function (name) {\n      for (var i = 0; i &lt; this.constraints.length; i++)\n        if (name === this.constraints[i].name) {\n          this.constraints.splice(i, 1);\n          break;\n        }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function (name, parameters, priority) {\n      return this.removeConstraint(name)\n        .addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function () {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i &lt; this.constraints.length; i++)\n        if (false === this.constraints[i].isDomConstraint) {\n          constraints.push(this.constraints[i]);\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\n        }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options)\n        this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function () {\n      // html5 required\n      if (null !== this.element.getAttribute(&#39;required&#39;))\n        this.addConstraint(&#39;required&#39;, true, undefined, true);\n\n      // html5 pattern\n      if (null !== this.element.getAttribute(&#39;pattern&#39;))\n        this.addConstraint(&#39;pattern&#39;, this.element.getAttribute(&#39;pattern&#39;), undefined, true);\n\n      // range\n      let min = this.element.getAttribute(&#39;min&#39;);\n      let max = this.element.getAttribute(&#39;max&#39;);\n      if (null !== min &amp;&amp; null !== max)\n        this.addConstraint(&#39;range&#39;, [min, max], undefined, true);\n\n      // HTML5 min\n      else if (null !== min)\n        this.addConstraint(&#39;min&#39;, min, undefined, true);\n\n      // HTML5 max\n      else if (null !== max)\n        this.addConstraint(&#39;max&#39;, max, undefined, true);\n\n\n      // length\n      if (null !== this.element.getAttribute(&#39;minlength&#39;) &amp;&amp; null !== this.element.getAttribute(&#39;maxlength&#39;))\n        this.addConstraint(&#39;length&#39;, [this.element.getAttribute(&#39;minlength&#39;), this.element.getAttribute(&#39;maxlength&#39;)], undefined, true);\n\n      // HTML5 minlength\n      else if (null !== this.element.getAttribute(&#39;minlength&#39;))\n        this.addConstraint(&#39;minlength&#39;, this.element.getAttribute(&#39;minlength&#39;), undefined, true);\n\n      // HTML5 maxlength\n      else if (null !== this.element.getAttribute(&#39;maxlength&#39;))\n        this.addConstraint(&#39;maxlength&#39;, this.element.getAttribute(&#39;maxlength&#39;), undefined, true);\n\n\n      // html5 types\n      var type = this.element.type;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if (&#39;number&#39; === type) {\n        return this.addConstraint(&#39;type&#39;, [&#39;number&#39;, {\n          step: this.element.getAttribute(&#39;step&#39;) || &#39;1&#39;,\n          base: min || this.element.getAttribute(&#39;value&#39;)\n        }], undefined, true);\n      // Regular other HTML5 supported types\n      } else if (/^(email|url|range|date)$/i.test(type)) {\n        return this.addConstraint(&#39;type&#39;, type, undefined, true);\n      }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n      if (&#39;undefined&#39; === typeof this.constraintsByName.required)\n        return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function (eventName) {\n      return this.trigger(&#39;field:&#39; + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\&quot;squish\&quot;` to auto squish input value\n    // Use `data-parsley-whitespace=\&quot;trim\&quot;` to auto trim input value\n    _handleWhitespace: function (value) {\n      if (true === this.options.trimValue)\n        Utils.warnOnce(&#39;data-parsley-trim-value=\&quot;true\&quot; is deprecated, please use data-parsley-whitespace=\&quot;trim\&quot;&#39;);\n\n      if (&#39;squish&#39; === this.options.whitespace)\n        value = value.replace(/\\s{2,}/g, &#39; &#39;);\n\n      if ((&#39;trim&#39; === this.options.whitespace) || (&#39;squish&#39; === this.options.whitespace) || (true === this.options.trimValue))\n        value = Utils.trimString(value);\n\n      return value;\n    },\n\n    _isDateInput: function() {\n      var c = this.constraintsByName.type;\n      return c &amp;&amp; c.requirements === &#39;date&#39;;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function () {\n      if (false === this.options.priorityEnabled)\n        return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i &lt; this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p])\n          groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = Field;\n\n  var Multiple = function () {\n    this.__class__ = &#39;FieldMultiple&#39;;\n  };\n\n  Multiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function ($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `Field.refreshConstraints()`\n    refreshConstraints: function () {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.element.nodeName === &#39;SELECT&#39;) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i &lt; this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$(&#39;html&#39;).has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data(&#39;FieldMultiple&#39;).refreshConstraints().constraints;\n\n        for (var j = 0; j &lt; fieldConstraints.length; j++)\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `Field.getValue()`\n    getValue: function () {\n      // Value could be overriden in DOM\n      if (&#39;function&#39; === typeof this.options.value)\n        return this.options.value(this);\n      else if (&#39;undefined&#39; !== typeof this.options.value)\n        return this.options.value;\n\n      // Radio input case\n      if (this.element.nodeName === &#39;INPUT&#39;) {\n        if (this.element.type === &#39;radio&#39;)\n          return this._findRelated().filter(&#39;:checked&#39;).val() || &#39;&#39;;\n\n        // checkbox input case\n        if (this.element.type === &#39;checkbox&#39;) {\n          var values = [];\n\n          this._findRelated().filter(&#39;:checked&#39;).each(function () {\n            values.push($(this).val());\n          });\n\n          return values;\n        }\n      }\n\n      // Select multiple case\n      if (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null === this.$element.val())\n        return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function () {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var Factory = function (element, options, parsleyFormInstance) {\n    this.element = element;\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data(&#39;Parsley&#39;);\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a Form parent and there is one given in this call, add it\n      if (&#39;undefined&#39; !== typeof parsleyFormInstance &amp;&amp; savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      if (&#39;object&#39; === typeof options) {\n        Object.assign(savedparsleyFormInstance.options, options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length)\n      throw new Error(&#39;You must bind Parsley on an existing element.&#39;);\n\n    if (&#39;undefined&#39; !== typeof parsleyFormInstance &amp;&amp; &#39;Form&#39; !== parsleyFormInstance.__class__)\n      throw new Error(&#39;Parent instance must be a Form instance&#39;);\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  Factory.prototype = {\n    init: function (options) {\n      this.__class__ = &#39;Parsley&#39;;\n      this.__version__ = &#39;2.7.2&#39;;\n      this.__id__ = Utils.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A Form instance is obviously a `&lt;form&gt;` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.element.nodeName === &#39;FORM&#39; || (Utils.checkAttr(this.element, this.options.namespace, &#39;validate&#39;) &amp;&amp; !this.$element.is(this.options.inputs)))\n        return this.bind(&#39;parsleyForm&#39;);\n\n      // Every other element is bound as a `Field` or `FieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind(&#39;parsleyField&#39;);\n    },\n\n    isMultiple: function () {\n      return ((this.element.type === &#39;radio&#39; || this.element.type === &#39;checkbox&#39;) ||\n        (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null !== this.element.getAttribute(&#39;multiple&#39;)));\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function () {\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      this.options.multiple = this.options.multiple ||\n        (name = this.element.getAttribute(&#39;name&#39;)) ||\n        this.element.getAttribute(&#39;id&#39;);\n\n      // Special select multiple input\n      if (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null !== this.element.getAttribute(&#39;multiple&#39;)) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind(&#39;parsleyFieldMultiple&#39;);\n\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n        Utils.warn(&#39;To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.&#39;, this.$element);\n        return this;\n      }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, &#39;&#39;);\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if (name) {\n        $(&#39;input[name=\&quot;&#39; + name + &#39;\&quot;]&#39;).each((i, input) =&gt; {\n          if ((input.type === &#39;radio&#39; || input.type === &#39;checkbox&#39;))\n            input.setAttribute(this.options.namespace + &#39;multiple&#39;, this.options.multiple);\n        });\n      }\n\n      // Check here if we don&#39;t already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i &lt; $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data(&#39;Parsley&#39;);\n        if (&#39;undefined&#39; !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data(&#39;FieldMultiple&#39;)) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret Field instance for every multiple field. It will be stored in `data(&#39;FieldMultiple&#39;)`\n      // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance\n      this.bind(&#39;parsleyField&#39;, true);\n\n      return parsleyMultipleInstance || this.bind(&#39;parsleyFieldMultiple&#39;);\n    },\n\n    // Return proper `Form`, `Field` or `FieldMultiple`\n    bind: function (type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case &#39;parsleyForm&#39;:\n          parsleyInstance = $.extend(\n            new Form(this.element, this.domOptions, this.options),\n            new Base(),\n            window.ParsleyExtend\n          )._bindFields();\n          break;\n        case &#39;parsleyField&#39;:\n          parsleyInstance = $.extend(\n            new parsley_field(this.element, this.domOptions, this.options, this.parent),\n            new Base(),\n            window.ParsleyExtend\n          );\n          break;\n        case &#39;parsleyFieldMultiple&#39;:\n          parsleyInstance = $.extend(\n            new parsley_field(this.element, this.domOptions, this.options, this.parent),\n            new Multiple(),\n            new Base(),\n            window.ParsleyExtend\n          )._init();\n          break;\n        default:\n          throw new Error(type + &#39;is not a supported Parsley type&#39;);\n      }\n\n      if (this.options.multiple)\n        Utils.setAttr(this.element, this.options.namespace, &#39;multiple&#39;, this.options.multiple);\n\n      if (&#39;undefined&#39; !== typeof doNotStore) {\n        this.$element.data(&#39;FieldMultiple&#39;, parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data(&#39;Parsley&#39;, parsleyInstance);\n\n      // Tell the world we have a new Form or Field instance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._trigger(&#39;init&#39;);\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split(&#39;.&#39;);\n  if (parseInt(vernums[0]) &lt;= 1 &amp;&amp; parseInt(vernums[1]) &lt; 8) {\n    throw \&quot;The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\&quot;;\n  }\n  if (!vernums.forEach) {\n    Utils.warn(&#39;Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim&#39;);\n  }\n  // Inherit `on`, `off` &amp; `trigger` to Parsley:\n  var Parsley = Object.assign(new Base(), {\n      element: document,\n      $element: $(document),\n      actualizeOptions: null,\n      _resetOptions: null,\n      Factory: Factory,\n      version: &#39;2.7.2&#39;\n    });\n\n  // Supplement Field and Form with Base\n  // This way, the constructors will have access to those methods\n  Object.assign(parsley_field.prototype, UI.Field, Base.prototype);\n  Object.assign(Form.prototype, UI.Form, Base.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  Object.assign(Factory.prototype, Base.prototype);\n\n  // ### jQuery API\n  // `$(&#39;.elem&#39;).parsley(options)` or `$(&#39;.elem&#39;).psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length &gt; 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      Utils.warn(&#39;You must bind Parsley on an existing element.&#39;);\n\n      return;\n    }\n\n    return new Factory(this[0], options);\n  };\n\n  // ### Field and Form extension\n  // Ensure the extension is now defined if it wasn&#39;t previously\n  if (&#39;undefined&#39; === typeof window.ParsleyExtend)\n    window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = Object.assign(Utils.objectCreate(Defaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  Parsley.Utils = Utils;\n  window.ParsleyUtils = {};\n  $.each(Utils, (key, value) =&gt; {\n    if (&#39;function&#39; === typeof value) {\n      window.ParsleyUtils[key] = (...args) =&gt; {\n        Utils.warnOnce(&#39;Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.&#39;);\n        return Utils[key](...args);\n      };\n    }\n  });\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each(&#39;setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator&#39;.split(&#39; &#39;), function (i, method) {\n    window.Parsley[method] = (...args) =&gt; registry[method](...args);\n    window.ParsleyValidator[method] = function () {\n      Utils.warnOnce(`Accessing the method &#39;${method}&#39; through Validator is deprecated. Simply call &#39;window.Parsley.${method}(...)&#39;`);\n      return window.Parsley[method](...arguments);\n    };\n  });\n\n  // ### UI\n  // Deprecated global object\n  window.Parsley.UI = UI;\n  window.ParsleyUI = {\n    removeError: function (instance, name, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(`Accessing UI is deprecated. Call &#39;removeError&#39; on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance.removeError(name, {updateClass});\n    },\n    getErrorsMessages: function (instance) {\n      Utils.warnOnce(`Accessing UI is deprecated. Call &#39;getErrorsMessages&#39; on the instance directly.`);\n      return instance.getErrorsMessages();\n    }\n  };\n  $.each(&#39;addError updateError&#39;.split(&#39; &#39;), function (i, method) {\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(`Accessing UI is deprecated. Call &#39;${method}&#39; on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance[method](name, {message, assert, updateClass});\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($(&#39;[data-parsley-validate]&#39;).length)\n        $(&#39;[data-parsley-validate]&#39;).parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function () {\n    Utils.warnOnce(\&quot;Parsley&#39;s pubsub module is deprecated; use the &#39;on&#39; and &#39;off&#39; methods on parsley instances or window.Parsley\&quot;);\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = &#39;parsley:&#39;;\n  // Converts &#39;parsley:form:validate&#39; into &#39;form:validate&#39;\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\n      return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if (&#39;object&#39; === typeof arguments[1] &amp;&amp; &#39;function&#39; === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if (&#39;function&#39; !== typeof callback)\n      throw new Error(&#39;Wrong parameters&#39;);\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) &amp;&amp; !(instance instanceof Form))\n      throw new Error(&#39;Must give Parsley instance&#39;);\n\n    if (&#39;string&#39; !== typeof name || &#39;function&#39; !== typeof fn)\n      throw new Error(&#39;Wrong parameters&#39;);\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if (&#39;string&#39; !== typeof name || &#39;function&#39; !== typeof fn)\n      throw new Error(&#39;Wrong arguments&#39;);\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) &amp;&amp; !(instance instanceof Form))\n      throw new Error(&#39;Must give Parsley instance&#39;);\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $(&#39;form,input,textarea,select&#39;).each(function () {\n      var instance = $(this).data(&#39;Parsley&#39;);\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    deprecated();\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof Form);\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    instance.trigger(...args);\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      &#39;default&#39;: {\n        fn: function (xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === &#39;rejected&#39;.\n          return xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function (xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status &lt; 200 || xhr.status &gt;= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function (name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator(&#39;remote&#39;, {\n    requirementType: {\n      &#39;&#39;: &#39;string&#39;,\n      &#39;validator&#39;: &#39;string&#39;,\n      &#39;reverse&#39;: &#39;boolean&#39;,\n      &#39;options&#39;: &#39;object&#39;\n    },\n\n    validateString: function (value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? &#39;reverse&#39; : &#39;default&#39;);\n\n      if (&#39;undefined&#39; === typeof Parsley.asyncValidators[validator])\n        throw new Error(&#39;Calling an undefined async validator: `&#39; + validator + &#39;`&#39;);\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf(&#39;{value}&#39;) &gt; -1) {\n        url = url.replace(&#39;{value}&#39;, encodeURIComponent(value));\n      } else {\n        data[instance.element.getAttribute(&#39;name&#39;) || instance.element.getAttribute(&#39;id&#39;)] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: &#39;GET&#39;\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger(&#39;field:ajaxoptions&#39;, instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if (&#39;undefined&#39; === typeof Parsley._remoteCache)\n        Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function () {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on(&#39;form:submit&#39;, function () {\n    Parsley._remoteCache = {};\n  });\n\n  Base.prototype.addAsyncValidator = function () {\n    Utils.warnOnce(&#39;Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`&#39;);\n    return Parsley.addAsyncValidator(...arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages(&#39;en&#39;, {\n    defaultMessage: \&quot;This value seems to be invalid.\&quot;,\n    type: {\n      email:        \&quot;This value should be a valid email.\&quot;,\n      url:          \&quot;This value should be a valid url.\&quot;,\n      number:       \&quot;This value should be a valid number.\&quot;,\n      integer:      \&quot;This value should be a valid integer.\&quot;,\n      digits:       \&quot;This value should be digits.\&quot;,\n      alphanum:     \&quot;This value should be alphanumeric.\&quot;\n    },\n    notblank:       \&quot;This value should not be blank.\&quot;,\n    required:       \&quot;This value is required.\&quot;,\n    pattern:        \&quot;This value seems to be invalid.\&quot;,\n    min:            \&quot;This value should be greater than or equal to %s.\&quot;,\n    max:            \&quot;This value should be lower than or equal to %s.\&quot;,\n    range:          \&quot;This value should be between %s and %s.\&quot;,\n    minlength:      \&quot;This value is too short. It should have %s characters or more.\&quot;,\n    maxlength:      \&quot;This value is too long. It should have %s characters or fewer.\&quot;,\n    length:         \&quot;This value length is invalid. It should be between %s and %s characters long.\&quot;,\n    mincheck:       \&quot;You must select at least %s choices.\&quot;,\n    maxcheck:       \&quot;You must select %s choices or fewer.\&quot;,\n    check:          \&quot;You must select between %s and %s choices.\&quot;,\n    equalto:        \&quot;This value should be the same.\&quot;\n  });\n\n  Parsley.setLocale(&#39;en&#39;);\n\n  /**\n   * inputevent - Alleviate browser bugs for input events\n   * https://github.com/marcandre/inputevent\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n   * @author Marc-Andre Lafortune &lt;github@marc-andre.ca&gt;\n   * @license MIT\n   */\n\n  function InputEvent() {\n    let globals = window || global;\n\n    // Slightly odd way construct our object. This way methods are force bound.\n    // Used to test for duplicate library.\n    Object.assign(this, {\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: evt =&gt; {\n        return evt.originalEvent &amp;&amp; evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: evt =&gt; {\n        if (this.isNativeEvent(evt)) {\n          $(evt.target).trigger(&#39;input&#39;);\n        }\n      },\n\n      misbehaves: evt =&gt; {\n        if (this.isNativeEvent(evt)) {\n          this.behavesOk(evt);\n          $(document)\n            .on(&#39;change.inputevent&#39;, evt.data.selector, this.fakeInputEvent);\n          this.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: evt =&gt; {\n        if (this.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n            .off(&#39;input.inputevent&#39;, evt.data.selector, this.behavesOk)\n            .off(&#39;change.inputevent&#39;, evt.data.selector, this.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: () =&gt; {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = &#39;0.0.3&#39;;\n        for (let selector of [&#39;select&#39;, &#39;input[type=\&quot;checkbox\&quot;]&#39;, &#39;input[type=\&quot;radio\&quot;]&#39;, &#39;input[type=\&quot;file\&quot;]&#39;]) {\n          $(document)\n            .on(&#39;input.inputevent&#39;, selector, {selector}, this.behavesOk)\n            .on(&#39;change.inputevent&#39;, selector, {selector}, this.misbehaves);\n        }\n      },\n\n      uninstall: () =&gt; {\n        delete globals.inputEventPatched;\n        $(document).off(&#39;.inputevent&#39;);\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  inputevent.install();\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Field from &#39;./field&#39;;\nimport Form from &#39;./form&#39;;\nimport Utils from &#39;./utils&#39;;\n\nvar o = $({});\nvar deprecated = function () {\n  Utils.warnOnce(\&quot;Parsley&#39;s pubsub module is deprecated; use the &#39;on&#39; and &#39;off&#39; methods on parsley instances or window.Parsley\&quot;);\n};\n\n// Returns an event handler that calls `fn` with the arguments it expects\nfunction adapt(fn, context) {\n  // Store to allow unbinding\n  if (!fn.parsleyAdaptedCallback) {\n    fn.parsleyAdaptedCallback = function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      args.unshift(this);\n      fn.apply(context || o, args);\n    };\n  }\n  return fn.parsleyAdaptedCallback;\n}\n\nvar eventPrefix = &#39;parsley:&#39;;\n// Converts &#39;parsley:form:validate&#39; into &#39;form:validate&#39;\nfunction eventName(name) {\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\n    return name.substr(eventPrefix.length);\n  return name;\n}\n\n// $.listen is deprecated. Use Parsley.on instead.\n$.listen = function (name, callback) {\n  var context;\n  deprecated();\n  if (&#39;object&#39; === typeof arguments[1] &amp;&amp; &#39;function&#39; === typeof arguments[2]) {\n    context = arguments[1];\n    callback = arguments[2];\n  }\n\n  if (&#39;function&#39; !== typeof callback)\n    throw new Error(&#39;Wrong parameters&#39;);\n\n  window.Parsley.on(eventName(name), adapt(callback, context));\n};\n\n$.listenTo = function (instance, name, fn) {\n  deprecated();\n  if (!(instance instanceof Field) &amp;&amp; !(instance instanceof Form))\n    throw new Error(&#39;Must give Parsley instance&#39;);\n\n  if (&#39;string&#39; !== typeof name || &#39;function&#39; !== typeof fn)\n    throw new Error(&#39;Wrong parameters&#39;);\n\n  instance.on(eventName(name), adapt(fn));\n};\n\n$.unsubscribe = function (name, fn) {\n  deprecated();\n  if (&#39;string&#39; !== typeof name || &#39;function&#39; !== typeof fn)\n    throw new Error(&#39;Wrong arguments&#39;);\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n};\n\n$.unsubscribeTo = function (instance, name) {\n  deprecated();\n  if (!(instance instanceof Field) &amp;&amp; !(instance instanceof Form))\n    throw new Error(&#39;Must give Parsley instance&#39;);\n  instance.off(eventName(name));\n};\n\n$.unsubscribeAll = function (name) {\n  deprecated();\n  window.Parsley.off(eventName(name));\n  $(&#39;form,input,textarea,select&#39;).each(function () {\n    var instance = $(this).data(&#39;Parsley&#39;);\n    if (instance) {\n      instance.off(eventName(name));\n    }\n  });\n};\n\n// $.emit is deprecated. Use jQuery events instead.\n$.emit = function (name, instance) {\n  deprecated();\n  var instanceGiven = (instance instanceof Field) || (instance instanceof Form);\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n  args.unshift(eventName(name));\n  if (!instanceGiven) {\n    instance = window.Parsley;\n  }\n  instance.trigger(...args);\n};\n\nexport default {};\n&quot;,&quot;/**\n * inputevent - Alleviate browser bugs for input events\n * https://github.com/marcandre/inputevent\n * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n * @author Marc-Andre Lafortune &lt;github@marc-andre.ca&gt;\n * @license MIT\n */\n\nimport $ from &#39;jquery&#39;;\n\nfunction InputEvent() {\n  let globals = window || global;\n\n  // Slightly odd way construct our object. This way methods are force bound.\n  // Used to test for duplicate library.\n  Object.assign(this, {\n\n    // For browsers that do not support isTrusted, assumes event is native.\n    isNativeEvent: evt =&gt; {\n      return evt.originalEvent &amp;&amp; evt.originalEvent.isTrusted !== false;\n    },\n\n    fakeInputEvent: evt =&gt; {\n      if (this.isNativeEvent(evt)) {\n        $(evt.target).trigger(&#39;input&#39;);\n      }\n    },\n\n    misbehaves: evt =&gt; {\n      if (this.isNativeEvent(evt)) {\n        this.behavesOk(evt);\n        $(document)\n          .on(&#39;change.inputevent&#39;, evt.data.selector, this.fakeInputEvent);\n        this.fakeInputEvent(evt);\n      }\n    },\n\n    behavesOk: evt =&gt; {\n      if (this.isNativeEvent(evt)) {\n        $(document) // Simply unbinds the testing handler\n          .off(&#39;input.inputevent&#39;, evt.data.selector, this.behavesOk)\n          .off(&#39;change.inputevent&#39;, evt.data.selector, this.misbehaves);\n      }\n    },\n\n    // Bind the testing handlers\n    install: () =&gt; {\n      if (globals.inputEventPatched) {\n        return;\n      }\n      globals.inputEventPatched = &#39;0.0.3&#39;;\n      for (let selector of [&#39;select&#39;, &#39;input[type=\&quot;checkbox\&quot;]&#39;, &#39;input[type=\&quot;radio\&quot;]&#39;, &#39;input[type=\&quot;file\&quot;]&#39;]) {\n        $(document)\n          .on(&#39;input.inputevent&#39;, selector, {selector}, this.behavesOk)\n          .on(&#39;change.inputevent&#39;, selector, {selector}, this.misbehaves);\n      }\n    },\n\n    uninstall: () =&gt; {\n      delete globals.inputEventPatched;\n      $(document).off(&#39;.inputevent&#39;);\n    }\n\n  });\n};\n\nexport default new InputEvent();\n&quot;,&quot;import $ from &#39;jquery&#39;;\n\nvar globalID = 1;\nvar pastWarnings = {};\n\nvar Utils = {\n  // Parsley DOM-API\n  // returns object from dom attributes and values\n  attr: function (element, namespace, obj) {\n    var i;\n    var attribute;\n    var attributes;\n    var regex = new RegExp(&#39;^&#39; + namespace, &#39;i&#39;);\n\n    if (&#39;undefined&#39; === typeof obj)\n      obj = {};\n    else {\n      // Clear all own properties. This won&#39;t affect prototype&#39;s values\n      for (i in obj) {\n        if (obj.hasOwnProperty(i))\n          delete obj[i];\n      }\n    }\n\n    if (!element)\n      return obj;\n\n    attributes = element.attributes;\n    for (i = attributes.length; i--; ) {\n      attribute = attributes[i];\n\n      if (attribute &amp;&amp; attribute.specified &amp;&amp; regex.test(attribute.name)) {\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n      }\n    }\n\n    return obj;\n  },\n\n  checkAttr: function (element, namespace, checkAttr) {\n    return element.hasAttribute(namespace + checkAttr);\n  },\n\n  setAttr: function (element, namespace, attr, value) {\n    element.setAttribute(this.dasherize(namespace + attr), String(value));\n  },\n\n  generateID: function () {\n    return &#39;&#39; + globalID++;\n  },\n\n  /** Third party functions **/\n  // Zepto deserialize function\n  deserializeValue: function (value) {\n    var num;\n\n    try {\n      return value ?\n        value == \&quot;true\&quot; ||\n        (value == \&quot;false\&quot; ? false :\n        value == \&quot;null\&quot; ? null :\n        !isNaN(num = Number(value)) ? num :\n        /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n        value)\n        : value;\n    } catch (e) { return value; }\n  },\n\n  // Zepto camelize function\n  camelize: function (str) {\n    return str.replace(/-+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : &#39;&#39;;\n    });\n  },\n\n  // Zepto dasherize function\n  dasherize: function (str) {\n    return str.replace(/::/g, &#39;/&#39;)\n      .replace(/([A-Z]+)([A-Z][a-z])/g, &#39;$1_$2&#39;)\n      .replace(/([a-z\\d])([A-Z])/g, &#39;$1_$2&#39;)\n      .replace(/_/g, &#39;-&#39;)\n      .toLowerCase();\n  },\n\n  warn: function () {\n    if (window.console &amp;&amp; &#39;function&#39; === typeof window.console.warn)\n      window.console.warn(...arguments);\n  },\n\n  warnOnce: function(msg) {\n    if (!pastWarnings[msg]) {\n      pastWarnings[msg] = true;\n      this.warn(...arguments);\n    }\n  },\n\n  _resetWarnings: function () {\n    pastWarnings = {};\n  },\n\n  trimString: function(string) {\n    return string.replace(/^\\s+|\\s+$/g, &#39;&#39;);\n  },\n\n  parse: {\n    date: function(string) {\n      let parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n      if (!parsed)\n        return null;\n      let [_, year, month, day] = parsed.map(x =&gt; parseInt(x, 10));\n      let date = new Date(year, month - 1, day);\n      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day)\n        return null;\n      return date;\n    },\n    string: function(string) {\n      return string;\n    },\n    integer: function(string) {\n      if (isNaN(string))\n        return null;\n      return parseInt(string, 10);\n    },\n    number: function(string) {\n      if (isNaN(string))\n        throw null;\n      return parseFloat(string);\n    },\n    &#39;boolean&#39;: function _boolean(string) {\n      return !(/^\\s*false\\s*$/i.test(string));\n    },\n    object: function(string) {\n      return Utils.deserializeValue(string);\n    },\n    regexp: function(regexp) {\n      var flags = &#39;&#39;;\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = regexp.replace(/.*\\/([gimy]*)$/, &#39;$1&#39;);\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        regexp = regexp.replace(new RegExp(&#39;^/(.*?)/&#39; + flags + &#39;$&#39;), &#39;$1&#39;);\n      } else {\n        // Anchor regexp:\n        regexp = &#39;^&#39; + regexp + &#39;$&#39;;\n      }\n      return new RegExp(regexp, flags);\n    }\n  },\n\n  parseRequirement: function(requirementType, string) {\n    var converter = this.parse[requirementType || &#39;string&#39;];\n    if (!converter)\n      throw &#39;Unknown requirement specification: \&quot;&#39; + requirementType + &#39;\&quot;&#39;;\n    let converted = converter(string);\n    if (converted === null)\n      throw `Requirement is not a ${requirementType}: \&quot;${string}\&quot;`;\n    return converted;\n  },\n\n  namespaceEvents: function(events, namespace) {\n    events = this.trimString(events || &#39;&#39;).split(/\\s+/);\n    if (!events[0])\n      return &#39;&#39;;\n    return $.map(events, evt =&gt; `${evt}.${namespace}`).join(&#39; &#39;);\n  },\n\n  difference: function(array, remove) {\n    // This is O(N^2), should be optimized\n    let result = [];\n    $.each(array, (_, elem) =&gt; {\n      if (remove.indexOf(elem) == -1)\n        result.push(elem);\n    });\n    return result;\n  },\n\n  // Alter-ego to native Promise.all, but for jQuery\n  all: function(promises) {\n    // jQuery treats $.when() and $.when(singlePromise) differently; let&#39;s avoid that and add spurious elements\n    return $.when(...promises, 42, 42);\n  },\n\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n  objectCreate: Object.create || (function () {\n    var Object = function () {};\n    return function (prototype) {\n      if (arguments.length &gt; 1) {\n        throw Error(&#39;Second argument not supported&#39;);\n      }\n      if (typeof prototype != &#39;object&#39;) {\n        throw TypeError(&#39;Argument must be an object&#39;);\n      }\n      Object.prototype = prototype;\n      var result = new Object();\n      Object.prototype = null;\n      return result;\n    };\n  })(),\n\n  _SubmitSelector: &#39;input[type=\&quot;submit\&quot;], button:submit&#39;\n};\n\nexport default Utils;\n&quot;,&quot;// All these options could be overriden and specified directly in DOM using\n// `data-parsley-` default DOM-API\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\&quot;input, textarea\&quot;`\n// eg: `data-parsley-stop-on-first-failing-constraint=\&quot;false\&quot;`\n\nvar Defaults = {\n  // ### General\n\n  // Default data-namespace for DOM API\n  namespace: &#39;data-parsley-&#39;,\n\n  // Supported inputs by default\n  inputs: &#39;input, textarea, select&#39;,\n\n  // Excluded inputs by default\n  excluded: &#39;input[type=button], input[type=submit], input[type=reset], input[type=hidden]&#39;,\n\n  // Stop validating field on highest priority failing constraint\n  priorityEnabled: true,\n\n  // ### Field only\n\n  // identifier used to group together inputs (e.g. radio buttons...)\n  multiple: null,\n\n  // identifier (or array of identifiers) used to validate only a select group of inputs\n  group: null,\n\n  // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n\n  // Key events threshold before validation\n  validationThreshold: 3,\n\n  // Focused field on form validation error. &#39;first&#39;|&#39;last&#39;|&#39;none&#39;\n  focus: &#39;first&#39;,\n\n  // event(s) that will trigger validation before first failure. eg: `input`...\n  trigger: false,\n\n  // event(s) that will trigger validation after first failure.\n  triggerAfterFailure: &#39;input&#39;,\n\n  // Class that would be added on every failing validation Parsley field\n  errorClass: &#39;parsley-error&#39;,\n\n  // Same for success validation\n  successClass: &#39;parsley-success&#39;,\n\n  // Return the `$element` that will receive these above success or error classes\n  // Could also be (and given directly from DOM) a valid selector like `&#39;#div&#39;`\n  classHandler: function (Field) {},\n\n  // Return the `$element` where errors will be appended\n  // Could also be (and given directly from DOM) a valid selector like `&#39;#div&#39;`\n  errorsContainer: function (Field) {},\n\n  // ul elem that would receive errors&#39; list\n  errorsWrapper: &#39;&lt;ul class=\&quot;parsley-errors-list\&quot;&gt;&lt;/ul&gt;&#39;,\n\n  // li elem that would receive error message\n  errorTemplate: &#39;&lt;li&gt;&lt;/li&gt;&#39;\n};\n\nexport default Defaults;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Utils from &#39;./utils&#39;;\n\nvar Base = function () {\n  this.__id__ = Utils.generateID();\n};\n\nBase.prototype = {\n  asyncSupport: true, // Deprecated\n\n  _pipeAccordingToValidationResult: function () {\n    var pipe = () =&gt; {\n      var r = $.Deferred();\n      if (true !== this.validationResult)\n        r.reject();\n      return r.resolve().promise();\n    };\n    return [pipe, pipe];\n  },\n\n  actualizeOptions: function () {\n    Utils.attr(this.element, this.options.namespace, this.domOptions);\n    if (this.parent &amp;&amp; this.parent.actualizeOptions)\n      this.parent.actualizeOptions();\n    return this;\n  },\n\n  _resetOptions: function (initOptions) {\n    this.domOptions = Utils.objectCreate(this.parent.options);\n    this.options = Utils.objectCreate(this.domOptions);\n    // Shallow copy of ownProperties of initOptions:\n    for (var i in initOptions) {\n      if (initOptions.hasOwnProperty(i))\n        this.options[i] = initOptions[i];\n    }\n    this.actualizeOptions();\n  },\n\n  _listeners: null,\n\n  // Register a callback for the given event name\n  // Callback is called with context as the first argument and the `this`\n  // The context is the current parsley instance, or window.Parsley if global\n  // A return value of `false` will interrupt the calls\n  on: function (name, fn) {\n    this._listeners = this._listeners || {};\n    var queue = this._listeners[name] = this._listeners[name] || [];\n    queue.push(fn);\n\n    return this;\n  },\n\n  // Deprecated. Use `on` instead\n  subscribe: function(name, fn) {\n    $.listenTo(this, name.toLowerCase(), fn);\n  },\n\n  // Unregister a callback (or all if none is given) for the given event name\n  off: function (name, fn) {\n    var queue = this._listeners &amp;&amp; this._listeners[name];\n    if (queue) {\n      if (!fn) {\n        delete this._listeners[name];\n      } else {\n        for (var i = queue.length; i--; )\n          if (queue[i] === fn)\n            queue.splice(i, 1);\n      }\n    }\n    return this;\n  },\n\n  // Deprecated. Use `off`\n  unsubscribe: function(name, fn) {\n    $.unsubscribeTo(this, name.toLowerCase());\n  },\n\n  // Trigger an event of the given name\n  // A return value of `false` interrupts the callback chain\n  // Returns false if execution was interrupted\n  trigger: function (name, target, extraArg) {\n    target = target || this;\n    var queue = this._listeners &amp;&amp; this._listeners[name];\n    var result;\n    var parentResult;\n    if (queue) {\n      for (var i = queue.length; i--; ) {\n        result = queue[i].call(target, target, extraArg);\n        if (result === false) return result;\n      }\n    }\n    if (this.parent) {\n      return this.parent.trigger(name, target, extraArg);\n    }\n    return true;\n  },\n\n  asyncIsValid: function (group, force) {\n    Utils.warnOnce(\&quot;asyncIsValid is deprecated; please use whenValid instead\&quot;);\n    return this.whenValid({group, force});\n  },\n\n  _findRelated: function () {\n    return this.options.multiple ?\n      $(this.parent.element.querySelectorAll(`[${this.options.namespace}multiple=\&quot;${this.options.multiple}\&quot;]`))\n    : this.$element;\n  }\n};\n\nexport default Base;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Utils from &#39;./utils&#39;;\n\nvar convertArrayRequirement = function(string, length) {\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n  if (!m)\n    throw &#39;Requirement is not an array: \&quot;&#39; + string + &#39;\&quot;&#39;;\n  var values = m[1].split(&#39;,&#39;).map(Utils.trimString);\n  if (values.length !== length)\n    throw &#39;Requirement has &#39; + values.length + &#39; values when &#39; + length + &#39; are needed&#39;;\n  return values;\n};\n\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n  var main = null;\n  var extra = {};\n  for (var key in requirementSpec) {\n    if (key) {\n      var value = extraOptionReader(key);\n      if (&#39;string&#39; === typeof value)\n        value = Utils.parseRequirement(requirementSpec[key], value);\n      extra[key] = value;\n    } else {\n      main = Utils.parseRequirement(requirementSpec[key], string);\n    }\n  }\n  return [main, extra];\n};\n\n// A Validator needs to implement the methods `validate` and `parseRequirements`\n\nvar Validator = function(spec) {\n  $.extend(true, this, spec);\n};\n\nValidator.prototype = {\n  // Returns `true` iff the given `value` is valid according the given requirements.\n  validate: function(value, requirementFirstArg) {\n    if (this.fn) { // Legacy style validator\n\n      if (arguments.length &gt; 3)  // If more args then value, requirement, instance...\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n      return this.fn(value, requirementFirstArg);\n    }\n\n    if (Array.isArray(value)) {\n      if (!this.validateMultiple)\n        throw &#39;Validator `&#39; + this.name + &#39;` does not handle multiple values&#39;;\n      return this.validateMultiple(...arguments);\n    } else {\n      let instance = arguments[arguments.length - 1];\n      if (this.validateDate &amp;&amp; instance._isDateInput()) {\n        arguments[0] = Utils.parse.date(arguments[0]);\n        if (arguments[0] === null)\n          return false;\n        return this.validateDate(...arguments);\n      }\n      if (this.validateNumber) {\n        if (isNaN(value))\n          return false;\n        arguments[0] = parseFloat(arguments[0]);\n        return this.validateNumber(...arguments);\n      }\n      if (this.validateString) {\n        return this.validateString(...arguments);\n      }\n      throw &#39;Validator `&#39; + this.name + &#39;` only handles multiple values&#39;;\n    }\n  },\n\n  // Parses `requirements` into an array of arguments,\n  // according to `this.requirementType`\n  parseRequirements: function(requirements, extraOptionReader) {\n    if (&#39;string&#39; !== typeof requirements) {\n      // Assume requirement already parsed\n      // but make sure we return an array\n      return Array.isArray(requirements) ? requirements : [requirements];\n    }\n    var type = this.requirementType;\n    if (Array.isArray(type)) {\n      var values = convertArrayRequirement(requirements, type.length);\n      for (var i = 0; i &lt; values.length; i++)\n        values[i] = Utils.parseRequirement(type[i], values[i]);\n      return values;\n    } else if ($.isPlainObject(type)) {\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n    } else {\n      return [Utils.parseRequirement(type, requirements)];\n    }\n  },\n  // Defaults:\n  requirementType: &#39;string&#39;,\n\n  priority: 2\n\n};\n\nexport default Validator;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Utils from &#39;./utils&#39;;\nimport Defaults from &#39;./defaults&#39;;\nimport Validator from &#39;./validator&#39;;\n\nvar ValidatorRegistry = function (validators, catalog) {\n  this.__class__ = &#39;ValidatorRegistry&#39;;\n\n  // Default Parsley locale is en\n  this.locale = &#39;en&#39;;\n\n  this.init(validators || {}, catalog || {});\n};\n\nvar typeTesters =  {\n  email: /^((([a-z]|\\d|[!#\\$%&amp;&#39;\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;&#39;\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n  integer: /^-?\\d+$/,\n\n  digits: /^\\d+$/,\n\n  alphanum: /^\\w+$/i,\n\n  date: {\n    test: value =&gt; Utils.parse.date(value) !== null\n  },\n\n  url: new RegExp(\n      \&quot;^\&quot; +\n        // protocol identifier\n        \&quot;(?:(?:https?|ftp)://)?\&quot; + // ** mod: make scheme optional\n        // user:pass authentication\n        \&quot;(?:\\\\S+(?::\\\\S*)?@)?\&quot; +\n        \&quot;(?:\&quot; +\n          // IP address exclusion\n          // private &amp; local networks\n          // \&quot;(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\&quot; +   // ** mod: allow local networks\n          // \&quot;(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\&quot; +  // ** mod: allow local networks\n          // \&quot;(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\&quot; +  // ** mod: allow local networks\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space &gt;= 224.0.0.0\n          // excludes network &amp; broacast addresses\n          // (first &amp; last IP address of each class)\n          \&quot;(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\&quot; +\n          \&quot;(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\&quot; +\n          \&quot;(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\&quot; +\n        \&quot;|\&quot; +\n          // host name\n          \&quot;(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\&quot; +\n          // domain name\n          \&quot;(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\&quot; +\n          // TLD identifier\n          \&quot;(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\&quot; +\n        \&quot;)\&quot; +\n        // port number\n        \&quot;(?::\\\\d{2,5})?\&quot; +\n        // resource path\n        \&quot;(?:/\\\\S*)?\&quot; +\n      \&quot;$\&quot;, &#39;i&#39;\n    )\n};\ntypeTesters.range = typeTesters.number;\n\n// See http://stackoverflow.com/a/10454560/8279\nvar decimalPlaces = num =&gt; {\n  var match = (&#39;&#39; + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) { return 0; }\n  return Math.max(\n       0,\n       // Number of digits right of decimal point.\n       (match[1] ? match[1].length : 0) -\n       // Adjust for scientific notation.\n       (match[2] ? +match[2] : 0));\n};\n\n// parseArguments(&#39;number&#39;, [&#39;1&#39;, &#39;2&#39;]) =&gt; [1, 2]\nlet parseArguments = (type, args) =&gt; args.map(Utils.parse[type]);\n// operatorToValidator returns a validating function for an operator function, applied to the given type\nlet operatorToValidator = (type, operator) =&gt; {\n  return (value, ...requirementsAndInput) =&gt; {\n    requirementsAndInput.pop(); // Get rid of `input` argument\n    return operator(value, ...parseArguments(type, requirementsAndInput));\n  };\n};\n\nlet comparisonOperator = operator =&gt; ({\n  validateDate: operatorToValidator(&#39;date&#39;, operator),\n  validateNumber: operatorToValidator(&#39;number&#39;, operator),\n  requirementType: operator.length &lt;= 2 ? &#39;string&#39; : [&#39;string&#39;, &#39;string&#39;], // Support operators with a 1 or 2 requirement(s)\n  priority: 30\n});\n\nValidatorRegistry.prototype = {\n  init: function (validators, catalog) {\n    this.catalog = catalog;\n    // Copy prototype&#39;s validators:\n    this.validators = Object.assign({}, this.validators);\n\n    for (var name in validators)\n      this.addValidator(name, validators[name].fn, validators[name].priority);\n\n    window.Parsley.trigger(&#39;parsley:validator:init&#39;);\n  },\n\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n  setLocale: function (locale) {\n    if (&#39;undefined&#39; === typeof this.catalog[locale])\n      throw new Error(locale + &#39; is not available in the catalog&#39;);\n\n    this.locale = locale;\n\n    return this;\n  },\n\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n  addCatalog: function (locale, messages, set) {\n    if (&#39;object&#39; === typeof messages)\n      this.catalog[locale] = messages;\n\n    if (true === set)\n      return this.setLocale(locale);\n\n    return this;\n  },\n\n  // Add a specific message for a given constraint in a given locale\n  addMessage: function (locale, name, message) {\n    if (&#39;undefined&#39; === typeof this.catalog[locale])\n      this.catalog[locale] = {};\n\n    this.catalog[locale][name] = message;\n\n    return this;\n  },\n\n  // Add messages for a given locale\n  addMessages: function (locale, nameMessageObject) {\n    for (var name in nameMessageObject)\n      this.addMessage(locale, name, nameMessageObject[name]);\n\n    return this;\n  },\n\n  // Add a new validator\n  //\n  //    addValidator(&#39;custom&#39;, {\n  //        requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n  //        validateString: function(value, from, to) {},\n  //        priority: 22,\n  //        messages: {\n  //          en: \&quot;Hey, that&#39;s no good\&quot;,\n  //          fr: \&quot;Aye aye, pas bon du tout\&quot;,\n  //        }\n  //    })\n  //\n  // Old API was addValidator(name, function, priority)\n  //\n  addValidator: function (name, arg1, arg2) {\n    if (this.validators[name])\n      Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is already defined.&#39;);\n    else if (Defaults.hasOwnProperty(name)) {\n      Utils.warn(&#39;\&quot;&#39; + name + &#39;\&quot; is a restricted keyword and is not a valid validator name.&#39;);\n      return;\n    }\n    return this._setValidator(...arguments);\n  },\n\n  updateValidator: function (name, arg1, arg2) {\n    if (!this.validators[name]) {\n      Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is not already defined.&#39;);\n      return this.addValidator(...arguments);\n    }\n    return this._setValidator(...arguments);\n  },\n\n  removeValidator: function (name) {\n    if (!this.validators[name])\n      Utils.warn(&#39;Validator \&quot;&#39; + name + &#39;\&quot; is not defined.&#39;);\n\n    delete this.validators[name];\n\n    return this;\n  },\n\n  _setValidator: function (name, validator, priority) {\n    if (&#39;object&#39; !== typeof validator) {\n      // Old style validator, with `fn` and `priority`\n      validator = {\n        fn: validator,\n        priority: priority\n      };\n    }\n    if (!validator.validate) {\n      validator = new Validator(validator);\n    }\n    this.validators[name] = validator;\n\n    for (var locale in validator.messages || {})\n      this.addMessage(locale, name, validator.messages[locale]);\n\n    return this;\n  },\n\n  getErrorMessage: function (constraint) {\n    var message;\n\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\n    if (&#39;type&#39; === constraint.name) {\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\n      message = typeMessages[constraint.requirements];\n    } else\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n  },\n\n  // Kind of light `sprintf()` implementation\n  formatMessage: function (string, parameters) {\n    if (&#39;object&#39; === typeof parameters) {\n      for (var i in parameters)\n        string = this.formatMessage(string, parameters[i]);\n\n      return string;\n    }\n\n    return &#39;string&#39; === typeof string ? string.replace(/%s/i, parameters) : &#39;&#39;;\n  },\n\n  // Here is the Parsley default validators list.\n  // A validator is an object with the following key values:\n  //  - priority: an integer\n  //  - requirement: &#39;string&#39; (default), &#39;integer&#39;, &#39;number&#39;, &#39;regexp&#39; or an Array of these\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n  // Alternatively, a validator can be a function that returns such an object\n  //\n  validators: {\n    notblank: {\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 2\n    },\n    required: {\n      validateMultiple: function(values) {\n        return values.length &gt; 0;\n      },\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 512\n    },\n    type: {\n      validateString: function(value, type, {step = &#39;any&#39;, base = 0} = {}) {\n        var tester = typeTesters[type];\n        if (!tester) {\n          throw new Error(&#39;validator type `&#39; + type + &#39;` is not supported&#39;);\n        }\n        if (!tester.test(value))\n          return false;\n        if (&#39;number&#39; === type) {\n          if (!/^any$/i.test(step || &#39;&#39;)) {\n            var nb = Number(value);\n            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n            if (decimalPlaces(nb) &gt; decimals) // Value can&#39;t have too many decimals\n              return false;\n            // Be careful of rounding errors by using integers.\n            var toInt = f =&gt; Math.round(f * Math.pow(10, decimals));\n            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n              return false;\n          }\n        }\n        return true;\n      },\n      requirementType: {\n        &#39;&#39;: &#39;string&#39;,\n        step: &#39;string&#39;,\n        base: &#39;number&#39;\n      },\n      priority: 256\n    },\n    pattern: {\n      validateString: function(value, regexp) {\n        return regexp.test(value);\n      },\n      requirementType: &#39;regexp&#39;,\n      priority: 64\n    },\n    minlength: {\n      validateString: function (value, requirement) {\n        return value.length &gt;= requirement;\n      },\n      requirementType: &#39;integer&#39;,\n      priority: 30\n    },\n    maxlength: {\n      validateString: function (value, requirement) {\n        return value.length &lt;= requirement;\n      },\n      requirementType: &#39;integer&#39;,\n      priority: 30\n    },\n    length: {\n      validateString: function (value, min, max) {\n        return value.length &gt;= min &amp;&amp; value.length &lt;= max;\n      },\n      requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n      priority: 30\n    },\n    mincheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length &gt;= requirement;\n      },\n      requirementType: &#39;integer&#39;,\n      priority: 30\n    },\n    maxcheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length &lt;= requirement;\n      },\n      requirementType: &#39;integer&#39;,\n      priority: 30\n    },\n    check: {\n      validateMultiple: function (values, min, max) {\n        return values.length &gt;= min &amp;&amp; values.length &lt;= max;\n      },\n      requirementType: [&#39;integer&#39;, &#39;integer&#39;],\n      priority: 30\n    },\n    min: comparisonOperator((value, requirement) =&gt; value &gt;= requirement),\n    max: comparisonOperator((value, requirement) =&gt; value &lt;= requirement),\n    range: comparisonOperator((value, min, max) =&gt; value &gt;= min &amp;&amp; value &lt;= max),\n    equalto: {\n      validateString: function (value, refOrValue) {\n        var $reference = $(refOrValue);\n        if ($reference.length)\n          return value === $reference.val();\n        else\n          return value === refOrValue;\n      },\n      priority: 256\n    }\n  }\n};\n\nexport default ValidatorRegistry;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Utils from &#39;./utils&#39;;\n\nvar UI = {};\n\nvar diffResults = function (newResult, oldResult, deep) {\n  var added = [];\n  var kept = [];\n\n  for (var i = 0; i &lt; newResult.length; i++) {\n    var found = false;\n\n    for (var j = 0; j &lt; oldResult.length; j++)\n      if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n    if (found)\n      kept.push(newResult[i]);\n    else\n      added.push(newResult[i]);\n  }\n\n  return {\n    kept: kept,\n    added: added,\n    removed: !deep ? diffResults(oldResult, newResult, true).added : []\n  };\n};\n\nUI.Form = {\n\n  _actualizeTriggers: function () {\n    this.$element.on(&#39;submit.Parsley&#39;, evt =&gt; { this.onSubmitValidate(evt); });\n    this.$element.on(&#39;click.Parsley&#39;, Utils._SubmitSelector, evt =&gt; { this.onSubmitButton(evt); });\n\n    // UI could be disabled\n    if (false === this.options.uiEnabled)\n      return;\n\n    this.element.setAttribute(&#39;novalidate&#39;, &#39;&#39;);\n  },\n\n  focus: function () {\n    this._focusedField = null;\n\n    if (true === this.validationResult || &#39;none&#39; === this.options.focus)\n      return null;\n\n    for (var i = 0; i &lt; this.fields.length; i++) {\n      var field = this.fields[i];\n      if (true !== field.validationResult &amp;&amp; field.validationResult.length &gt; 0 &amp;&amp; &#39;undefined&#39; === typeof field.options.noFocus) {\n        this._focusedField = field.$element;\n        if (&#39;first&#39; === this.options.focus)\n          break;\n      }\n    }\n\n    if (null === this._focusedField)\n      return null;\n\n    return this._focusedField.focus();\n  },\n\n  _destroyUI: function () {\n    // Reset all event listeners\n    this.$element.off(&#39;.Parsley&#39;);\n  }\n\n};\n\nUI.Field = {\n\n  _reflowUI: function () {\n    this._buildUI();\n\n    // If this field doesn&#39;t have an active UI don&#39;t bother doing something\n    if (!this._ui)\n      return;\n\n    // Diff between two validation results\n    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n    // Then store current validation result for next reflow\n    this._ui.lastValidationResult = this.validationResult;\n\n    // Handle valid / invalid / none field class\n    this._manageStatusClass();\n\n    // Add, remove, updated errors messages\n    this._manageErrorsMessages(diff);\n\n    // Triggers impl\n    this._actualizeTriggers();\n\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n    if ((diff.kept.length || diff.added.length) &amp;&amp; !this._failedOnce) {\n      this._failedOnce = true;\n      this._actualizeTriggers();\n    }\n  },\n\n  // Returns an array of field&#39;s error message(s)\n  getErrorsMessages: function () {\n    // No error message, field is valid\n    if (true === this.validationResult)\n      return [];\n\n    var messages = [];\n\n    for (var i = 0; i &lt; this.validationResult.length; i++)\n      messages.push(this.validationResult[i].errorMessage ||\n       this._getErrorMessage(this.validationResult[i].assert));\n\n    return messages;\n  },\n\n  // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n  addError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._addError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n  updateError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._updateError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It&#39;s a goal of Parsley that this method is no longer required [#1073]\n  removeError: function (name, {updateClass = true} = {}) {\n    this._buildUI();\n    this._removeError(name);\n\n    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n    // but highly improbable cuz&#39; manually removing a well Parsley handled error makes no sense.\n    if (updateClass)\n      this._manageStatusClass();\n  },\n\n  _manageStatusClass: function () {\n    if (this.hasConstraints() &amp;&amp; this.needsValidation() &amp;&amp; true === this.validationResult)\n      this._successClass();\n    else if (this.validationResult.length &gt; 0)\n      this._errorClass();\n    else\n      this._resetClass();\n  },\n\n  _manageErrorsMessages: function (diff) {\n    if (&#39;undefined&#39; !== typeof this.options.errorsMessagesDisabled)\n      return;\n\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n    if (&#39;undefined&#39; !== typeof this.options.errorMessage) {\n      if ((diff.added.length || diff.kept.length)) {\n        this._insertErrorWrapper();\n\n        if (0 === this._ui.$errorsWrapper.find(&#39;.parsley-custom-error-message&#39;).length)\n          this._ui.$errorsWrapper\n            .append(\n              $(this.options.errorTemplate)\n              .addClass(&#39;parsley-custom-error-message&#39;)\n            );\n\n        return this._ui.$errorsWrapper\n          .addClass(&#39;filled&#39;)\n          .find(&#39;.parsley-custom-error-message&#39;)\n          .html(this.options.errorMessage);\n      }\n\n      return this._ui.$errorsWrapper\n        .removeClass(&#39;filled&#39;)\n        .find(&#39;.parsley-custom-error-message&#39;)\n        .remove();\n    }\n\n    // Show, hide, update failing constraints messages\n    for (var i = 0; i &lt; diff.removed.length; i++)\n      this._removeError(diff.removed[i].assert.name);\n\n    for (i = 0; i &lt; diff.added.length; i++)\n      this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n    for (i = 0; i &lt; diff.kept.length; i++)\n      this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n  },\n\n\n  _addError: function (name, {message, assert}) {\n    this._insertErrorWrapper();\n    this._ui.$errorsWrapper\n      .addClass(&#39;filled&#39;)\n      .append(\n        $(this.options.errorTemplate)\n        .addClass(&#39;parsley-&#39; + name)\n        .html(message || this._getErrorMessage(assert))\n      );\n  },\n\n  _updateError: function (name, {message, assert}) {\n    this._ui.$errorsWrapper\n      .addClass(&#39;filled&#39;)\n      .find(&#39;.parsley-&#39; + name)\n      .html(message || this._getErrorMessage(assert));\n  },\n\n  _removeError: function (name) {\n    this._ui.$errorsWrapper\n      .removeClass(&#39;filled&#39;)\n      .find(&#39;.parsley-&#39; + name)\n      .remove();\n  },\n\n  _getErrorMessage: function (constraint) {\n    var customConstraintErrorMessage = constraint.name + &#39;Message&#39;;\n\n    if (&#39;undefined&#39; !== typeof this.options[customConstraintErrorMessage])\n      return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n    return window.Parsley.getErrorMessage(constraint);\n  },\n\n  _buildUI: function () {\n    // UI could be already built or disabled\n    if (this._ui || false === this.options.uiEnabled)\n      return;\n\n    var _ui = {};\n\n    // Give field its Parsley id in DOM\n    this.element.setAttribute(this.options.namespace + &#39;id&#39;, this.__id__);\n\n    /** Generate important UI elements and store them in this **/\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n    _ui.$errorClassHandler = this._manageClassHandler();\n\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n    _ui.errorsWrapperId = &#39;parsley-id-&#39; + (this.options.multiple ? &#39;multiple-&#39; + this.options.multiple : this.__id__);\n    _ui.$errorsWrapper = $(this.options.errorsWrapper).attr(&#39;id&#39;, _ui.errorsWrapperId);\n\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n    _ui.lastValidationResult = [];\n    _ui.validationInformationVisible = false;\n\n    // Store it in this for later\n    this._ui = _ui;\n  },\n\n  // Determine which element will have `parsley-error` and `parsley-success` classes\n  _manageClassHandler: function () {\n    // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n    if (&#39;string&#39; === typeof this.options.classHandler) {\n      if ($(this.options.classHandler).length === 0)\n        ParsleyUtils.warn(&#39;No elements found that match the selector `&#39; + this.options.classHandler + &#39;` set in options.classHandler or data-parsley-class-handler&#39;);\n\n      //return element or empty set\n      return $(this.options.classHandler);\n    }\n\n    // Class handled could also be determined by function given in Parsley options\n    if (&#39;function&#39; === typeof this.options.classHandler)\n      var $handler = this.options.classHandler.call(this, this);\n\n    // If this function returned a valid existing DOM element, go for it\n    if (&#39;undefined&#39; !== typeof $handler &amp;&amp; $handler.length)\n      return $handler;\n\n    return this._inputHolder();\n  },\n\n  _inputHolder: function() {\n    // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n    if (!this.options.multiple || this.element.nodeName === &#39;SELECT&#39;)\n      return this.$element;\n\n    // But if multiple element (radio, checkbox), that would be their parent\n    return this.$element.parent();\n  },\n\n  _insertErrorWrapper: function () {\n    var $errorsContainer;\n\n    // Nothing to do if already inserted\n    if (0 !== this._ui.$errorsWrapper.parent().length)\n      return this._ui.$errorsWrapper.parent();\n\n    if (&#39;string&#39; === typeof this.options.errorsContainer) {\n      if ($(this.options.errorsContainer).length)\n        return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\n      else\n        Utils.warn(&#39;The errors container `&#39; + this.options.errorsContainer + &#39;` does not exist in DOM&#39;);\n    } else if (&#39;function&#39; === typeof this.options.errorsContainer)\n      $errorsContainer = this.options.errorsContainer.call(this, this);\n\n    if (&#39;undefined&#39; !== typeof $errorsContainer &amp;&amp; $errorsContainer.length)\n      return $errorsContainer.append(this._ui.$errorsWrapper);\n\n    return this._inputHolder().after(this._ui.$errorsWrapper);\n  },\n\n  _actualizeTriggers: function () {\n    var $toBind = this._findRelated();\n    var trigger;\n\n    // Remove Parsley events already bound on this field\n    $toBind.off(&#39;.Parsley&#39;);\n    if (this._failedOnce)\n      $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, &#39;Parsley&#39;), () =&gt; {\n        this._validateIfNeeded();\n      });\n    else if (trigger = Utils.namespaceEvents(this.options.trigger, &#39;Parsley&#39;)) {\n      $toBind.on(trigger, event =&gt; {\n        this._validateIfNeeded(event);\n      });\n    }\n  },\n\n  _validateIfNeeded: function (event) {\n    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n    // do not validate if val length &lt; min threshold on first validation. Once field have been validated once and info\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n    if (event &amp;&amp; /key|input/.test(event.type))\n      if (!(this._ui &amp;&amp; this._ui.validationInformationVisible) &amp;&amp; this.getValue().length &lt;= this.options.validationThreshold)\n        return;\n\n    if (this.options.debounce) {\n      window.clearTimeout(this._debounced);\n      this._debounced = window.setTimeout(() =&gt; this.validate(), this.options.debounce);\n    } else\n      this.validate();\n  },\n\n  _resetUI: function () {\n    // Reset all event listeners\n    this._failedOnce = false;\n    this._actualizeTriggers();\n\n    // Nothing to do if UI never initialized for this field\n    if (&#39;undefined&#39; === typeof this._ui)\n      return;\n\n    // Reset all errors&#39; li\n    this._ui.$errorsWrapper\n      .removeClass(&#39;filled&#39;)\n      .children()\n      .remove();\n\n    // Reset validation class\n    this._resetClass();\n\n    // Reset validation flags and last validation result\n    this._ui.lastValidationResult = [];\n    this._ui.validationInformationVisible = false;\n  },\n\n  _destroyUI: function () {\n    this._resetUI();\n\n    if (&#39;undefined&#39; !== typeof this._ui)\n      this._ui.$errorsWrapper.remove();\n\n    delete this._ui;\n  },\n\n  _successClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n  },\n  _errorClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n  },\n  _resetClass: function () {\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n  }\n};\n\nexport default UI;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Base from &#39;./base&#39;;\nimport Utils from &#39;./utils&#39;;\n\nvar Form = function (element, domOptions, options) {\n  this.__class__ = &#39;Form&#39;;\n\n  this.element = element;\n  this.$element = $(element);\n  this.domOptions = domOptions;\n  this.options = options;\n  this.parent = window.Parsley;\n\n  this.fields = [];\n  this.validationResult = null;\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nForm.prototype = {\n  onSubmitValidate: function (event) {\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n    if (true === event.parsley)\n      return;\n\n    // If we didn&#39;t come here through a submit button, use the first one in the form\n    var submitSource = this._submitSource || this.$element.find(Utils._SubmitSelector)[0];\n    this._submitSource = null;\n    this.$element.find(&#39;.parsley-synthetic-submit-button&#39;).prop(&#39;disabled&#39;, true);\n    if (submitSource &amp;&amp; null !== submitSource.getAttribute(&#39;formnovalidate&#39;))\n      return;\n\n    window.Parsley._remoteCache = {};\n\n    var promise = this.whenValidate({event});\n\n    if (&#39;resolved&#39; === promise.state() &amp;&amp; false !== this._trigger(&#39;submit&#39;)) {\n      // All good, let event go through. We make this distinction because browsers\n      // differ in their handling of `submit` being called from inside a submit event [#1047]\n    } else {\n      // Rejected or pending: cancel this submit\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      if (&#39;pending&#39; === promise.state())\n        promise.done(() =&gt; { this._submit(submitSource); });\n    }\n  },\n\n  onSubmitButton: function(event) {\n    this._submitSource = event.currentTarget;\n  },\n  // internal\n  // _submit submits the form, this time without going through the validations.\n  // Care must be taken to \&quot;fake\&quot; the actual submit button being clicked.\n  _submit: function (submitSource) {\n    if (false === this._trigger(&#39;submit&#39;))\n      return;\n    // Add submit button&#39;s data\n    if (submitSource) {\n      var $synthetic = this.$element.find(&#39;.parsley-synthetic-submit-button&#39;).prop(&#39;disabled&#39;, false);\n      if (0 === $synthetic.length)\n        $synthetic = $(&#39;&lt;input class=\&quot;parsley-synthetic-submit-button\&quot; type=\&quot;hidden\&quot;&gt;&#39;).appendTo(this.$element);\n      $synthetic.attr({\n        name: submitSource.getAttribute(&#39;name&#39;),\n        value: submitSource.getAttribute(&#39;value&#39;)\n      });\n    }\n\n    this.$element.trigger(Object.assign($.Event(&#39;submit&#39;), {parsley: true}));\n  },\n\n  // Performs validation on fields while triggering events.\n  // @returns `true` if all validations succeeds, `false`\n  // if a failure is immediately detected, or `null`\n  // if dependant on a promise.\n  // Consider using `whenValidate` instead.\n  validate: function (options) {\n    if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n      Utils.warnOnce(&#39;Calling validate on a parsley form without passing arguments as an object is deprecated.&#39;);\n      var [group, force, event] = arguments;\n      options = {group, force, event};\n    }\n    return statusMapping[ this.whenValidate(options).state() ];\n  },\n\n  whenValidate: function ({group, force, event} = {}) {\n    this.submitEvent = event;\n    if (event) {\n      this.submitEvent = Object.assign({}, event, {preventDefault: () =&gt; {\n        Utils.warnOnce(\&quot;Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\&quot;);\n        this.validationResult = false;\n      }});\n    }\n    this.validationResult = true;\n\n    // fire validate event to eventually modify things before every validation\n    this._trigger(&#39;validate&#39;);\n\n    // Refresh form DOM options and form&#39;s fields that could have changed\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() =&gt; {\n      return $.map(this.fields, field =&gt; field.whenValidate({force, group}));\n    });\n\n    return Utils.all(promises)\n      .done(  () =&gt; { this._trigger(&#39;success&#39;); })\n      .fail(  () =&gt; {\n        this.validationResult = false;\n        this.focus();\n        this._trigger(&#39;error&#39;);\n      })\n      .always(() =&gt; { this._trigger(&#39;validated&#39;); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  // Iterate over refreshed fields, and stop on first failure.\n  // Returns `true` if all fields are valid, `false` if a failure is detected\n  // or `null` if the result depends on an unresolved promise.\n  // Prefer using `whenValid` instead.\n  isValid: function (options) {\n    if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n      Utils.warnOnce(&#39;Calling isValid on a parsley form without passing arguments as an object is deprecated.&#39;);\n      var [group, force] = arguments;\n      options = {group, force};\n    }\n    return statusMapping[ this.whenValid(options).state() ];\n  },\n\n  // Iterate over refreshed fields and validate them.\n  // Returns a promise.\n  // A validation that immediately fails will interrupt the validations.\n  whenValid: function ({group, force} = {}) {\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() =&gt; {\n      return $.map(this.fields, field =&gt; field.whenValid({group, force}));\n    });\n    return Utils.all(promises);\n  },\n\n  // Reset UI\n  reset: function () {\n    // Form case: emit a reset event for each field\n    for (var i = 0; i &lt; this.fields.length; i++)\n      this.fields[i].reset();\n\n    this._trigger(&#39;reset&#39;);\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    this._destroyUI();\n\n    // Form case: destroy all its fields and then destroy stored instance\n    for (var i = 0; i &lt; this.fields.length; i++)\n      this.fields[i].destroy();\n\n    this.$element.removeData(&#39;Parsley&#39;);\n    this._trigger(&#39;destroy&#39;);\n  },\n\n  _refreshFields: function () {\n    return this.actualizeOptions()._bindFields();\n  },\n\n  _bindFields: function () {\n    var oldFields = this.fields;\n\n    this.fields = [];\n    this.fieldsMappedById = {};\n\n    this._withoutReactualizingFormOptions(() =&gt; {\n      this.$element\n      .find(this.options.inputs)\n      .not(this.options.excluded)\n      .each((_, element) =&gt; {\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n        // Only add valid and not excluded `Field` and `FieldMultiple` children\n        if ((&#39;Field&#39; === fieldInstance.__class__ || &#39;FieldMultiple&#39; === fieldInstance.__class__) &amp;&amp; (true !== fieldInstance.options.excluded)) {\n          let uniqueId = fieldInstance.__class__ + &#39;-&#39; + fieldInstance.__id__;\n          if (&#39;undefined&#39; === typeof this.fieldsMappedById[uniqueId]) {\n            this.fieldsMappedById[uniqueId] = fieldInstance;\n            this.fields.push(fieldInstance);\n          }\n        }\n      });\n\n      $.each(Utils.difference(oldFields, this.fields), (_, field) =&gt; {\n        field.reset();\n      });\n    });\n    return this;\n  },\n\n  // Internal only.\n  // Looping on a form&#39;s fields to do validation or similar\n  // will trigger reactualizing options on all of them, which\n  // in turn will reactualize the form&#39;s options.\n  // To avoid calling actualizeOptions so many times on the form\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\n  // the method actualizeOptions on this form while `fn` is called.\n  _withoutReactualizingFormOptions: function (fn) {\n    var oldActualizeOptions = this.actualizeOptions;\n    this.actualizeOptions = function () { return this; };\n    var result = fn();\n    this.actualizeOptions = oldActualizeOptions;\n    return result;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  // Returns true iff event is not interrupted and default not prevented.\n  _trigger: function (eventName) {\n    return this.trigger(&#39;form:&#39; + eventName);\n  }\n\n};\n\nexport default Form;\n&quot;,&quot;import Utils from &#39;./utils&#39;;\nimport Validator from &#39;./validator&#39;;\n\nconst Constraint = function(parsleyField, name, requirements, priority, isDomConstraint) {\n  const validatorSpec = window.Parsley._validatorRegistry.validators[name];\n  const validator = new Validator(validatorSpec);\n  priority = priority || parsleyField.options[name + &#39;Priority&#39;] || validator.priority;\n  isDomConstraint = (true === isDomConstraint);\n\n  Object.assign(this, {\n    validator,\n    name,\n    requirements,\n    priority,\n    isDomConstraint\n  });\n  this._parseRequirements(parsleyField.options);\n};\n\nconst capitalize = function(str) {\n  const cap = str[0].toUpperCase();\n  return cap + str.slice(1);\n};\n\nConstraint.prototype = {\n  validate: function(value, instance) {\n    return this.validator.validate(value, ...this.requirementList, instance);\n  },\n\n  _parseRequirements: function(options) {\n    this.requirementList = this.validator.parseRequirements(this.requirements,\n      key =&gt; options[this.name + capitalize(key)]\n    );\n  }\n};\n\nexport default Constraint;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Constraint from &#39;./constraint&#39;;\nimport UI from &#39;./ui&#39;;\nimport Utils from &#39;./utils&#39;;\n\nvar Field = function (field, domOptions, options, parsleyFormInstance) {\n  this.__class__ = &#39;Field&#39;;\n\n  this.element = field;\n  this.$element = $(field);\n\n  // Set parent if we have one\n  if (&#39;undefined&#39; !== typeof parsleyFormInstance) {\n    this.parent = parsleyFormInstance;\n  }\n\n  this.options = options;\n  this.domOptions = domOptions;\n\n  // Initialize some properties\n  this.constraints = [];\n  this.constraintsByName = {};\n  this.validationResult = true;\n\n  // Bind constraints\n  this._bindConstraints();\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nField.prototype = {\n  // # Public API\n  // Validate field and trigger some events for mainly `UI`\n  // @returns `true`, an array of the validators that failed, or\n  // `null` if validation is not finished. Prefer using whenValidate\n  validate: function (options) {\n    if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n      Utils.warnOnce(&#39;Calling validate on a parsley field without passing arguments as an object is deprecated.&#39;);\n      options = {options};\n    }\n    var promise = this.whenValidate(options);\n    if (!promise)  // If excluded with `group` option\n      return true;\n    switch (promise.state()) {\n      case &#39;pending&#39;: return null;\n      case &#39;resolved&#39;: return true;\n      case &#39;rejected&#39;: return this.validationResult;\n    }\n  },\n\n  // Validate field and trigger some events for mainly `UI`\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if field is not in the given `group`.\n  whenValidate: function ({force, group} =  {}) {\n    // do not validate a field if not the same as given validation group\n    this.refreshConstraints();\n    if (group &amp;&amp; !this._isInGroup(group))\n      return;\n\n    this.value = this.getValue();\n\n    // Field Validate event. `this.value` could be altered for custom needs\n    this._trigger(&#39;validate&#39;);\n\n    return this.whenValid({force, value: this.value, _refreshed: true})\n      .always(() =&gt; { this._reflowUI(); })\n      .done(() =&gt;   { this._trigger(&#39;success&#39;); })\n      .fail(() =&gt;   { this._trigger(&#39;error&#39;); })\n      .always(() =&gt; { this._trigger(&#39;validated&#39;); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  hasConstraints: function () {\n    return 0 !== this.constraints.length;\n  },\n\n  // An empty optional field does not need validation\n  needsValidation: function (value) {\n    if (&#39;undefined&#39; === typeof value)\n      value = this.getValue();\n\n    // If a field is empty and not required, it is valid\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n    if (!value.length &amp;&amp; !this._isRequired() &amp;&amp; &#39;undefined&#39; === typeof this.options.validateIfEmpty)\n      return false;\n\n    return true;\n  },\n\n  _isInGroup: function (group) {\n    if (Array.isArray(this.options.group))\n      return -1 !== $.inArray(group, this.options.group);\n    return this.options.group === group;\n  },\n\n  // Just validate field. Do not trigger any event.\n  // Returns `true` iff all constraints pass, `false` if there are failures,\n  // or `null` if the result can not be determined yet (depends on a promise)\n  // See also `whenValid`.\n  isValid: function (options) {\n    if (arguments.length &gt;= 1 &amp;&amp; !$.isPlainObject(options)) {\n      Utils.warnOnce(&#39;Calling isValid on a parsley field without passing arguments as an object is deprecated.&#39;);\n      var [force, value] = arguments;\n      options = {force, value};\n    }\n    var promise = this.whenValid(options);\n    if (!promise) // Excluded via `group`\n      return true;\n    return statusMapping[promise.state()];\n  },\n\n  // Just validate field. Do not trigger any event.\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if the field is not in the given `group`.\n  // The argument `force` will force validation of empty fields.\n  // If a `value` is given, it will be validated instead of the value of the input.\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\n    // Recompute options and rebind constraints to have latest changes\n    if (!_refreshed)\n      this.refreshConstraints();\n    // do not validate a field if not the same as given validation group\n    if (group &amp;&amp; !this._isInGroup(group))\n      return;\n\n    this.validationResult = true;\n\n    // A field without constraint is valid\n    if (!this.hasConstraints())\n      return $.when();\n\n    // Value could be passed as argument, needed to add more power to &#39;field:validate&#39;\n    if (&#39;undefined&#39; === typeof value || null === value)\n      value = this.getValue();\n\n    if (!this.needsValidation(value) &amp;&amp; true !== force)\n      return $.when();\n\n    var groupedConstraints = this._getGroupedConstraints();\n    var promises = [];\n    $.each(groupedConstraints, (_, constraints) =&gt; {\n      // Process one group of constraints at a time, we validate the constraints\n      // and combine the promises together.\n      var promise = Utils.all(\n        $.map(constraints, constraint =&gt; this._validateConstraint(value, constraint))\n      );\n      promises.push(promise);\n      if (promise.state() === &#39;rejected&#39;)\n        return false; // Interrupt processing if a group has already failed\n    });\n    return Utils.all(promises);\n  },\n\n  // @returns a promise\n  _validateConstraint: function(value, constraint) {\n    var result = constraint.validate(value, this);\n    // Map false to a failed promise\n    if (false === result)\n      result = $.Deferred().reject();\n    // Make sure we return a promise and that we record failures\n    return Utils.all([result]).fail(errorMessage =&gt; {\n      if (!(this.validationResult instanceof Array))\n        this.validationResult = [];\n      this.validationResult.push({\n        assert: constraint,\n        errorMessage: &#39;string&#39; === typeof errorMessage &amp;&amp; errorMessage\n      });\n    });\n  },\n\n  // @returns Parsley field computed value that could be overrided or configured in DOM\n  getValue: function () {\n    var value;\n\n    // Value could be overriden in DOM or with explicit options\n    if (&#39;function&#39; === typeof this.options.value)\n      value = this.options.value(this);\n    else if (&#39;undefined&#39; !== typeof this.options.value)\n      value = this.options.value;\n    else\n      value = this.$element.val();\n\n    // Handle wrong DOM or configurations\n    if (&#39;undefined&#39; === typeof value || null === value)\n      return &#39;&#39;;\n\n    return this._handleWhitespace(value);\n  },\n\n  // Reset UI\n  reset: function () {\n    this._resetUI();\n    return this._trigger(&#39;reset&#39;);\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    this._destroyUI();\n    this.$element.removeData(&#39;Parsley&#39;);\n    this.$element.removeData(&#39;FieldMultiple&#39;);\n    this._trigger(&#39;destroy&#39;);\n  },\n\n  // Actualize options that could have change since previous validation\n  // Re-bind accordingly constraints (could be some new, removed or updated)\n  refreshConstraints: function () {\n    return this.actualizeOptions()._bindConstraints();\n  },\n\n  /**\n  * Add a new constraint to a field\n  *\n  * @param {String}   name\n  * @param {Mixed}    requirements      optional\n  * @param {Number}   priority          optional\n  * @param {Boolean}  isDomConstraint   optional\n  */\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n    if (window.Parsley._validatorRegistry.validators[name]) {\n      var constraint = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n      // if constraint already exist, delete it and push new version\n      if (&#39;undefined&#39; !== this.constraintsByName[constraint.name])\n        this.removeConstraint(constraint.name);\n\n      this.constraints.push(constraint);\n      this.constraintsByName[constraint.name] = constraint;\n    }\n\n    return this;\n  },\n\n  // Remove a constraint\n  removeConstraint: function (name) {\n    for (var i = 0; i &lt; this.constraints.length; i++)\n      if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n    delete this.constraintsByName[name];\n    return this;\n  },\n\n  // Update a constraint (Remove + re-add)\n  updateConstraint: function (name, parameters, priority) {\n    return this.removeConstraint(name)\n      .addConstraint(name, parameters, priority);\n  },\n\n  // # Internals\n\n  // Internal only.\n  // Bind constraints from config + options + DOM\n  _bindConstraints: function () {\n    var constraints = [];\n    var constraintsByName = {};\n\n    // clean all existing DOM constraints to only keep javascript user constraints\n    for (var i = 0; i &lt; this.constraints.length; i++)\n      if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n    this.constraints = constraints;\n    this.constraintsByName = constraintsByName;\n\n    // then re-add Parsley DOM-API constraints\n    for (var name in this.options)\n      this.addConstraint(name, this.options[name], undefined, true);\n\n    // finally, bind special HTML5 constraints\n    return this._bindHtml5Constraints();\n  },\n\n  // Internal only.\n  // Bind specific HTML5 constraints to be HTML5 compliant\n  _bindHtml5Constraints: function () {\n    // html5 required\n    if (null !== this.element.getAttribute(&#39;required&#39;))\n      this.addConstraint(&#39;required&#39;, true, undefined, true);\n\n    // html5 pattern\n    if (null !== this.element.getAttribute(&#39;pattern&#39;))\n      this.addConstraint(&#39;pattern&#39;, this.element.getAttribute(&#39;pattern&#39;), undefined, true);\n\n    // range\n    let min = this.element.getAttribute(&#39;min&#39;);\n    let max = this.element.getAttribute(&#39;max&#39;);\n    if (null !== min &amp;&amp; null !== max)\n      this.addConstraint(&#39;range&#39;, [min, max], undefined, true);\n\n    // HTML5 min\n    else if (null !== min)\n      this.addConstraint(&#39;min&#39;, min, undefined, true);\n\n    // HTML5 max\n    else if (null !== max)\n      this.addConstraint(&#39;max&#39;, max, undefined, true);\n\n\n    // length\n    if (null !== this.element.getAttribute(&#39;minlength&#39;) &amp;&amp; null !== this.element.getAttribute(&#39;maxlength&#39;))\n      this.addConstraint(&#39;length&#39;, [this.element.getAttribute(&#39;minlength&#39;), this.element.getAttribute(&#39;maxlength&#39;)], undefined, true);\n\n    // HTML5 minlength\n    else if (null !== this.element.getAttribute(&#39;minlength&#39;))\n      this.addConstraint(&#39;minlength&#39;, this.element.getAttribute(&#39;minlength&#39;), undefined, true);\n\n    // HTML5 maxlength\n    else if (null !== this.element.getAttribute(&#39;maxlength&#39;))\n      this.addConstraint(&#39;maxlength&#39;, this.element.getAttribute(&#39;maxlength&#39;), undefined, true);\n\n\n    // html5 types\n    var type = this.element.type;\n\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n    if (&#39;number&#39; === type) {\n      return this.addConstraint(&#39;type&#39;, [&#39;number&#39;, {\n        step: this.element.getAttribute(&#39;step&#39;) || &#39;1&#39;,\n        base: min || this.element.getAttribute(&#39;value&#39;)\n      }], undefined, true);\n    // Regular other HTML5 supported types\n    } else if (/^(email|url|range|date)$/i.test(type)) {\n      return this.addConstraint(&#39;type&#39;, type, undefined, true);\n    }\n    return this;\n  },\n\n  // Internal only.\n  // Field is required if have required constraint without `false` value\n  _isRequired: function () {\n    if (&#39;undefined&#39; === typeof this.constraintsByName.required)\n      return false;\n\n    return false !== this.constraintsByName.required.requirements;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  _trigger: function (eventName) {\n    return this.trigger(&#39;field:&#39; + eventName);\n  },\n\n  // Internal only\n  // Handles whitespace in a value\n  // Use `data-parsley-whitespace=\&quot;squish\&quot;` to auto squish input value\n  // Use `data-parsley-whitespace=\&quot;trim\&quot;` to auto trim input value\n  _handleWhitespace: function (value) {\n    if (true === this.options.trimValue)\n      Utils.warnOnce(&#39;data-parsley-trim-value=\&quot;true\&quot; is deprecated, please use data-parsley-whitespace=\&quot;trim\&quot;&#39;);\n\n    if (&#39;squish&#39; === this.options.whitespace)\n      value = value.replace(/\\s{2,}/g, &#39; &#39;);\n\n    if ((&#39;trim&#39; === this.options.whitespace) || (&#39;squish&#39; === this.options.whitespace) || (true === this.options.trimValue))\n      value = Utils.trimString(value);\n\n    return value;\n  },\n\n  _isDateInput: function() {\n    var c = this.constraintsByName.type;\n    return c &amp;&amp; c.requirements === &#39;date&#39;;\n  },\n\n  // Internal only.\n  // Returns the constraints, grouped by descending priority.\n  // The result is thus an array of arrays of constraints.\n  _getGroupedConstraints: function () {\n    if (false === this.options.priorityEnabled)\n      return [this.constraints];\n\n    var groupedConstraints = [];\n    var index = {};\n\n    // Create array unique of priorities\n    for (var i = 0; i &lt; this.constraints.length; i++) {\n      var p = this.constraints[i].priority;\n      if (!index[p])\n        groupedConstraints.push(index[p] = []);\n      index[p].push(this.constraints[i]);\n    }\n    // Sort them by priority DESC\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n    return groupedConstraints;\n  }\n\n};\n\nexport default Field;\n&quot;,&quot;import $ from &#39;jquery&#39;;\n\nvar Multiple = function () {\n  this.__class__ = &#39;FieldMultiple&#39;;\n};\n\nMultiple.prototype = {\n  // Add new `$element` sibling for multiple field\n  addElement: function ($element) {\n    this.$elements.push($element);\n\n    return this;\n  },\n\n  // See `Field.refreshConstraints()`\n  refreshConstraints: function () {\n    var fieldConstraints;\n\n    this.constraints = [];\n\n    // Select multiple special treatment\n    if (this.element.nodeName === &#39;SELECT&#39;) {\n      this.actualizeOptions()._bindConstraints();\n\n      return this;\n    }\n\n    // Gather all constraints for each input in the multiple group\n    for (var i = 0; i &lt; this.$elements.length; i++) {\n\n      // Check if element have not been dynamically removed since last binding\n      if (!$(&#39;html&#39;).has(this.$elements[i]).length) {\n        this.$elements.splice(i, 1);\n        continue;\n      }\n\n      fieldConstraints = this.$elements[i].data(&#39;FieldMultiple&#39;).refreshConstraints().constraints;\n\n      for (var j = 0; j &lt; fieldConstraints.length; j++)\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n    }\n\n    return this;\n  },\n\n  // See `Field.getValue()`\n  getValue: function () {\n    // Value could be overriden in DOM\n    if (&#39;function&#39; === typeof this.options.value)\n      return this.options.value(this);\n    else if (&#39;undefined&#39; !== typeof this.options.value)\n      return this.options.value;\n\n    // Radio input case\n    if (this.element.nodeName === &#39;INPUT&#39;) {\n      if (this.element.type === &#39;radio&#39;)\n        return this._findRelated().filter(&#39;:checked&#39;).val() || &#39;&#39;;\n\n      // checkbox input case\n      if (this.element.type === &#39;checkbox&#39;) {\n        var values = [];\n\n        this._findRelated().filter(&#39;:checked&#39;).each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n    }\n\n    // Select multiple case\n    if (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null === this.$element.val())\n      return [];\n\n    // Default case that should never happen\n    return this.$element.val();\n  },\n\n  _init: function () {\n    this.$elements = [this.$element];\n\n    return this;\n  }\n};\n\nexport default Multiple;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Utils from &#39;./utils&#39;;\nimport Base from &#39;./base&#39;;\nimport Form from &#39;./form&#39;;\nimport Field from &#39;./field&#39;;\nimport Multiple from &#39;./multiple&#39;;\n\nvar Factory = function (element, options, parsleyFormInstance) {\n  this.element = element;\n  this.$element = $(element);\n\n  // If the element has already been bound, returns its saved Parsley instance\n  var savedparsleyFormInstance = this.$element.data(&#39;Parsley&#39;);\n  if (savedparsleyFormInstance) {\n\n    // If the saved instance has been bound without a Form parent and there is one given in this call, add it\n    if (&#39;undefined&#39; !== typeof parsleyFormInstance &amp;&amp; savedparsleyFormInstance.parent === window.Parsley) {\n      savedparsleyFormInstance.parent = parsleyFormInstance;\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n    }\n\n    if (&#39;object&#39; === typeof options) {\n      Object.assign(savedparsleyFormInstance.options, options);\n    }\n\n    return savedparsleyFormInstance;\n  }\n\n  // Parsley must be instantiated with a DOM element or jQuery $element\n  if (!this.$element.length)\n    throw new Error(&#39;You must bind Parsley on an existing element.&#39;);\n\n  if (&#39;undefined&#39; !== typeof parsleyFormInstance &amp;&amp; &#39;Form&#39; !== parsleyFormInstance.__class__)\n    throw new Error(&#39;Parent instance must be a Form instance&#39;);\n\n  this.parent = parsleyFormInstance || window.Parsley;\n  return this.init(options);\n};\n\nFactory.prototype = {\n  init: function (options) {\n    this.__class__ = &#39;Parsley&#39;;\n    this.__version__ = &#39;@@version&#39;;\n    this.__id__ = Utils.generateID();\n\n    // Pre-compute options\n    this._resetOptions(options);\n\n    // A Form instance is obviously a `&lt;form&gt;` element but also every node that is not an input and has the `data-parsley-validate` attribute\n    if (this.element.nodeName === &#39;FORM&#39; || (Utils.checkAttr(this.element, this.options.namespace, &#39;validate&#39;) &amp;&amp; !this.$element.is(this.options.inputs)))\n      return this.bind(&#39;parsleyForm&#39;);\n\n    // Every other element is bound as a `Field` or `FieldMultiple`\n    return this.isMultiple() ? this.handleMultiple() : this.bind(&#39;parsleyField&#39;);\n  },\n\n  isMultiple: function () {\n    return ((this.element.type === &#39;radio&#39; || this.element.type === &#39;checkbox&#39;) ||\n      (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null !== this.element.getAttribute(&#39;multiple&#39;)));\n  },\n\n  // Multiples fields are a real nightmare :(\n  // Maybe some refactoring would be appreciated here...\n  handleMultiple: function () {\n    var name;\n    var multiple;\n    var parsleyMultipleInstance;\n\n    // Handle multiple name\n    this.options.multiple = this.options.multiple ||\n      (name = this.element.getAttribute(&#39;name&#39;)) ||\n      this.element.getAttribute(&#39;id&#39;);\n\n    // Special select multiple input\n    if (this.element.nodeName === &#39;SELECT&#39; &amp;&amp; null !== this.element.getAttribute(&#39;multiple&#39;)) {\n      this.options.multiple = this.options.multiple || this.__id__;\n      return this.bind(&#39;parsleyFieldMultiple&#39;);\n\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n    } else if (!this.options.multiple) {\n      Utils.warn(&#39;To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.&#39;, this.$element);\n      return this;\n    }\n\n    // Remove special chars\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, &#39;&#39;);\n\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n    if (name) {\n      $(&#39;input[name=\&quot;&#39; + name + &#39;\&quot;]&#39;).each((i, input) =&gt; {\n        if ((input.type === &#39;radio&#39; || input.type === &#39;checkbox&#39;))\n          input.setAttribute(this.options.namespace + &#39;multiple&#39;, this.options.multiple);\n      });\n    }\n\n    // Check here if we don&#39;t already have a related multiple instance saved\n    var $previouslyRelated = this._findRelated();\n    for (var i = 0; i &lt; $previouslyRelated.length; i++) {\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data(&#39;Parsley&#39;);\n      if (&#39;undefined&#39; !== typeof parsleyMultipleInstance) {\n\n        if (!this.$element.data(&#39;FieldMultiple&#39;)) {\n          parsleyMultipleInstance.addElement(this.$element);\n        }\n\n        break;\n      }\n    }\n\n    // Create a secret Field instance for every multiple field. It will be stored in `data(&#39;FieldMultiple&#39;)`\n    // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance\n    this.bind(&#39;parsleyField&#39;, true);\n\n    return parsleyMultipleInstance || this.bind(&#39;parsleyFieldMultiple&#39;);\n  },\n\n  // Return proper `Form`, `Field` or `FieldMultiple`\n  bind: function (type, doNotStore) {\n    var parsleyInstance;\n\n    switch (type) {\n      case &#39;parsleyForm&#39;:\n        parsleyInstance = $.extend(\n          new Form(this.element, this.domOptions, this.options),\n          new Base(),\n          window.ParsleyExtend\n        )._bindFields();\n        break;\n      case &#39;parsleyField&#39;:\n        parsleyInstance = $.extend(\n          new Field(this.element, this.domOptions, this.options, this.parent),\n          new Base(),\n          window.ParsleyExtend\n        );\n        break;\n      case &#39;parsleyFieldMultiple&#39;:\n        parsleyInstance = $.extend(\n          new Field(this.element, this.domOptions, this.options, this.parent),\n          new Multiple(),\n          new Base(),\n          window.ParsleyExtend\n        )._init();\n        break;\n      default:\n        throw new Error(type + &#39;is not a supported Parsley type&#39;);\n    }\n\n    if (this.options.multiple)\n      Utils.setAttr(this.element, this.options.namespace, &#39;multiple&#39;, this.options.multiple);\n\n    if (&#39;undefined&#39; !== typeof doNotStore) {\n      this.$element.data(&#39;FieldMultiple&#39;, parsleyInstance);\n\n      return parsleyInstance;\n    }\n\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n    this.$element.data(&#39;Parsley&#39;, parsleyInstance);\n\n    // Tell the world we have a new Form or Field instance!\n    parsleyInstance._actualizeTriggers();\n    parsleyInstance._trigger(&#39;init&#39;);\n\n    return parsleyInstance;\n  }\n};\n\nexport default Factory;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Utils from &#39;./utils&#39;;\nimport Defaults from &#39;./defaults&#39;;\nimport Base from &#39;./base&#39;;\nimport ValidatorRegistry from &#39;./validator_registry&#39;;\nimport UI from &#39;./ui&#39;;\nimport Form from &#39;./form&#39;;\nimport Field from &#39;./field&#39;;\nimport Multiple from &#39;./multiple&#39;;\nimport Factory from &#39;./factory&#39;;\n\nvar vernums = $.fn.jquery.split(&#39;.&#39;);\nif (parseInt(vernums[0]) &lt;= 1 &amp;&amp; parseInt(vernums[1]) &lt; 8) {\n  throw \&quot;The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\&quot;;\n}\nif (!vernums.forEach) {\n  Utils.warn(&#39;Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim&#39;);\n}\n// Inherit `on`, `off` &amp; `trigger` to Parsley:\nvar Parsley = Object.assign(new Base(), {\n    element: document,\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: Factory,\n    version: &#39;@@version&#39;\n  });\n\n// Supplement Field and Form with Base\n// This way, the constructors will have access to those methods\nObject.assign(Field.prototype, UI.Field, Base.prototype);\nObject.assign(Form.prototype, UI.Form, Base.prototype);\n// Inherit actualizeOptions and _resetOptions:\nObject.assign(Factory.prototype, Base.prototype);\n\n// ### jQuery API\n// `$(&#39;.elem&#39;).parsley(options)` or `$(&#39;.elem&#39;).psly(options)`\n$.fn.parsley = $.fn.psly = function (options) {\n  if (this.length &gt; 1) {\n    var instances = [];\n\n    this.each(function () {\n      instances.push($(this).parsley(options));\n    });\n\n    return instances;\n  }\n\n  // Return undefined if applied to non existing DOM element\n  if (!$(this).length) {\n    Utils.warn(&#39;You must bind Parsley on an existing element.&#39;);\n\n    return;\n  }\n\n  return new Factory(this[0], options);\n};\n\n// ### Field and Form extension\n// Ensure the extension is now defined if it wasn&#39;t previously\nif (&#39;undefined&#39; === typeof window.ParsleyExtend)\n  window.ParsleyExtend = {};\n\n// ### Parsley config\n// Inherit from ParsleyDefault, and copy over any existing values\nParsley.options = Object.assign(Utils.objectCreate(Defaults), window.ParsleyConfig);\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n// ### Globals\nwindow.Parsley = window.psly = Parsley;\nParsley.Utils = Utils;\nwindow.ParsleyUtils = {};\n$.each(Utils, (key, value) =&gt; {\n  if (&#39;function&#39; === typeof value) {\n    window.ParsleyUtils[key] = (...args) =&gt; {\n      Utils.warnOnce(&#39;Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.&#39;);\n      return Utils[key](...args);\n    };\n  }\n});\n\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\nvar registry = window.Parsley._validatorRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\nwindow.ParsleyValidator = {};\n$.each(&#39;setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator&#39;.split(&#39; &#39;), function (i, method) {\n  window.Parsley[method] = (...args) =&gt; registry[method](...args);\n  window.ParsleyValidator[method] = function () {\n    Utils.warnOnce(`Accessing the method &#39;${method}&#39; through Validator is deprecated. Simply call &#39;window.Parsley.${method}(...)&#39;`);\n    return window.Parsley[method](...arguments);\n  };\n});\n\n// ### UI\n// Deprecated global object\nwindow.Parsley.UI = UI;\nwindow.ParsleyUI = {\n  removeError: function (instance, name, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    Utils.warnOnce(`Accessing UI is deprecated. Call &#39;removeError&#39; on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance.removeError(name, {updateClass});\n  },\n  getErrorsMessages: function (instance) {\n    Utils.warnOnce(`Accessing UI is deprecated. Call &#39;getErrorsMessages&#39; on the instance directly.`);\n    return instance.getErrorsMessages();\n  }\n};\n$.each(&#39;addError updateError&#39;.split(&#39; &#39;), function (i, method) {\n  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    Utils.warnOnce(`Accessing UI is deprecated. Call &#39;${method}&#39; on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance[method](name, {message, assert, updateClass});\n  };\n});\n\n// ### PARSLEY auto-binding\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\nif (false !== window.ParsleyConfig.autoBind) {\n  $(function () {\n    // Works only on `data-parsley-validate`.\n    if ($(&#39;[data-parsley-validate]&#39;).length)\n      $(&#39;[data-parsley-validate]&#39;).parsley();\n  });\n}\n\nexport default Parsley;\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Utils from &#39;./utils&#39;;\nimport Base from &#39;./base&#39;;\n\nimport Parsley from &#39;./main&#39;;\n\n$.extend(true, Parsley, {\n  asyncValidators: {\n    &#39;default&#39;: {\n      fn: function (xhr) {\n        // By default, only status 2xx are deemed successful.\n        // Note: we use status instead of state() because responses with status 200\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\n        // result in state() === &#39;rejected&#39;.\n        return xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300;\n      },\n      url: false\n    },\n    reverse: {\n      fn: function (xhr) {\n        // If reverse option is set, a failing ajax request is considered successful\n        return xhr.status &lt; 200 || xhr.status &gt;= 300;\n      },\n      url: false\n    }\n  },\n\n  addAsyncValidator: function (name, fn, url, options) {\n    Parsley.asyncValidators[name] = {\n      fn: fn,\n      url: url || false,\n      options: options || {}\n    };\n\n    return this;\n  }\n\n});\n\nParsley.addValidator(&#39;remote&#39;, {\n  requirementType: {\n    &#39;&#39;: &#39;string&#39;,\n    &#39;validator&#39;: &#39;string&#39;,\n    &#39;reverse&#39;: &#39;boolean&#39;,\n    &#39;options&#39;: &#39;object&#39;\n  },\n\n  validateString: function (value, url, options, instance) {\n    var data = {};\n    var ajaxOptions;\n    var csr;\n    var validator = options.validator || (true === options.reverse ? &#39;reverse&#39; : &#39;default&#39;);\n\n    if (&#39;undefined&#39; === typeof Parsley.asyncValidators[validator])\n      throw new Error(&#39;Calling an undefined async validator: `&#39; + validator + &#39;`&#39;);\n\n    url = Parsley.asyncValidators[validator].url || url;\n\n    // Fill current value\n    if (url.indexOf(&#39;{value}&#39;) &gt; -1) {\n      url = url.replace(&#39;{value}&#39;, encodeURIComponent(value));\n    } else {\n      data[instance.element.getAttribute(&#39;name&#39;) || instance.element.getAttribute(&#39;id&#39;)] = value;\n    }\n\n    // Merge options passed in from the function with the ones in the attribute\n    var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n    ajaxOptions = $.extend(true, {}, {\n      url: url,\n      data: data,\n      type: &#39;GET&#39;\n    }, remoteOptions);\n\n    // Generate store key based on ajax options\n    instance.trigger(&#39;field:ajaxoptions&#39;, instance, ajaxOptions);\n\n    csr = $.param(ajaxOptions);\n\n    // Initialise querry cache\n    if (&#39;undefined&#39; === typeof Parsley._remoteCache)\n      Parsley._remoteCache = {};\n\n    // Try to retrieve stored xhr\n    var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n    var handleXhr = function () {\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n      if (!result) // Map falsy results to rejected promise\n        result = $.Deferred().reject();\n      return $.when(result);\n    };\n\n    return xhr.then(handleXhr, handleXhr);\n  },\n\n  priority: -1\n});\n\nParsley.on(&#39;form:submit&#39;, function () {\n  Parsley._remoteCache = {};\n});\n\nBase.prototype.addAsyncValidator = function () {\n  Utils.warnOnce(&#39;Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`&#39;);\n  return Parsley.addAsyncValidator(...arguments);\n};\n&quot;,&quot;// This is included with the Parsley library itself,\n// thus there is no use in adding it to your project.\nimport Parsley from &#39;../parsley/main&#39;;\n\nParsley.addMessages(&#39;en&#39;, {\n  defaultMessage: \&quot;This value seems to be invalid.\&quot;,\n  type: {\n    email:        \&quot;This value should be a valid email.\&quot;,\n    url:          \&quot;This value should be a valid url.\&quot;,\n    number:       \&quot;This value should be a valid number.\&quot;,\n    integer:      \&quot;This value should be a valid integer.\&quot;,\n    digits:       \&quot;This value should be digits.\&quot;,\n    alphanum:     \&quot;This value should be alphanumeric.\&quot;\n  },\n  notblank:       \&quot;This value should not be blank.\&quot;,\n  required:       \&quot;This value is required.\&quot;,\n  pattern:        \&quot;This value seems to be invalid.\&quot;,\n  min:            \&quot;This value should be greater than or equal to %s.\&quot;,\n  max:            \&quot;This value should be lower than or equal to %s.\&quot;,\n  range:          \&quot;This value should be between %s and %s.\&quot;,\n  minlength:      \&quot;This value is too short. It should have %s characters or more.\&quot;,\n  maxlength:      \&quot;This value is too long. It should have %s characters or fewer.\&quot;,\n  length:         \&quot;This value length is invalid. It should be between %s and %s characters long.\&quot;,\n  mincheck:       \&quot;You must select at least %s choices.\&quot;,\n  maxcheck:       \&quot;You must select %s choices or fewer.\&quot;,\n  check:          \&quot;You must select between %s and %s choices.\&quot;,\n  equalto:        \&quot;This value should be the same.\&quot;\n});\n\nParsley.setLocale(&#39;en&#39;);\n&quot;,&quot;import $ from &#39;jquery&#39;;\nimport Parsley from &#39;./parsley/main&#39;;\nimport &#39;./parsley/pubsub&#39;;\nimport &#39;./parsley/remote&#39;;\nimport &#39;./i18n/en&#39;;\nimport inputevent from &#39;./vendor/inputevent&#39;;\n\ninputevent.install();\n\nexport default Parsley;\n&quot;]}</td>
      </tr>
</table>

  </div>

</div>

<button type="button" data-facebox="#jump-to-line" data-facebox-class="linejump" data-hotkey="l" class="d-none">Jump to Line</button>
<div id="jump-to-line" style="display:none">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <input class="form-control linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
    <button type="submit" class="btn">Go</button>
</form></div>


  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div>

    </div>
  </div>

  </div>

      
<div class="container site-footer-container">
  <div class="site-footer " role="contentinfo">
    <ul class="site-footer-links float-right">
        <li><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact GitHub</a></li>
      <li><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>

    </ul>

    <a href="https://github.com" aria-label="Homepage" class="site-footer-mark" title="GitHub">
      <svg aria-hidden="true" class="octicon octicon-mark-github" height="24" version="1.1" viewBox="0 0 16 16" width="24"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
    <ul class="site-footer-links">
      <li>&copy; 2017 <span title="0.15154s from github-fe152-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="https://github.com/site/terms" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li><a href="https://github.com/security" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <button type="button" class="flash-close js-flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
    You can't perform that action at this time.
  </div>


    
    <script crossorigin="anonymous" integrity="sha256-EjcFZu3GC0BKxFiWen8voNZpbamfN+333rEZbxr/Xwo=" src="https://assets-cdn.github.com/assets/frameworks-12370566edc60b404ac458967a7f2fa0d6696da99f37edf7deb1196f1aff5f0a.js"></script>
    <script async="async" crossorigin="anonymous" integrity="sha256-hMRPCrOL1keRE33pLi8bw7DGU0k0WPbrLrin8nqGbj4=" src="https://assets-cdn.github.com/assets/github-84c44f0ab38bd64791137de92e2f1bc3b0c653493458f6eb2eb8a7f27a866e3e.js"></script>
    
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
  </div>
</div>


  </body>
</html>

